
// This file is autogenerated. All changes will be overwritten.

import { BigInteger } from 'big-integer';

export default Api;

namespace Api {

  type AnyClass = new (...args: any[]) => any;
  type I<T extends AnyClass> = InstanceType<T>;
  type ValuesOf<T> = T[keyof T];
  type AnyLiteral = Record<string, any>;
  type Buffer = Uint8Array;

  type Reader = any; // To be defined.
  type Client = any; // To be defined.
  type Utils = any; // To be defined.

  type X = unknown; // TODO Verify this.
  type Type = unknown; // TODO Verify this.
  type Bool = boolean;
  type int128 = number;
  type int256 = number;
  type long = number[] | string | BigInteger;
  type bytes = string | Uint8Array;

  class VirtualClass<Args extends AnyLiteral> {
    static CONSTRUCTOR_ID: number;
    static SUBCLASS_OF_ID: number;
    static className: string;
    static classType: 'constructor' | 'request';

    static serializeBytes(data: Buffer | string): Buffer;
    static serializeDate(date: Date | number): Buffer;
    static fromReader(reader: Reader): VirtualClass<Args>;

    CONSTRUCTOR_ID: number;
    SUBCLASS_OF_ID: number;
    className: string;
    classType: 'constructor' | 'request';

    constructor(args: Args);
  }

  class Request<Args, Response> extends VirtualClass<Partial<Args>> {
    static readResult(reader: Reader): Buffer;
    static resolve(client: Client, utils: Utils): Promise<void>;

    __response: Response;
  }

  export type TypeInputPeer = InputPeerEmpty | InputPeerSelf | InputPeerChat | InputPeerUser | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage;
  export type TypeInputUser = InputUserEmpty | InputUserSelf | InputUser | InputUserFromMessage;
  export type TypeInputContact = InputPhoneContact;
  export type TypeInputFile = InputFile | InputFileBig;
  export type TypeInputMedia = InputMediaEmpty | InputMediaUploadedPhoto | InputMediaPhoto | InputMediaGeoPoint | InputMediaContact | InputMediaUploadedDocument | InputMediaDocument | InputMediaVenue | InputMediaGifExternal | InputMediaPhotoExternal | InputMediaDocumentExternal | InputMediaGame | InputMediaInvoice | InputMediaGeoLive | InputMediaPoll;
  export type TypeInputChatPhoto = InputChatPhotoEmpty | InputChatUploadedPhoto | InputChatPhoto;
  export type TypeInputGeoPoint = InputGeoPointEmpty | InputGeoPoint;
  export type TypeInputPhoto = InputPhotoEmpty | InputPhoto;
  export type TypeInputFileLocation = InputFileLocation | InputEncryptedFileLocation | InputDocumentFileLocation | InputSecureFileLocation | InputTakeoutFileLocation | InputPhotoFileLocation | InputPeerPhotoFileLocation | InputStickerSetThumb;
  export type TypePeer = PeerUser | PeerChat | PeerChannel;
  export type TypeUser = UserEmpty | User;
  export type TypeUserProfilePhoto = UserProfilePhotoEmpty | UserProfilePhoto;
  export type TypeUserStatus = UserStatusEmpty | UserStatusOnline | UserStatusOffline | UserStatusRecently | UserStatusLastWeek | UserStatusLastMonth;
  export type TypeChat = ChatEmpty | Chat | ChatForbidden | Channel | ChannelForbidden;
  export type TypeChatFull = ChatFull | ChannelFull;
  export type TypeChatParticipant = ChatParticipant | ChatParticipantCreator | ChatParticipantAdmin;
  export type TypeChatParticipants = ChatParticipantsForbidden | ChatParticipants;
  export type TypeChatPhoto = ChatPhotoEmpty | ChatPhoto;
  export type TypeMessage = MessageEmpty | Message | MessageService;
  export type TypeMessageMedia = MessageMediaEmpty | MessageMediaPhoto | MessageMediaGeo | MessageMediaContact | MessageMediaUnsupported | MessageMediaDocument | MessageMediaWebPage | MessageMediaVenue | MessageMediaGame | MessageMediaInvoice | MessageMediaGeoLive | MessageMediaPoll;
  export type TypeMessageAction = MessageActionEmpty | MessageActionChatCreate | MessageActionChatEditTitle | MessageActionChatEditPhoto | MessageActionChatDeletePhoto | MessageActionChatAddUser | MessageActionChatDeleteUser | MessageActionChatJoinedByLink | MessageActionChannelCreate | MessageActionChatMigrateTo | MessageActionChannelMigrateFrom | MessageActionPinMessage | MessageActionHistoryClear | MessageActionGameScore | MessageActionPaymentSentMe | MessageActionPaymentSent | MessageActionPhoneCall | MessageActionScreenshotTaken | MessageActionCustomAction | MessageActionBotAllowed | MessageActionSecureValuesSentMe | MessageActionSecureValuesSent | MessageActionContactSignUp;
  export type TypeDialog = Dialog | DialogFolder;
  export type TypePhoto = PhotoEmpty | Photo;
  export type TypePhotoSize = PhotoSizeEmpty | PhotoSize | PhotoCachedSize | PhotoStrippedSize;
  export type TypeGeoPoint = GeoPointEmpty | GeoPoint;
  export type TypeInputNotifyPeer = InputNotifyPeer | InputNotifyUsers | InputNotifyChats | InputNotifyBroadcasts;
  export type TypeInputPeerNotifySettings = InputPeerNotifySettings;
  export type TypePeerNotifySettings = PeerNotifySettings;
  export type TypePeerSettings = PeerSettings;
  export type TypeWallPaper = WallPaper;
  export type TypeReportReason = InputReportReasonSpam | InputReportReasonViolence | InputReportReasonPornography | InputReportReasonChildAbuse | InputReportReasonOther | InputReportReasonCopyright | InputReportReasonGeoIrrelevant;
  export type TypeUserFull = UserFull;
  export type TypeContact = Contact;
  export type TypeImportedContact = ImportedContact;
  export type TypeContactBlocked = ContactBlocked;
  export type TypeContactStatus = ContactStatus;
  export type TypeMessagesFilter = InputMessagesFilterEmpty | InputMessagesFilterPhotos | InputMessagesFilterVideo | InputMessagesFilterPhotoVideo | InputMessagesFilterDocument | InputMessagesFilterUrl | InputMessagesFilterGif | InputMessagesFilterVoice | InputMessagesFilterMusic | InputMessagesFilterChatPhotos | InputMessagesFilterPhoneCalls | InputMessagesFilterRoundVoice | InputMessagesFilterRoundVideo | InputMessagesFilterMyMentions | InputMessagesFilterGeo | InputMessagesFilterContacts;
  export type TypeUpdate = UpdateNewMessage | UpdateMessageID | UpdateDeleteMessages | UpdateUserTyping | UpdateChatUserTyping | UpdateChatParticipants | UpdateUserStatus | UpdateUserName | UpdateUserPhoto | UpdateNewEncryptedMessage | UpdateEncryptedChatTyping | UpdateEncryption | UpdateEncryptedMessagesRead | UpdateChatParticipantAdd | UpdateChatParticipantDelete | UpdateDcOptions | UpdateUserBlocked | UpdateNotifySettings | UpdateServiceNotification | UpdatePrivacy | UpdateUserPhone | UpdateReadHistoryInbox | UpdateReadHistoryOutbox | UpdateWebPage | UpdateReadMessagesContents | UpdateChannelTooLong | UpdateChannel | UpdateNewChannelMessage | UpdateReadChannelInbox | UpdateDeleteChannelMessages | UpdateChannelMessageViews | UpdateChatParticipantAdmin | UpdateNewStickerSet | UpdateStickerSetsOrder | UpdateStickerSets | UpdateSavedGifs | UpdateBotInlineQuery | UpdateBotInlineSend | UpdateEditChannelMessage | UpdateChannelPinnedMessage | UpdateBotCallbackQuery | UpdateEditMessage | UpdateInlineBotCallbackQuery | UpdateReadChannelOutbox | UpdateDraftMessage | UpdateReadFeaturedStickers | UpdateRecentStickers | UpdateConfig | UpdatePtsChanged | UpdateChannelWebPage | UpdateDialogPinned | UpdatePinnedDialogs | UpdateBotWebhookJSON | UpdateBotWebhookJSONQuery | UpdateBotShippingQuery | UpdateBotPrecheckoutQuery | UpdatePhoneCall | UpdateLangPackTooLong | UpdateLangPack | UpdateFavedStickers | UpdateChannelReadMessagesContents | UpdateContactsReset | UpdateChannelAvailableMessages | UpdateDialogUnreadMark | UpdateUserPinnedMessage | UpdateChatPinnedMessage | UpdateMessagePoll | UpdateChatDefaultBannedRights | UpdateFolderPeers | UpdatePeerSettings | UpdatePeerLocated | UpdateNewScheduledMessage | UpdateDeleteScheduledMessages | UpdateTheme;
  export type TypeUpdates = UpdatesTooLong | UpdateShortMessage | UpdateShortChatMessage | UpdateShort | UpdatesCombined | Updates | UpdateShortSentMessage;
  export type TypeDcOption = DcOption;
  export type TypeConfig = Config;
  export type TypeNearestDc = NearestDc;
  export type TypeEncryptedChat = EncryptedChatEmpty | EncryptedChatWaiting | EncryptedChatRequested | EncryptedChat | EncryptedChatDiscarded;
  export type TypeInputEncryptedChat = InputEncryptedChat;
  export type TypeEncryptedFile = EncryptedFileEmpty | EncryptedFile;
  export type TypeInputEncryptedFile = InputEncryptedFileEmpty | InputEncryptedFileUploaded | InputEncryptedFile | InputEncryptedFileBigUploaded;
  export type TypeEncryptedMessage = EncryptedMessage | EncryptedMessageService;
  export type TypeInputDocument = InputDocumentEmpty | InputDocument;
  export type TypeDocument = DocumentEmpty | Document;
  export type TypeNotifyPeer = NotifyPeer | NotifyUsers | NotifyChats | NotifyBroadcasts;
  export type TypeSendMessageAction = SendMessageTypingAction | SendMessageCancelAction | SendMessageRecordVideoAction | SendMessageUploadVideoAction | SendMessageRecordAudioAction | SendMessageUploadAudioAction | SendMessageUploadPhotoAction | SendMessageUploadDocumentAction | SendMessageGeoLocationAction | SendMessageChooseContactAction | SendMessageGamePlayAction | SendMessageRecordRoundAction | SendMessageUploadRoundAction;
  export type TypeInputPrivacyKey = InputPrivacyKeyStatusTimestamp | InputPrivacyKeyChatInvite | InputPrivacyKeyPhoneCall | InputPrivacyKeyPhoneP2P | InputPrivacyKeyForwards | InputPrivacyKeyProfilePhoto | InputPrivacyKeyPhoneNumber | InputPrivacyKeyAddedByPhone;
  export type TypePrivacyKey = PrivacyKeyStatusTimestamp | PrivacyKeyChatInvite | PrivacyKeyPhoneCall | PrivacyKeyPhoneP2P | PrivacyKeyForwards | PrivacyKeyProfilePhoto | PrivacyKeyPhoneNumber | PrivacyKeyAddedByPhone;
  export type TypeInputPrivacyRule = InputPrivacyValueAllowContacts | InputPrivacyValueAllowAll | InputPrivacyValueAllowUsers | InputPrivacyValueDisallowContacts | InputPrivacyValueDisallowAll | InputPrivacyValueDisallowUsers | InputPrivacyValueAllowChatParticipants | InputPrivacyValueDisallowChatParticipants;
  export type TypePrivacyRule = PrivacyValueAllowContacts | PrivacyValueAllowAll | PrivacyValueAllowUsers | PrivacyValueDisallowContacts | PrivacyValueDisallowAll | PrivacyValueDisallowUsers | PrivacyValueAllowChatParticipants | PrivacyValueDisallowChatParticipants;
  export type TypeAccountDaysTTL = AccountDaysTTL;
  export type TypeDocumentAttribute = DocumentAttributeImageSize | DocumentAttributeAnimated | DocumentAttributeSticker | DocumentAttributeVideo | DocumentAttributeAudio | DocumentAttributeFilename | DocumentAttributeHasStickers;
  export type TypeStickerPack = StickerPack;
  export type TypeWebPage = WebPageEmpty | WebPagePending | WebPage | WebPageNotModified;
  export type TypeAuthorization = Authorization;
  export type TypeReceivedNotifyMessage = ReceivedNotifyMessage;
  export type TypeExportedChatInvite = ChatInviteEmpty | ChatInviteExported;
  export type TypeChatInvite = ChatInviteAlready | ChatInvite;
  export type TypeInputStickerSet = InputStickerSetEmpty | InputStickerSetID | InputStickerSetShortName | InputStickerSetAnimatedEmoji;
  export type TypeStickerSet = StickerSet;
  export type TypeBotCommand = BotCommand;
  export type TypeBotInfo = BotInfo;
  export type TypeKeyboardButton = KeyboardButton | KeyboardButtonUrl | KeyboardButtonCallback | KeyboardButtonRequestPhone | KeyboardButtonRequestGeoLocation | KeyboardButtonSwitchInline | KeyboardButtonGame | KeyboardButtonBuy | KeyboardButtonUrlAuth | InputKeyboardButtonUrlAuth;
  export type TypeKeyboardButtonRow = KeyboardButtonRow;
  export type TypeReplyMarkup = ReplyKeyboardHide | ReplyKeyboardForceReply | ReplyKeyboardMarkup | ReplyInlineMarkup;
  export type TypeMessageEntity = MessageEntityUnknown | MessageEntityMention | MessageEntityHashtag | MessageEntityBotCommand | MessageEntityUrl | MessageEntityEmail | MessageEntityBold | MessageEntityItalic | MessageEntityCode | MessageEntityPre | MessageEntityTextUrl | MessageEntityMentionName | InputMessageEntityMentionName | MessageEntityPhone | MessageEntityCashtag | MessageEntityUnderline | MessageEntityStrike | MessageEntityBlockquote;
  export type TypeInputChannel = InputChannelEmpty | InputChannel | InputChannelFromMessage;
  export type TypeMessageRange = MessageRange;
  export type TypeChannelMessagesFilter = ChannelMessagesFilterEmpty | ChannelMessagesFilter;
  export type TypeChannelParticipant = ChannelParticipant | ChannelParticipantSelf | ChannelParticipantCreator | ChannelParticipantAdmin | ChannelParticipantBanned;
  export type TypeChannelParticipantsFilter = ChannelParticipantsRecent | ChannelParticipantsAdmins | ChannelParticipantsKicked | ChannelParticipantsBots | ChannelParticipantsBanned | ChannelParticipantsSearch | ChannelParticipantsContacts;
  export type TypeFoundGif = FoundGif | FoundGifCached;
  export type TypeInputBotInlineMessage = InputBotInlineMessageMediaAuto | InputBotInlineMessageText | InputBotInlineMessageMediaGeo | InputBotInlineMessageMediaVenue | InputBotInlineMessageMediaContact | InputBotInlineMessageGame;
  export type TypeInputBotInlineResult = InputBotInlineResult | InputBotInlineResultPhoto | InputBotInlineResultDocument | InputBotInlineResultGame;
  export type TypeBotInlineMessage = BotInlineMessageMediaAuto | BotInlineMessageText | BotInlineMessageMediaGeo | BotInlineMessageMediaVenue | BotInlineMessageMediaContact;
  export type TypeBotInlineResult = BotInlineResult | BotInlineMediaResult;
  export type TypeExportedMessageLink = ExportedMessageLink;
  export type TypeMessageFwdHeader = MessageFwdHeader;
  export type TypeInputBotInlineMessageID = InputBotInlineMessageID;
  export type TypeInlineBotSwitchPM = InlineBotSwitchPM;
  export type TypeTopPeer = TopPeer;
  export type TypeTopPeerCategory = TopPeerCategoryBotsPM | TopPeerCategoryBotsInline | TopPeerCategoryCorrespondents | TopPeerCategoryGroups | TopPeerCategoryChannels | TopPeerCategoryPhoneCalls | TopPeerCategoryForwardUsers | TopPeerCategoryForwardChats;
  export type TypeTopPeerCategoryPeers = TopPeerCategoryPeers;
  export type TypeDraftMessage = DraftMessageEmpty | DraftMessage;
  export type TypeStickerSetCovered = StickerSetCovered | StickerSetMultiCovered;
  export type TypeMaskCoords = MaskCoords;
  export type TypeInputStickeredMedia = InputStickeredMediaPhoto | InputStickeredMediaDocument;
  export type TypeGame = Game;
  export type TypeInputGame = InputGameID | InputGameShortName;
  export type TypeHighScore = HighScore;
  export type TypeRichText = TextEmpty | TextPlain | TextBold | TextItalic | TextUnderline | TextStrike | TextFixed | TextUrl | TextEmail | TextConcat | TextSubscript | TextSuperscript | TextMarked | TextPhone | TextImage | TextAnchor;
  export type TypePageBlock = PageBlockUnsupported | PageBlockTitle | PageBlockSubtitle | PageBlockAuthorDate | PageBlockHeader | PageBlockSubheader | PageBlockParagraph | PageBlockPreformatted | PageBlockFooter | PageBlockDivider | PageBlockAnchor | PageBlockList | PageBlockBlockquote | PageBlockPullquote | PageBlockPhoto | PageBlockVideo | PageBlockCover | PageBlockEmbed | PageBlockEmbedPost | PageBlockCollage | PageBlockSlideshow | PageBlockChannel | PageBlockAudio | PageBlockKicker | PageBlockTable | PageBlockOrderedList | PageBlockDetails | PageBlockRelatedArticles | PageBlockMap;
  export type TypePhoneCallDiscardReason = PhoneCallDiscardReasonMissed | PhoneCallDiscardReasonDisconnect | PhoneCallDiscardReasonHangup | PhoneCallDiscardReasonBusy;
  export type TypeDataJSON = DataJSON;
  export type TypeLabeledPrice = LabeledPrice;
  export type TypeInvoice = Invoice;
  export type TypePaymentCharge = PaymentCharge;
  export type TypePostAddress = PostAddress;
  export type TypePaymentRequestedInfo = PaymentRequestedInfo;
  export type TypePaymentSavedCredentials = PaymentSavedCredentialsCard;
  export type TypeWebDocument = WebDocument | WebDocumentNoProxy;
  export type TypeInputWebDocument = InputWebDocument;
  export type TypeInputWebFileLocation = InputWebFileLocation | InputWebFileGeoPointLocation;
  export type TypeInputPaymentCredentials = InputPaymentCredentialsSaved | InputPaymentCredentials | InputPaymentCredentialsApplePay | InputPaymentCredentialsAndroidPay;
  export type TypeShippingOption = ShippingOption;
  export type TypeInputStickerSetItem = InputStickerSetItem;
  export type TypeInputPhoneCall = InputPhoneCall;
  export type TypePhoneCall = PhoneCallEmpty | PhoneCallWaiting | PhoneCallRequested | PhoneCallAccepted | PhoneCall | PhoneCallDiscarded;
  export type TypePhoneConnection = PhoneConnection;
  export type TypePhoneCallProtocol = PhoneCallProtocol;
  export type TypeCdnPublicKey = CdnPublicKey;
  export type TypeCdnConfig = CdnConfig;
  export type TypeLangPackString = LangPackString | LangPackStringPluralized | LangPackStringDeleted;
  export type TypeLangPackDifference = LangPackDifference;
  export type TypeLangPackLanguage = LangPackLanguage;
  export type TypeChannelAdminLogEventAction = ChannelAdminLogEventActionChangeTitle | ChannelAdminLogEventActionChangeAbout | ChannelAdminLogEventActionChangeUsername | ChannelAdminLogEventActionChangePhoto | ChannelAdminLogEventActionToggleInvites | ChannelAdminLogEventActionToggleSignatures | ChannelAdminLogEventActionUpdatePinned | ChannelAdminLogEventActionEditMessage | ChannelAdminLogEventActionDeleteMessage | ChannelAdminLogEventActionParticipantJoin | ChannelAdminLogEventActionParticipantLeave | ChannelAdminLogEventActionParticipantInvite | ChannelAdminLogEventActionParticipantToggleBan | ChannelAdminLogEventActionParticipantToggleAdmin | ChannelAdminLogEventActionChangeStickerSet | ChannelAdminLogEventActionTogglePreHistoryHidden | ChannelAdminLogEventActionDefaultBannedRights | ChannelAdminLogEventActionStopPoll | ChannelAdminLogEventActionChangeLinkedChat | ChannelAdminLogEventActionChangeLocation | ChannelAdminLogEventActionToggleSlowMode;
  export type TypeChannelAdminLogEvent = ChannelAdminLogEvent;
  export type TypeChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter;
  export type TypePopularContact = PopularContact;
  export type TypeRecentMeUrl = RecentMeUrlUnknown | RecentMeUrlUser | RecentMeUrlChat | RecentMeUrlChatInvite | RecentMeUrlStickerSet;
  export type TypeInputSingleMedia = InputSingleMedia;
  export type TypeWebAuthorization = WebAuthorization;
  export type TypeInputMessage = InputMessageID | InputMessageReplyTo | InputMessagePinned;
  export type TypeInputDialogPeer = InputDialogPeer | InputDialogPeerFolder;
  export type TypeDialogPeer = DialogPeer | DialogPeerFolder;
  export type TypeFileHash = FileHash;
  export type TypeInputClientProxy = InputClientProxy;
  export type TypeInputSecureFile = InputSecureFileUploaded | InputSecureFile;
  export type TypeSecureFile = SecureFileEmpty | SecureFile;
  export type TypeSecureData = SecureData;
  export type TypeSecurePlainData = SecurePlainPhone | SecurePlainEmail;
  export type TypeSecureValueType = SecureValueTypePersonalDetails | SecureValueTypePassport | SecureValueTypeDriverLicense | SecureValueTypeIdentityCard | SecureValueTypeInternalPassport | SecureValueTypeAddress | SecureValueTypeUtilityBill | SecureValueTypeBankStatement | SecureValueTypeRentalAgreement | SecureValueTypePassportRegistration | SecureValueTypeTemporaryRegistration | SecureValueTypePhone | SecureValueTypeEmail;
  export type TypeSecureValue = SecureValue;
  export type TypeInputSecureValue = InputSecureValue;
  export type TypeSecureValueHash = SecureValueHash;
  export type TypeSecureValueError = SecureValueErrorData | SecureValueErrorFrontSide | SecureValueErrorReverseSide | SecureValueErrorSelfie | SecureValueErrorFile | SecureValueErrorFiles | SecureValueError | SecureValueErrorTranslationFile | SecureValueErrorTranslationFiles;
  export type TypeSecureCredentialsEncrypted = SecureCredentialsEncrypted;
  export type TypeSavedContact = SavedPhoneContact;
  export type TypePasswordKdfAlgo = PasswordKdfAlgoUnknown | PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;
  export type TypeSecurePasswordKdfAlgo = SecurePasswordKdfAlgoUnknown | SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 | SecurePasswordKdfAlgoSHA512;
  export type TypeSecureSecretSettings = SecureSecretSettings;
  export type TypeInputCheckPasswordSRP = InputCheckPasswordEmpty | InputCheckPasswordSRP;
  export type TypeSecureRequiredType = SecureRequiredType | SecureRequiredTypeOneOf;
  export type TypeInputAppEvent = InputAppEvent;
  export type TypeJSONObjectValue = JsonObjectValue;
  export type TypeJSONValue = JsonNull | JsonBool | JsonNumber | JsonString | JsonArray | JsonObject;
  export type TypePageTableCell = PageTableCell;
  export type TypePageTableRow = PageTableRow;
  export type TypePageCaption = PageCaption;
  export type TypePageListItem = PageListItemText | PageListItemBlocks;
  export type TypePageListOrderedItem = PageListOrderedItemText | PageListOrderedItemBlocks;
  export type TypePageRelatedArticle = PageRelatedArticle;
  export type TypePage = Page;
  export type TypePollAnswer = PollAnswer;
  export type TypePoll = Poll;
  export type TypePollAnswerVoters = PollAnswerVoters;
  export type TypePollResults = PollResults;
  export type TypeChatOnlines = ChatOnlines;
  export type TypeStatsURL = StatsURL;
  export type TypeChatAdminRights = ChatAdminRights;
  export type TypeChatBannedRights = ChatBannedRights;
  export type TypeInputWallPaper = InputWallPaper | InputWallPaperSlug;
  export type TypeCodeSettings = CodeSettings;
  export type TypeWallPaperSettings = WallPaperSettings;
  export type TypeAutoDownloadSettings = AutoDownloadSettings;
  export type TypeEmojiKeyword = EmojiKeyword | EmojiKeywordDeleted;
  export type TypeEmojiKeywordsDifference = EmojiKeywordsDifference;
  export type TypeEmojiURL = EmojiURL;
  export type TypeEmojiLanguage = EmojiLanguage;
  export type TypeFileLocation = FileLocationToBeDeprecated;
  export type TypeFolder = Folder;
  export type TypeInputFolderPeer = InputFolderPeer;
  export type TypeFolderPeer = FolderPeer;
  export type TypeUrlAuthResult = UrlAuthResultRequest | UrlAuthResultAccepted | UrlAuthResultDefault;
  export type TypeChannelLocation = ChannelLocationEmpty | ChannelLocation;
  export type TypePeerLocated = PeerLocated;
  export type TypeRestrictionReason = RestrictionReason;
  export type TypeInputTheme = InputTheme | InputThemeSlug;
  export type TypeTheme = ThemeDocumentNotModified | Theme;
  export type TypeResPQ = ResPQ;
  export type TypeP_Q_inner_data = PQInnerData | PQInnerDataDc | PQInnerDataTemp | PQInnerDataTempDc;
  export type TypeServer_DH_Params = ServerDHParamsFail | ServerDHParamsOk;
  export type TypeServer_DH_inner_data = ServerDHInnerData;
  export type TypeClient_DH_Inner_Data = ClientDHInnerData;
  export type TypeSet_client_DH_params_answer = DhGenOk | DhGenRetry | DhGenFail;
  export type TypeDestroyAuthKeyRes = DestroyAuthKeyOk | DestroyAuthKeyNone | DestroyAuthKeyFail;
  export type TypeMsgsAck = MsgsAck;
  export type TypeBadMsgNotification = BadMsgNotification | BadServerSalt;
  export type TypeMsgsStateReq = MsgsStateReq;
  export type TypeMsgsStateInfo = MsgsStateInfo;
  export type TypeMsgsAllInfo = MsgsAllInfo;
  export type TypeMsgDetailedInfo = MsgDetailedInfo | MsgNewDetailedInfo;
  export type TypeMsgResendReq = MsgResendReq;
  export type TypeRpcError = RpcError;
  export type TypeRpcDropAnswer = RpcAnswerUnknown | RpcAnswerDroppedRunning | RpcAnswerDropped;
  export type TypeFutureSalt = FutureSalt;
  export type TypeFutureSalts = FutureSalts;
  export type TypePong = Pong;
  export type TypeDestroySessionRes = DestroySessionOk | DestroySessionNone;
  export type TypeNewSession = NewSessionCreated;
  export type TypeHttpWait = HttpWait;
  export type TypeIpPort = IpPort | IpPortSecret;
  export type TypeAccessPointRule = AccessPointRule;
  export type TypeTlsClientHello = TlsClientHello;
  export type TypeTlsBlock = TlsBlockString | TlsBlockRandom | TlsBlockZero | TlsBlockDomain | TlsBlockGrease | TlsBlockScope;
  

  export namespace storage {
    export type TypeFileType = storage.FileUnknown | storage.FilePartial | storage.FileJpeg | storage.FileGif | storage.FilePng | storage.FilePdf | storage.FileMp3 | storage.FileMov | storage.FileMp4 | storage.FileWebp;
  }

  export namespace auth {
    export type TypeSentCode = auth.SentCode;
    export type TypeAuthorization = auth.Authorization | auth.AuthorizationSignUpRequired;
    export type TypeExportedAuthorization = auth.ExportedAuthorization;
    export type TypePasswordRecovery = auth.PasswordRecovery;
    export type TypeCodeType = auth.CodeTypeSms | auth.CodeTypeCall | auth.CodeTypeFlashCall;
    export type TypeSentCodeType = auth.SentCodeTypeApp | auth.SentCodeTypeSms | auth.SentCodeTypeCall | auth.SentCodeTypeFlashCall;
  }

  export namespace contacts {
    export type TypeContacts = contacts.ContactsNotModified | contacts.Contacts;
    export type TypeImportedContacts = contacts.ImportedContacts;
    export type TypeBlocked = contacts.Blocked | contacts.BlockedSlice;
    export type TypeFound = contacts.Found;
    export type TypeResolvedPeer = contacts.ResolvedPeer;
    export type TypeTopPeers = contacts.TopPeersNotModified | contacts.TopPeers | contacts.TopPeersDisabled;
  }

  export namespace messages {
    export type TypeDialogs = messages.Dialogs | messages.DialogsSlice | messages.DialogsNotModified;
    export type TypeMessages = messages.Messages | messages.MessagesSlice | messages.ChannelMessages | messages.MessagesNotModified;
    export type TypeChats = messages.Chats | messages.ChatsSlice;
    export type TypeChatFull = messages.ChatFull;
    export type TypeAffectedHistory = messages.AffectedHistory;
    export type TypeDhConfig = messages.DhConfigNotModified | messages.DhConfig;
    export type TypeSentEncryptedMessage = messages.SentEncryptedMessage | messages.SentEncryptedFile;
    export type TypeStickers = messages.StickersNotModified | messages.Stickers;
    export type TypeAllStickers = messages.AllStickersNotModified | messages.AllStickers;
    export type TypeAffectedMessages = messages.AffectedMessages;
    export type TypeStickerSet = messages.StickerSet;
    export type TypeFoundGifs = messages.FoundGifs;
    export type TypeSavedGifs = messages.SavedGifsNotModified | messages.SavedGifs;
    export type TypeBotResults = messages.BotResults;
    export type TypeBotCallbackAnswer = messages.BotCallbackAnswer;
    export type TypeMessageEditData = messages.MessageEditData;
    export type TypePeerDialogs = messages.PeerDialogs;
    export type TypeFeaturedStickers = messages.FeaturedStickersNotModified | messages.FeaturedStickers;
    export type TypeRecentStickers = messages.RecentStickersNotModified | messages.RecentStickers;
    export type TypeArchivedStickers = messages.ArchivedStickers;
    export type TypeStickerSetInstallResult = messages.StickerSetInstallResultSuccess | messages.StickerSetInstallResultArchive;
    export type TypeHighScores = messages.HighScores;
    export type TypeFavedStickers = messages.FavedStickersNotModified | messages.FavedStickers;
    export type TypeFoundStickerSets = messages.FoundStickerSetsNotModified | messages.FoundStickerSets;
    export type TypeSearchCounter = messages.SearchCounter;
  }

  export namespace updates {
    export type TypeState = updates.State;
    export type TypeDifference = updates.DifferenceEmpty | updates.Difference | updates.DifferenceSlice | updates.DifferenceTooLong;
    export type TypeChannelDifference = updates.ChannelDifferenceEmpty | updates.ChannelDifferenceTooLong | updates.ChannelDifference;
  }

  export namespace photos {
    export type TypePhotos = photos.Photos | photos.PhotosSlice;
    export type TypePhoto = photos.Photo;
  }

  export namespace upload {
    export type TypeFile = upload.File | upload.FileCdnRedirect;
    export type TypeWebFile = upload.WebFile;
    export type TypeCdnFile = upload.CdnFileReuploadNeeded | upload.CdnFile;
  }

  export namespace help {
    export type TypeAppUpdate = help.AppUpdate | help.NoAppUpdate;
    export type TypeInviteText = help.InviteText;
    export type TypeSupport = help.Support;
    export type TypeTermsOfService = help.TermsOfService;
    export type TypeRecentMeUrls = help.RecentMeUrls;
    export type TypeProxyData = help.ProxyDataEmpty | help.ProxyDataPromo;
    export type TypeTermsOfServiceUpdate = help.TermsOfServiceUpdateEmpty | help.TermsOfServiceUpdate;
    export type TypeDeepLinkInfo = help.DeepLinkInfoEmpty | help.DeepLinkInfo;
    export type TypePassportConfig = help.PassportConfigNotModified | help.PassportConfig;
    export type TypeSupportName = help.SupportName;
    export type TypeUserInfo = help.UserInfoEmpty | help.UserInfo;
    export type TypeConfigSimple = help.ConfigSimple;
  }

  export namespace account {
    export type TypePrivacyRules = account.PrivacyRules;
    export type TypeAuthorizations = account.Authorizations;
    export type TypePassword = account.Password;
    export type TypePasswordSettings = account.PasswordSettings;
    export type TypePasswordInputSettings = account.PasswordInputSettings;
    export type TypeTmpPassword = account.TmpPassword;
    export type TypeWebAuthorizations = account.WebAuthorizations;
    export type TypeAuthorizationForm = account.AuthorizationForm;
    export type TypeSentEmailCode = account.SentEmailCode;
    export type TypeTakeout = account.Takeout;
    export type TypeWallPapers = account.WallPapersNotModified | account.WallPapers;
    export type TypeAutoDownloadSettings = account.AutoDownloadSettings;
    export type TypeThemes = account.ThemesNotModified | account.Themes;
  }

  export namespace channels {
    export type TypeChannelParticipants = channels.ChannelParticipants | channels.ChannelParticipantsNotModified;
    export type TypeChannelParticipant = channels.ChannelParticipant;
    export type TypeAdminLogResults = channels.AdminLogResults;
  }

  export namespace payments {
    export type TypePaymentForm = payments.PaymentForm;
    export type TypeValidatedRequestedInfo = payments.ValidatedRequestedInfo;
    export type TypePaymentResult = payments.PaymentResult | payments.PaymentVerificationNeeded;
    export type TypePaymentReceipt = payments.PaymentReceipt;
    export type TypeSavedInfo = payments.SavedInfo;
  }

  export namespace phone {
    export type TypePhoneCall = phone.PhoneCall;
  }

  export class InputPeerEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputPeerSelf extends VirtualClass<{
    
  }> {
    
  };
  export class InputPeerChat extends VirtualClass<{
    chatId: int;
  }> {
    chatId: int;
  };
  export class InputPeerUser extends VirtualClass<{
    userId: int;
    accessHash: long;
  }> {
    userId: int;
    accessHash: long;
  };
  export class InputPeerChannel extends VirtualClass<{
    channelId: int;
    accessHash: long;
  }> {
    channelId: int;
    accessHash: long;
  };
  export class InputPeerUserFromMessage extends VirtualClass<{
    peer: TypeInputPeer;
    msgId: int;
    userId: int;
  }> {
    peer: TypeInputPeer;
    msgId: int;
    userId: int;
  };
  export class InputPeerChannelFromMessage extends VirtualClass<{
    peer: TypeInputPeer;
    msgId: int;
    channelId: int;
  }> {
    peer: TypeInputPeer;
    msgId: int;
    channelId: int;
  };
  export class InputUserEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputUserSelf extends VirtualClass<{
    
  }> {
    
  };
  export class InputUser extends VirtualClass<{
    userId: int;
    accessHash: long;
  }> {
    userId: int;
    accessHash: long;
  };
  export class InputUserFromMessage extends VirtualClass<{
    peer: TypeInputPeer;
    msgId: int;
    userId: int;
  }> {
    peer: TypeInputPeer;
    msgId: int;
    userId: int;
  };
  export class InputPhoneContact extends VirtualClass<{
    clientId: long;
    phone: string;
    firstName: string;
    lastName: string;
  }> {
    clientId: long;
    phone: string;
    firstName: string;
    lastName: string;
  };
  export class InputFile extends VirtualClass<{
    id: long;
    parts: int;
    name: string;
    md5Checksum: string;
  }> {
    id: long;
    parts: int;
    name: string;
    md5Checksum: string;
  };
  export class InputFileBig extends VirtualClass<{
    id: long;
    parts: int;
    name: string;
  }> {
    id: long;
    parts: int;
    name: string;
  };
  export class InputMediaEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputMediaUploadedPhoto extends VirtualClass<{
    // flags: null;
    file: TypeInputFile;
    stickers?: TypeInputDocument[];
    ttlSeconds?: int;
  }> {
    // flags: null;
    file: TypeInputFile;
    stickers?: TypeInputDocument[];
    ttlSeconds?: int;
  };
  export class InputMediaPhoto extends VirtualClass<{
    // flags: null;
    id: TypeInputPhoto;
    ttlSeconds?: int;
  }> {
    // flags: null;
    id: TypeInputPhoto;
    ttlSeconds?: int;
  };
  export class InputMediaGeoPoint extends VirtualClass<{
    geoPoint: TypeInputGeoPoint;
  }> {
    geoPoint: TypeInputGeoPoint;
  };
  export class InputMediaContact extends VirtualClass<{
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
  }> {
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
  };
  export class InputMediaUploadedDocument extends VirtualClass<{
    // flags: null;
    nosoundVideo?: true;
    file: TypeInputFile;
    thumb?: TypeInputFile;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
    stickers?: TypeInputDocument[];
    ttlSeconds?: int;
  }> {
    // flags: null;
    nosoundVideo?: true;
    file: TypeInputFile;
    thumb?: TypeInputFile;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
    stickers?: TypeInputDocument[];
    ttlSeconds?: int;
  };
  export class InputMediaDocument extends VirtualClass<{
    // flags: null;
    id: TypeInputDocument;
    ttlSeconds?: int;
  }> {
    // flags: null;
    id: TypeInputDocument;
    ttlSeconds?: int;
  };
  export class InputMediaVenue extends VirtualClass<{
    geoPoint: TypeInputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  }> {
    geoPoint: TypeInputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  };
  export class InputMediaGifExternal extends VirtualClass<{
    url: string;
    q: string;
  }> {
    url: string;
    q: string;
  };
  export class InputMediaPhotoExternal extends VirtualClass<{
    // flags: null;
    url: string;
    ttlSeconds?: int;
  }> {
    // flags: null;
    url: string;
    ttlSeconds?: int;
  };
  export class InputMediaDocumentExternal extends VirtualClass<{
    // flags: null;
    url: string;
    ttlSeconds?: int;
  }> {
    // flags: null;
    url: string;
    ttlSeconds?: int;
  };
  export class InputMediaGame extends VirtualClass<{
    id: TypeInputGame;
  }> {
    id: TypeInputGame;
  };
  export class InputMediaInvoice extends VirtualClass<{
    // flags: null;
    title: string;
    description: string;
    photo?: TypeInputWebDocument;
    invoice: TypeInvoice;
    payload: bytes;
    provider: string;
    providerData: TypeDataJSON;
    startParam: string;
  }> {
    // flags: null;
    title: string;
    description: string;
    photo?: TypeInputWebDocument;
    invoice: TypeInvoice;
    payload: bytes;
    provider: string;
    providerData: TypeDataJSON;
    startParam: string;
  };
  export class InputMediaGeoLive extends VirtualClass<{
    // flags: null;
    stopped?: true;
    geoPoint: TypeInputGeoPoint;
    period?: int;
  }> {
    // flags: null;
    stopped?: true;
    geoPoint: TypeInputGeoPoint;
    period?: int;
  };
  export class InputMediaPoll extends VirtualClass<{
    poll: TypePoll;
  }> {
    poll: TypePoll;
  };
  export class InputChatPhotoEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputChatUploadedPhoto extends VirtualClass<{
    file: TypeInputFile;
  }> {
    file: TypeInputFile;
  };
  export class InputChatPhoto extends VirtualClass<{
    id: TypeInputPhoto;
  }> {
    id: TypeInputPhoto;
  };
  export class InputGeoPointEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputGeoPoint extends VirtualClass<{
    lat: double;
    long: double;
  }> {
    lat: double;
    long: double;
  };
  export class InputPhotoEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputPhoto extends VirtualClass<{
    id: long;
    accessHash: long;
    fileReference: bytes;
  }> {
    id: long;
    accessHash: long;
    fileReference: bytes;
  };
  export class InputFileLocation extends VirtualClass<{
    volumeId: long;
    localId: int;
    secret: long;
    fileReference: bytes;
  }> {
    volumeId: long;
    localId: int;
    secret: long;
    fileReference: bytes;
  };
  export class InputEncryptedFileLocation extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputDocumentFileLocation extends VirtualClass<{
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  }> {
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  };
  export class InputSecureFileLocation extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputTakeoutFileLocation extends VirtualClass<{
    
  }> {
    
  };
  export class InputPhotoFileLocation extends VirtualClass<{
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  }> {
    id: long;
    accessHash: long;
    fileReference: bytes;
    thumbSize: string;
  };
  export class InputPeerPhotoFileLocation extends VirtualClass<{
    // flags: null;
    big?: true;
    peer: TypeInputPeer;
    volumeId: long;
    localId: int;
  }> {
    // flags: null;
    big?: true;
    peer: TypeInputPeer;
    volumeId: long;
    localId: int;
  };
  export class InputStickerSetThumb extends VirtualClass<{
    stickerset: TypeInputStickerSet;
    volumeId: long;
    localId: int;
  }> {
    stickerset: TypeInputStickerSet;
    volumeId: long;
    localId: int;
  };
  export class PeerUser extends VirtualClass<{
    userId: int;
  }> {
    userId: int;
  };
  export class PeerChat extends VirtualClass<{
    chatId: int;
  }> {
    chatId: int;
  };
  export class PeerChannel extends VirtualClass<{
    channelId: int;
  }> {
    channelId: int;
  };
  export class UserEmpty extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class User extends VirtualClass<{
    // flags: null;
    self?: true;
    contact?: true;
    mutualContact?: true;
    deleted?: true;
    bot?: true;
    botChatHistory?: true;
    botNochats?: true;
    verified?: true;
    restricted?: true;
    min?: true;
    botInlineGeo?: true;
    support?: true;
    scam?: true;
    id: int;
    accessHash?: long;
    firstName?: string;
    lastName?: string;
    username?: string;
    phone?: string;
    photo?: TypeUserProfilePhoto;
    status?: TypeUserStatus;
    botInfoVersion?: int;
    restrictionReason?: TypeRestrictionReason[];
    botInlinePlaceholder?: string;
    langCode?: string;
  }> {
    // flags: null;
    self?: true;
    contact?: true;
    mutualContact?: true;
    deleted?: true;
    bot?: true;
    botChatHistory?: true;
    botNochats?: true;
    verified?: true;
    restricted?: true;
    min?: true;
    botInlineGeo?: true;
    support?: true;
    scam?: true;
    id: int;
    accessHash?: long;
    firstName?: string;
    lastName?: string;
    username?: string;
    phone?: string;
    photo?: TypeUserProfilePhoto;
    status?: TypeUserStatus;
    botInfoVersion?: int;
    restrictionReason?: TypeRestrictionReason[];
    botInlinePlaceholder?: string;
    langCode?: string;
  };
  export class UserProfilePhotoEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class UserProfilePhoto extends VirtualClass<{
    photoId: long;
    photoSmall: TypeFileLocation;
    photoBig: TypeFileLocation;
    dcId: int;
  }> {
    photoId: long;
    photoSmall: TypeFileLocation;
    photoBig: TypeFileLocation;
    dcId: int;
  };
  export class UserStatusEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class UserStatusOnline extends VirtualClass<{
    expires: int;
  }> {
    expires: int;
  };
  export class UserStatusOffline extends VirtualClass<{
    wasOnline: int;
  }> {
    wasOnline: int;
  };
  export class UserStatusRecently extends VirtualClass<{
    
  }> {
    
  };
  export class UserStatusLastWeek extends VirtualClass<{
    
  }> {
    
  };
  export class UserStatusLastMonth extends VirtualClass<{
    
  }> {
    
  };
  export class ChatEmpty extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class Chat extends VirtualClass<{
    // flags: null;
    creator?: true;
    kicked?: true;
    left?: true;
    deactivated?: true;
    id: int;
    title: string;
    photo: TypeChatPhoto;
    participantsCount: int;
    date: int;
    version: int;
    migratedTo?: TypeInputChannel;
    adminRights?: TypeChatAdminRights;
    defaultBannedRights?: TypeChatBannedRights;
  }> {
    // flags: null;
    creator?: true;
    kicked?: true;
    left?: true;
    deactivated?: true;
    id: int;
    title: string;
    photo: TypeChatPhoto;
    participantsCount: int;
    date: int;
    version: int;
    migratedTo?: TypeInputChannel;
    adminRights?: TypeChatAdminRights;
    defaultBannedRights?: TypeChatBannedRights;
  };
  export class ChatForbidden extends VirtualClass<{
    id: int;
    title: string;
  }> {
    id: int;
    title: string;
  };
  export class Channel extends VirtualClass<{
    // flags: null;
    creator?: true;
    left?: true;
    broadcast?: true;
    verified?: true;
    megagroup?: true;
    restricted?: true;
    signatures?: true;
    min?: true;
    scam?: true;
    hasLink?: true;
    hasGeo?: true;
    slowmodeEnabled?: true;
    id: int;
    accessHash?: long;
    title: string;
    username?: string;
    photo: TypeChatPhoto;
    date: int;
    version: int;
    restrictionReason?: TypeRestrictionReason[];
    adminRights?: TypeChatAdminRights;
    bannedRights?: TypeChatBannedRights;
    defaultBannedRights?: TypeChatBannedRights;
    participantsCount?: int;
  }> {
    // flags: null;
    creator?: true;
    left?: true;
    broadcast?: true;
    verified?: true;
    megagroup?: true;
    restricted?: true;
    signatures?: true;
    min?: true;
    scam?: true;
    hasLink?: true;
    hasGeo?: true;
    slowmodeEnabled?: true;
    id: int;
    accessHash?: long;
    title: string;
    username?: string;
    photo: TypeChatPhoto;
    date: int;
    version: int;
    restrictionReason?: TypeRestrictionReason[];
    adminRights?: TypeChatAdminRights;
    bannedRights?: TypeChatBannedRights;
    defaultBannedRights?: TypeChatBannedRights;
    participantsCount?: int;
  };
  export class ChannelForbidden extends VirtualClass<{
    // flags: null;
    broadcast?: true;
    megagroup?: true;
    id: int;
    accessHash: long;
    title: string;
    untilDate?: int;
  }> {
    // flags: null;
    broadcast?: true;
    megagroup?: true;
    id: int;
    accessHash: long;
    title: string;
    untilDate?: int;
  };
  export class ChatFull extends VirtualClass<{
    // flags: null;
    canSetUsername?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participants: TypeChatParticipants;
    chatPhoto?: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    exportedInvite: TypeExportedChatInvite;
    botInfo?: TypeBotInfo[];
    pinnedMsgId?: int;
    folderId?: int;
  }> {
    // flags: null;
    canSetUsername?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participants: TypeChatParticipants;
    chatPhoto?: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    exportedInvite: TypeExportedChatInvite;
    botInfo?: TypeBotInfo[];
    pinnedMsgId?: int;
    folderId?: int;
  };
  export class ChannelFull extends VirtualClass<{
    // flags: null;
    canViewParticipants?: true;
    canSetUsername?: true;
    canSetStickers?: true;
    hiddenPrehistory?: true;
    canViewStats?: true;
    canSetLocation?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participantsCount?: int;
    adminsCount?: int;
    kickedCount?: int;
    bannedCount?: int;
    onlineCount?: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    chatPhoto: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    exportedInvite: TypeExportedChatInvite;
    botInfo: TypeBotInfo[];
    migratedFromChatId?: int;
    migratedFromMaxId?: int;
    pinnedMsgId?: int;
    stickerset?: TypeStickerSet;
    availableMinId?: int;
    folderId?: int;
    linkedChatId?: int;
    location?: TypeChannelLocation;
    slowmodeSeconds?: int;
    slowmodeNextSendDate?: int;
    pts: int;
  }> {
    // flags: null;
    canViewParticipants?: true;
    canSetUsername?: true;
    canSetStickers?: true;
    hiddenPrehistory?: true;
    canViewStats?: true;
    canSetLocation?: true;
    hasScheduled?: true;
    id: int;
    about: string;
    participantsCount?: int;
    adminsCount?: int;
    kickedCount?: int;
    bannedCount?: int;
    onlineCount?: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    chatPhoto: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    exportedInvite: TypeExportedChatInvite;
    botInfo: TypeBotInfo[];
    migratedFromChatId?: int;
    migratedFromMaxId?: int;
    pinnedMsgId?: int;
    stickerset?: TypeStickerSet;
    availableMinId?: int;
    folderId?: int;
    linkedChatId?: int;
    location?: TypeChannelLocation;
    slowmodeSeconds?: int;
    slowmodeNextSendDate?: int;
    pts: int;
  };
  export class ChatParticipant extends VirtualClass<{
    userId: int;
    inviterId: int;
    date: int;
  }> {
    userId: int;
    inviterId: int;
    date: int;
  };
  export class ChatParticipantCreator extends VirtualClass<{
    userId: int;
  }> {
    userId: int;
  };
  export class ChatParticipantAdmin extends VirtualClass<{
    userId: int;
    inviterId: int;
    date: int;
  }> {
    userId: int;
    inviterId: int;
    date: int;
  };
  export class ChatParticipantsForbidden extends VirtualClass<{
    // flags: null;
    chatId: int;
    selfParticipant?: TypeChatParticipant;
  }> {
    // flags: null;
    chatId: int;
    selfParticipant?: TypeChatParticipant;
  };
  export class ChatParticipants extends VirtualClass<{
    chatId: int;
    participants: TypeChatParticipant[];
    version: int;
  }> {
    chatId: int;
    participants: TypeChatParticipant[];
    version: int;
  };
  export class ChatPhotoEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class ChatPhoto extends VirtualClass<{
    photoSmall: TypeFileLocation;
    photoBig: TypeFileLocation;
    dcId: int;
  }> {
    photoSmall: TypeFileLocation;
    photoBig: TypeFileLocation;
    dcId: int;
  };
  export class MessageEmpty extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class Message extends VirtualClass<{
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    fromScheduled?: true;
    legacy?: true;
    editHide?: true;
    id: int;
    fromId?: int;
    toId: TypePeer;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    date: int;
    message: string;
    media?: TypeMessageMedia;
    replyMarkup?: TypeReplyMarkup;
    entities?: TypeMessageEntity[];
    views?: int;
    editDate?: int;
    postAuthor?: string;
    groupedId?: long;
    restrictionReason?: TypeRestrictionReason[];
  }> {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    fromScheduled?: true;
    legacy?: true;
    editHide?: true;
    id: int;
    fromId?: int;
    toId: TypePeer;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    date: int;
    message: string;
    media?: TypeMessageMedia;
    replyMarkup?: TypeReplyMarkup;
    entities?: TypeMessageEntity[];
    views?: int;
    editDate?: int;
    postAuthor?: string;
    groupedId?: long;
    restrictionReason?: TypeRestrictionReason[];
  };
  export class MessageService extends VirtualClass<{
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    legacy?: true;
    id: int;
    fromId?: int;
    toId: TypePeer;
    replyToMsgId?: int;
    date: int;
    action: TypeMessageAction;
  }> {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    post?: true;
    legacy?: true;
    id: int;
    fromId?: int;
    toId: TypePeer;
    replyToMsgId?: int;
    date: int;
    action: TypeMessageAction;
  };
  export class MessageMediaEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class MessageMediaPhoto extends VirtualClass<{
    // flags: null;
    photo?: TypePhoto;
    ttlSeconds?: int;
  }> {
    // flags: null;
    photo?: TypePhoto;
    ttlSeconds?: int;
  };
  export class MessageMediaGeo extends VirtualClass<{
    geo: TypeGeoPoint;
  }> {
    geo: TypeGeoPoint;
  };
  export class MessageMediaContact extends VirtualClass<{
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    userId: int;
  }> {
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    userId: int;
  };
  export class MessageMediaUnsupported extends VirtualClass<{
    
  }> {
    
  };
  export class MessageMediaDocument extends VirtualClass<{
    // flags: null;
    document?: TypeDocument;
    ttlSeconds?: int;
  }> {
    // flags: null;
    document?: TypeDocument;
    ttlSeconds?: int;
  };
  export class MessageMediaWebPage extends VirtualClass<{
    webpage: TypeWebPage;
  }> {
    webpage: TypeWebPage;
  };
  export class MessageMediaVenue extends VirtualClass<{
    geo: TypeGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  }> {
    geo: TypeGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
  };
  export class MessageMediaGame extends VirtualClass<{
    game: TypeGame;
  }> {
    game: TypeGame;
  };
  export class MessageMediaInvoice extends VirtualClass<{
    // flags: null;
    shippingAddressRequested?: true;
    test?: true;
    title: string;
    description: string;
    photo?: TypeWebDocument;
    receiptMsgId?: int;
    currency: string;
    totalAmount: long;
    startParam: string;
  }> {
    // flags: null;
    shippingAddressRequested?: true;
    test?: true;
    title: string;
    description: string;
    photo?: TypeWebDocument;
    receiptMsgId?: int;
    currency: string;
    totalAmount: long;
    startParam: string;
  };
  export class MessageMediaGeoLive extends VirtualClass<{
    geo: TypeGeoPoint;
    period: int;
  }> {
    geo: TypeGeoPoint;
    period: int;
  };
  export class MessageMediaPoll extends VirtualClass<{
    poll: TypePoll;
    results: TypePollResults;
  }> {
    poll: TypePoll;
    results: TypePollResults;
  };
  export class MessageActionEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class MessageActionChatCreate extends VirtualClass<{
    title: string;
    users: int[];
  }> {
    title: string;
    users: int[];
  };
  export class MessageActionChatEditTitle extends VirtualClass<{
    title: string;
  }> {
    title: string;
  };
  export class MessageActionChatEditPhoto extends VirtualClass<{
    photo: TypePhoto;
  }> {
    photo: TypePhoto;
  };
  export class MessageActionChatDeletePhoto extends VirtualClass<{
    
  }> {
    
  };
  export class MessageActionChatAddUser extends VirtualClass<{
    users: int[];
  }> {
    users: int[];
  };
  export class MessageActionChatDeleteUser extends VirtualClass<{
    userId: int;
  }> {
    userId: int;
  };
  export class MessageActionChatJoinedByLink extends VirtualClass<{
    inviterId: int;
  }> {
    inviterId: int;
  };
  export class MessageActionChannelCreate extends VirtualClass<{
    title: string;
  }> {
    title: string;
  };
  export class MessageActionChatMigrateTo extends VirtualClass<{
    channelId: int;
  }> {
    channelId: int;
  };
  export class MessageActionChannelMigrateFrom extends VirtualClass<{
    title: string;
    chatId: int;
  }> {
    title: string;
    chatId: int;
  };
  export class MessageActionPinMessage extends VirtualClass<{
    
  }> {
    
  };
  export class MessageActionHistoryClear extends VirtualClass<{
    
  }> {
    
  };
  export class MessageActionGameScore extends VirtualClass<{
    gameId: long;
    score: int;
  }> {
    gameId: long;
    score: int;
  };
  export class MessageActionPaymentSentMe extends VirtualClass<{
    // flags: null;
    currency: string;
    totalAmount: long;
    payload: bytes;
    info?: TypePaymentRequestedInfo;
    shippingOptionId?: string;
    charge: TypePaymentCharge;
  }> {
    // flags: null;
    currency: string;
    totalAmount: long;
    payload: bytes;
    info?: TypePaymentRequestedInfo;
    shippingOptionId?: string;
    charge: TypePaymentCharge;
  };
  export class MessageActionPaymentSent extends VirtualClass<{
    currency: string;
    totalAmount: long;
  }> {
    currency: string;
    totalAmount: long;
  };
  export class MessageActionPhoneCall extends VirtualClass<{
    // flags: null;
    video?: true;
    callId: long;
    reason?: TypePhoneCallDiscardReason;
    duration?: int;
  }> {
    // flags: null;
    video?: true;
    callId: long;
    reason?: TypePhoneCallDiscardReason;
    duration?: int;
  };
  export class MessageActionScreenshotTaken extends VirtualClass<{
    
  }> {
    
  };
  export class MessageActionCustomAction extends VirtualClass<{
    message: string;
  }> {
    message: string;
  };
  export class MessageActionBotAllowed extends VirtualClass<{
    domain: string;
  }> {
    domain: string;
  };
  export class MessageActionSecureValuesSentMe extends VirtualClass<{
    values: TypeSecureValue[];
    credentials: TypeSecureCredentialsEncrypted;
  }> {
    values: TypeSecureValue[];
    credentials: TypeSecureCredentialsEncrypted;
  };
  export class MessageActionSecureValuesSent extends VirtualClass<{
    types: TypeSecureValueType[];
  }> {
    types: TypeSecureValueType[];
  };
  export class MessageActionContactSignUp extends VirtualClass<{
    
  }> {
    
  };
  export class Dialog extends VirtualClass<{
    // flags: null;
    pinned?: true;
    unreadMark?: true;
    peer: TypePeer;
    topMessage: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    unreadMentionsCount: int;
    notifySettings: TypePeerNotifySettings;
    pts?: int;
    draft?: TypeDraftMessage;
    folderId?: int;
  }> {
    // flags: null;
    pinned?: true;
    unreadMark?: true;
    peer: TypePeer;
    topMessage: int;
    readInboxMaxId: int;
    readOutboxMaxId: int;
    unreadCount: int;
    unreadMentionsCount: int;
    notifySettings: TypePeerNotifySettings;
    pts?: int;
    draft?: TypeDraftMessage;
    folderId?: int;
  };
  export class DialogFolder extends VirtualClass<{
    // flags: null;
    pinned?: true;
    folder: TypeFolder;
    peer: TypePeer;
    topMessage: int;
    unreadMutedPeersCount: int;
    unreadUnmutedPeersCount: int;
    unreadMutedMessagesCount: int;
    unreadUnmutedMessagesCount: int;
  }> {
    // flags: null;
    pinned?: true;
    folder: TypeFolder;
    peer: TypePeer;
    topMessage: int;
    unreadMutedPeersCount: int;
    unreadUnmutedPeersCount: int;
    unreadMutedMessagesCount: int;
    unreadUnmutedMessagesCount: int;
  };
  export class PhotoEmpty extends VirtualClass<{
    id: long;
  }> {
    id: long;
  };
  export class Photo extends VirtualClass<{
    // flags: null;
    hasStickers?: true;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    sizes: TypePhotoSize[];
    dcId: int;
  }> {
    // flags: null;
    hasStickers?: true;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    sizes: TypePhotoSize[];
    dcId: int;
  };
  export class PhotoSizeEmpty extends VirtualClass<{
    type: string;
  }> {
    type: string;
  };
  export class PhotoSize extends VirtualClass<{
    type: string;
    location: TypeFileLocation;
    w: int;
    h: int;
    size: int;
  }> {
    type: string;
    location: TypeFileLocation;
    w: int;
    h: int;
    size: int;
  };
  export class PhotoCachedSize extends VirtualClass<{
    type: string;
    location: TypeFileLocation;
    w: int;
    h: int;
    bytes: bytes;
  }> {
    type: string;
    location: TypeFileLocation;
    w: int;
    h: int;
    bytes: bytes;
  };
  export class PhotoStrippedSize extends VirtualClass<{
    type: string;
    bytes: bytes;
  }> {
    type: string;
    bytes: bytes;
  };
  export class GeoPointEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class GeoPoint extends VirtualClass<{
    long: double;
    lat: double;
    accessHash: long;
  }> {
    long: double;
    lat: double;
    accessHash: long;
  };
  export class InputNotifyPeer extends VirtualClass<{
    peer: TypeInputPeer;
  }> {
    peer: TypeInputPeer;
  };
  export class InputNotifyUsers extends VirtualClass<{
    
  }> {
    
  };
  export class InputNotifyChats extends VirtualClass<{
    
  }> {
    
  };
  export class InputNotifyBroadcasts extends VirtualClass<{
    
  }> {
    
  };
  export class InputPeerNotifySettings extends VirtualClass<{
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  }> {
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  };
  export class PeerNotifySettings extends VirtualClass<{
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  }> {
    // flags: null;
    showPreviews?: Bool;
    silent?: Bool;
    muteUntil?: int;
    sound?: string;
  };
  export class PeerSettings extends VirtualClass<{
    // flags: null;
    reportSpam?: true;
    addContact?: true;
    blockContact?: true;
    shareContact?: true;
    needContactsException?: true;
    reportGeo?: true;
  }> {
    // flags: null;
    reportSpam?: true;
    addContact?: true;
    blockContact?: true;
    shareContact?: true;
    needContactsException?: true;
    reportGeo?: true;
  };
  export class WallPaper extends VirtualClass<{
    id: long;
    // flags: null;
    creator?: true;
    default?: true;
    pattern?: true;
    dark?: true;
    accessHash: long;
    slug: string;
    document: TypeDocument;
    settings?: TypeWallPaperSettings;
  }> {
    id: long;
    // flags: null;
    creator?: true;
    default?: true;
    pattern?: true;
    dark?: true;
    accessHash: long;
    slug: string;
    document: TypeDocument;
    settings?: TypeWallPaperSettings;
  };
  export class InputReportReasonSpam extends VirtualClass<{
    
  }> {
    
  };
  export class InputReportReasonViolence extends VirtualClass<{
    
  }> {
    
  };
  export class InputReportReasonPornography extends VirtualClass<{
    
  }> {
    
  };
  export class InputReportReasonChildAbuse extends VirtualClass<{
    
  }> {
    
  };
  export class InputReportReasonOther extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class InputReportReasonCopyright extends VirtualClass<{
    
  }> {
    
  };
  export class InputReportReasonGeoIrrelevant extends VirtualClass<{
    
  }> {
    
  };
  export class UserFull extends VirtualClass<{
    // flags: null;
    blocked?: true;
    phoneCallsAvailable?: true;
    phoneCallsPrivate?: true;
    canPinMessage?: true;
    hasScheduled?: true;
    user: TypeUser;
    about?: string;
    settings: TypePeerSettings;
    profilePhoto?: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    botInfo?: TypeBotInfo;
    pinnedMsgId?: int;
    commonChatsCount: int;
    folderId?: int;
  }> {
    // flags: null;
    blocked?: true;
    phoneCallsAvailable?: true;
    phoneCallsPrivate?: true;
    canPinMessage?: true;
    hasScheduled?: true;
    user: TypeUser;
    about?: string;
    settings: TypePeerSettings;
    profilePhoto?: TypePhoto;
    notifySettings: TypePeerNotifySettings;
    botInfo?: TypeBotInfo;
    pinnedMsgId?: int;
    commonChatsCount: int;
    folderId?: int;
  };
  export class Contact extends VirtualClass<{
    userId: int;
    mutual: Bool;
  }> {
    userId: int;
    mutual: Bool;
  };
  export class ImportedContact extends VirtualClass<{
    userId: int;
    clientId: long;
  }> {
    userId: int;
    clientId: long;
  };
  export class ContactBlocked extends VirtualClass<{
    userId: int;
    date: int;
  }> {
    userId: int;
    date: int;
  };
  export class ContactStatus extends VirtualClass<{
    userId: int;
    status: TypeUserStatus;
  }> {
    userId: int;
    status: TypeUserStatus;
  };
  export class InputMessagesFilterEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterPhotos extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterVideo extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterPhotoVideo extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterDocument extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterUrl extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterGif extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterVoice extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterMusic extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterChatPhotos extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterPhoneCalls extends VirtualClass<{
    // flags: null;
    missed?: true;
  }> {
    // flags: null;
    missed?: true;
  };
  export class InputMessagesFilterRoundVoice extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterRoundVideo extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterMyMentions extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterGeo extends VirtualClass<{
    
  }> {
    
  };
  export class InputMessagesFilterContacts extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateNewMessage extends VirtualClass<{
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  }> {
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateMessageID extends VirtualClass<{
    id: int;
    randomId: long;
  }> {
    id: int;
    randomId: long;
  };
  export class UpdateDeleteMessages extends VirtualClass<{
    messages: int[];
    pts: int;
    ptsCount: int;
  }> {
    messages: int[];
    pts: int;
    ptsCount: int;
  };
  export class UpdateUserTyping extends VirtualClass<{
    userId: int;
    action: TypeSendMessageAction;
  }> {
    userId: int;
    action: TypeSendMessageAction;
  };
  export class UpdateChatUserTyping extends VirtualClass<{
    chatId: int;
    userId: int;
    action: TypeSendMessageAction;
  }> {
    chatId: int;
    userId: int;
    action: TypeSendMessageAction;
  };
  export class UpdateChatParticipants extends VirtualClass<{
    participants: TypeChatParticipants;
  }> {
    participants: TypeChatParticipants;
  };
  export class UpdateUserStatus extends VirtualClass<{
    userId: int;
    status: TypeUserStatus;
  }> {
    userId: int;
    status: TypeUserStatus;
  };
  export class UpdateUserName extends VirtualClass<{
    userId: int;
    firstName: string;
    lastName: string;
    username: string;
  }> {
    userId: int;
    firstName: string;
    lastName: string;
    username: string;
  };
  export class UpdateUserPhoto extends VirtualClass<{
    userId: int;
    date: int;
    photo: TypeUserProfilePhoto;
    previous: Bool;
  }> {
    userId: int;
    date: int;
    photo: TypeUserProfilePhoto;
    previous: Bool;
  };
  export class UpdateNewEncryptedMessage extends VirtualClass<{
    message: TypeEncryptedMessage;
    qts: int;
  }> {
    message: TypeEncryptedMessage;
    qts: int;
  };
  export class UpdateEncryptedChatTyping extends VirtualClass<{
    chatId: int;
  }> {
    chatId: int;
  };
  export class UpdateEncryption extends VirtualClass<{
    chat: TypeEncryptedChat;
    date: int;
  }> {
    chat: TypeEncryptedChat;
    date: int;
  };
  export class UpdateEncryptedMessagesRead extends VirtualClass<{
    chatId: int;
    maxDate: int;
    date: int;
  }> {
    chatId: int;
    maxDate: int;
    date: int;
  };
  export class UpdateChatParticipantAdd extends VirtualClass<{
    chatId: int;
    userId: int;
    inviterId: int;
    date: int;
    version: int;
  }> {
    chatId: int;
    userId: int;
    inviterId: int;
    date: int;
    version: int;
  };
  export class UpdateChatParticipantDelete extends VirtualClass<{
    chatId: int;
    userId: int;
    version: int;
  }> {
    chatId: int;
    userId: int;
    version: int;
  };
  export class UpdateDcOptions extends VirtualClass<{
    dcOptions: TypeDcOption[];
  }> {
    dcOptions: TypeDcOption[];
  };
  export class UpdateUserBlocked extends VirtualClass<{
    userId: int;
    blocked: Bool;
  }> {
    userId: int;
    blocked: Bool;
  };
  export class UpdateNotifySettings extends VirtualClass<{
    peer: TypeNotifyPeer;
    notifySettings: TypePeerNotifySettings;
  }> {
    peer: TypeNotifyPeer;
    notifySettings: TypePeerNotifySettings;
  };
  export class UpdateServiceNotification extends VirtualClass<{
    // flags: null;
    popup?: true;
    inboxDate?: int;
    type: string;
    message: string;
    media: TypeMessageMedia;
    entities: TypeMessageEntity[];
  }> {
    // flags: null;
    popup?: true;
    inboxDate?: int;
    type: string;
    message: string;
    media: TypeMessageMedia;
    entities: TypeMessageEntity[];
  };
  export class UpdatePrivacy extends VirtualClass<{
    key: TypePrivacyKey;
    rules: TypePrivacyRule[];
  }> {
    key: TypePrivacyKey;
    rules: TypePrivacyRule[];
  };
  export class UpdateUserPhone extends VirtualClass<{
    userId: int;
    phone: string;
  }> {
    userId: int;
    phone: string;
  };
  export class UpdateReadHistoryInbox extends VirtualClass<{
    // flags: null;
    folderId?: int;
    peer: TypePeer;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
    ptsCount: int;
  }> {
    // flags: null;
    folderId?: int;
    peer: TypePeer;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
    ptsCount: int;
  };
  export class UpdateReadHistoryOutbox extends VirtualClass<{
    peer: TypePeer;
    maxId: int;
    pts: int;
    ptsCount: int;
  }> {
    peer: TypePeer;
    maxId: int;
    pts: int;
    ptsCount: int;
  };
  export class UpdateWebPage extends VirtualClass<{
    webpage: TypeWebPage;
    pts: int;
    ptsCount: int;
  }> {
    webpage: TypeWebPage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateReadMessagesContents extends VirtualClass<{
    messages: int[];
    pts: int;
    ptsCount: int;
  }> {
    messages: int[];
    pts: int;
    ptsCount: int;
  };
  export class UpdateChannelTooLong extends VirtualClass<{
    // flags: null;
    channelId: int;
    pts?: int;
  }> {
    // flags: null;
    channelId: int;
    pts?: int;
  };
  export class UpdateChannel extends VirtualClass<{
    channelId: int;
  }> {
    channelId: int;
  };
  export class UpdateNewChannelMessage extends VirtualClass<{
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  }> {
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateReadChannelInbox extends VirtualClass<{
    // flags: null;
    folderId?: int;
    channelId: int;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
  }> {
    // flags: null;
    folderId?: int;
    channelId: int;
    maxId: int;
    stillUnreadCount: int;
    pts: int;
  };
  export class UpdateDeleteChannelMessages extends VirtualClass<{
    channelId: int;
    messages: int[];
    pts: int;
    ptsCount: int;
  }> {
    channelId: int;
    messages: int[];
    pts: int;
    ptsCount: int;
  };
  export class UpdateChannelMessageViews extends VirtualClass<{
    channelId: int;
    id: int;
    views: int;
  }> {
    channelId: int;
    id: int;
    views: int;
  };
  export class UpdateChatParticipantAdmin extends VirtualClass<{
    chatId: int;
    userId: int;
    isAdmin: Bool;
    version: int;
  }> {
    chatId: int;
    userId: int;
    isAdmin: Bool;
    version: int;
  };
  export class UpdateNewStickerSet extends VirtualClass<{
    stickerset: messages.TypeStickerSet;
  }> {
    stickerset: messages.TypeStickerSet;
  };
  export class UpdateStickerSetsOrder extends VirtualClass<{
    // flags: null;
    masks?: true;
    order: long[];
  }> {
    // flags: null;
    masks?: true;
    order: long[];
  };
  export class UpdateStickerSets extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateSavedGifs extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateBotInlineQuery extends VirtualClass<{
    // flags: null;
    queryId: long;
    userId: int;
    query: string;
    geo?: TypeGeoPoint;
    offset: string;
  }> {
    // flags: null;
    queryId: long;
    userId: int;
    query: string;
    geo?: TypeGeoPoint;
    offset: string;
  };
  export class UpdateBotInlineSend extends VirtualClass<{
    // flags: null;
    userId: int;
    query: string;
    geo?: TypeGeoPoint;
    id: string;
    msgId?: TypeInputBotInlineMessageID;
  }> {
    // flags: null;
    userId: int;
    query: string;
    geo?: TypeGeoPoint;
    id: string;
    msgId?: TypeInputBotInlineMessageID;
  };
  export class UpdateEditChannelMessage extends VirtualClass<{
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  }> {
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateChannelPinnedMessage extends VirtualClass<{
    channelId: int;
    id: int;
  }> {
    channelId: int;
    id: int;
  };
  export class UpdateBotCallbackQuery extends VirtualClass<{
    // flags: null;
    queryId: long;
    userId: int;
    peer: TypePeer;
    msgId: int;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  }> {
    // flags: null;
    queryId: long;
    userId: int;
    peer: TypePeer;
    msgId: int;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  };
  export class UpdateEditMessage extends VirtualClass<{
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  }> {
    message: TypeMessage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateInlineBotCallbackQuery extends VirtualClass<{
    // flags: null;
    queryId: long;
    userId: int;
    msgId: TypeInputBotInlineMessageID;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  }> {
    // flags: null;
    queryId: long;
    userId: int;
    msgId: TypeInputBotInlineMessageID;
    chatInstance: long;
    data?: bytes;
    gameShortName?: string;
  };
  export class UpdateReadChannelOutbox extends VirtualClass<{
    channelId: int;
    maxId: int;
  }> {
    channelId: int;
    maxId: int;
  };
  export class UpdateDraftMessage extends VirtualClass<{
    peer: TypePeer;
    draft: TypeDraftMessage;
  }> {
    peer: TypePeer;
    draft: TypeDraftMessage;
  };
  export class UpdateReadFeaturedStickers extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateRecentStickers extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateConfig extends VirtualClass<{
    
  }> {
    
  };
  export class UpdatePtsChanged extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateChannelWebPage extends VirtualClass<{
    channelId: int;
    webpage: TypeWebPage;
    pts: int;
    ptsCount: int;
  }> {
    channelId: int;
    webpage: TypeWebPage;
    pts: int;
    ptsCount: int;
  };
  export class UpdateDialogPinned extends VirtualClass<{
    // flags: null;
    pinned?: true;
    folderId?: int;
    peer: TypeDialogPeer;
  }> {
    // flags: null;
    pinned?: true;
    folderId?: int;
    peer: TypeDialogPeer;
  };
  export class UpdatePinnedDialogs extends VirtualClass<{
    // flags: null;
    folderId?: int;
    order?: TypeDialogPeer[];
  }> {
    // flags: null;
    folderId?: int;
    order?: TypeDialogPeer[];
  };
  export class UpdateBotWebhookJSON extends VirtualClass<{
    data: TypeDataJSON;
  }> {
    data: TypeDataJSON;
  };
  export class UpdateBotWebhookJSONQuery extends VirtualClass<{
    queryId: long;
    data: TypeDataJSON;
    timeout: int;
  }> {
    queryId: long;
    data: TypeDataJSON;
    timeout: int;
  };
  export class UpdateBotShippingQuery extends VirtualClass<{
    queryId: long;
    userId: int;
    payload: bytes;
    shippingAddress: TypePostAddress;
  }> {
    queryId: long;
    userId: int;
    payload: bytes;
    shippingAddress: TypePostAddress;
  };
  export class UpdateBotPrecheckoutQuery extends VirtualClass<{
    // flags: null;
    queryId: long;
    userId: int;
    payload: bytes;
    info?: TypePaymentRequestedInfo;
    shippingOptionId?: string;
    currency: string;
    totalAmount: long;
  }> {
    // flags: null;
    queryId: long;
    userId: int;
    payload: bytes;
    info?: TypePaymentRequestedInfo;
    shippingOptionId?: string;
    currency: string;
    totalAmount: long;
  };
  export class UpdatePhoneCall extends VirtualClass<{
    phoneCall: TypePhoneCall;
  }> {
    phoneCall: TypePhoneCall;
  };
  export class UpdateLangPackTooLong extends VirtualClass<{
    langCode: string;
  }> {
    langCode: string;
  };
  export class UpdateLangPack extends VirtualClass<{
    difference: TypeLangPackDifference;
  }> {
    difference: TypeLangPackDifference;
  };
  export class UpdateFavedStickers extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateChannelReadMessagesContents extends VirtualClass<{
    channelId: int;
    messages: int[];
  }> {
    channelId: int;
    messages: int[];
  };
  export class UpdateContactsReset extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateChannelAvailableMessages extends VirtualClass<{
    channelId: int;
    availableMinId: int;
  }> {
    channelId: int;
    availableMinId: int;
  };
  export class UpdateDialogUnreadMark extends VirtualClass<{
    // flags: null;
    unread?: true;
    peer: TypeDialogPeer;
  }> {
    // flags: null;
    unread?: true;
    peer: TypeDialogPeer;
  };
  export class UpdateUserPinnedMessage extends VirtualClass<{
    userId: int;
    id: int;
  }> {
    userId: int;
    id: int;
  };
  export class UpdateChatPinnedMessage extends VirtualClass<{
    chatId: int;
    id: int;
    version: int;
  }> {
    chatId: int;
    id: int;
    version: int;
  };
  export class UpdateMessagePoll extends VirtualClass<{
    // flags: null;
    pollId: long;
    poll?: TypePoll;
    results: TypePollResults;
  }> {
    // flags: null;
    pollId: long;
    poll?: TypePoll;
    results: TypePollResults;
  };
  export class UpdateChatDefaultBannedRights extends VirtualClass<{
    peer: TypePeer;
    defaultBannedRights: TypeChatBannedRights;
    version: int;
  }> {
    peer: TypePeer;
    defaultBannedRights: TypeChatBannedRights;
    version: int;
  };
  export class UpdateFolderPeers extends VirtualClass<{
    folderPeers: TypeFolderPeer[];
    pts: int;
    ptsCount: int;
  }> {
    folderPeers: TypeFolderPeer[];
    pts: int;
    ptsCount: int;
  };
  export class UpdatePeerSettings extends VirtualClass<{
    peer: TypePeer;
    settings: TypePeerSettings;
  }> {
    peer: TypePeer;
    settings: TypePeerSettings;
  };
  export class UpdatePeerLocated extends VirtualClass<{
    peers: TypePeerLocated[];
  }> {
    peers: TypePeerLocated[];
  };
  export class UpdateNewScheduledMessage extends VirtualClass<{
    message: TypeMessage;
  }> {
    message: TypeMessage;
  };
  export class UpdateDeleteScheduledMessages extends VirtualClass<{
    peer: TypePeer;
    messages: int[];
  }> {
    peer: TypePeer;
    messages: int[];
  };
  export class UpdateTheme extends VirtualClass<{
    theme: TypeTheme;
  }> {
    theme: TypeTheme;
  };
  export class UpdatesTooLong extends VirtualClass<{
    
  }> {
    
  };
  export class UpdateShortMessage extends VirtualClass<{
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    userId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: TypeMessageEntity[];
  }> {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    userId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: TypeMessageEntity[];
  };
  export class UpdateShortChatMessage extends VirtualClass<{
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    fromId: int;
    chatId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: TypeMessageEntity[];
  }> {
    // flags: null;
    out?: true;
    mentioned?: true;
    mediaUnread?: true;
    silent?: true;
    id: int;
    fromId: int;
    chatId: int;
    message: string;
    pts: int;
    ptsCount: int;
    date: int;
    fwdFrom?: TypeMessageFwdHeader;
    viaBotId?: int;
    replyToMsgId?: int;
    entities?: TypeMessageEntity[];
  };
  export class UpdateShort extends VirtualClass<{
    update: TypeUpdate;
    date: int;
  }> {
    update: TypeUpdate;
    date: int;
  };
  export class UpdatesCombined extends VirtualClass<{
    updates: TypeUpdate[];
    users: TypeUser[];
    chats: TypeChat[];
    date: int;
    seqStart: int;
    seq: int;
  }> {
    updates: TypeUpdate[];
    users: TypeUser[];
    chats: TypeChat[];
    date: int;
    seqStart: int;
    seq: int;
  };
  export class Updates extends VirtualClass<{
    updates: TypeUpdate[];
    users: TypeUser[];
    chats: TypeChat[];
    date: int;
    seq: int;
  }> {
    updates: TypeUpdate[];
    users: TypeUser[];
    chats: TypeChat[];
    date: int;
    seq: int;
  };
  export class UpdateShortSentMessage extends VirtualClass<{
    // flags: null;
    out?: true;
    id: int;
    pts: int;
    ptsCount: int;
    date: int;
    media?: TypeMessageMedia;
    entities?: TypeMessageEntity[];
  }> {
    // flags: null;
    out?: true;
    id: int;
    pts: int;
    ptsCount: int;
    date: int;
    media?: TypeMessageMedia;
    entities?: TypeMessageEntity[];
  };
  export class DcOption extends VirtualClass<{
    // flags: null;
    ipv6?: true;
    mediaOnly?: true;
    tcpoOnly?: true;
    cdn?: true;
    static?: true;
    id: int;
    ipAddress: string;
    port: int;
    secret?: bytes;
  }> {
    // flags: null;
    ipv6?: true;
    mediaOnly?: true;
    tcpoOnly?: true;
    cdn?: true;
    static?: true;
    id: int;
    ipAddress: string;
    port: int;
    secret?: bytes;
  };
  export class Config extends VirtualClass<{
    // flags: null;
    phonecallsEnabled?: true;
    defaultP2pContacts?: true;
    preloadFeaturedStickers?: true;
    ignorePhoneEntities?: true;
    revokePmInbox?: true;
    blockedMode?: true;
    pfsEnabled?: true;
    date: int;
    expires: int;
    testMode: Bool;
    thisDc: int;
    dcOptions: TypeDcOption[];
    dcTxtDomainName: string;
    chatSizeMax: int;
    megagroupSizeMax: int;
    forwardedCountMax: int;
    onlineUpdatePeriodMs: int;
    offlineBlurTimeoutMs: int;
    offlineIdleTimeoutMs: int;
    onlineCloudTimeoutMs: int;
    notifyCloudDelayMs: int;
    notifyDefaultDelayMs: int;
    pushChatPeriodMs: int;
    pushChatLimit: int;
    savedGifsLimit: int;
    editTimeLimit: int;
    revokeTimeLimit: int;
    revokePmTimeLimit: int;
    ratingEDecay: int;
    stickersRecentLimit: int;
    stickersFavedLimit: int;
    channelsReadMediaPeriod: int;
    tmpSessions?: int;
    pinnedDialogsCountMax: int;
    pinnedInfolderCountMax: int;
    callReceiveTimeoutMs: int;
    callRingTimeoutMs: int;
    callConnectTimeoutMs: int;
    callPacketTimeoutMs: int;
    meUrlPrefix: string;
    autoupdateUrlPrefix?: string;
    gifSearchUsername?: string;
    venueSearchUsername?: string;
    imgSearchUsername?: string;
    staticMapsProvider?: string;
    captionLengthMax: int;
    messageLengthMax: int;
    webfileDcId: int;
    suggestedLangCode?: string;
    langPackVersion?: int;
    baseLangPackVersion?: int;
  }> {
    // flags: null;
    phonecallsEnabled?: true;
    defaultP2pContacts?: true;
    preloadFeaturedStickers?: true;
    ignorePhoneEntities?: true;
    revokePmInbox?: true;
    blockedMode?: true;
    pfsEnabled?: true;
    date: int;
    expires: int;
    testMode: Bool;
    thisDc: int;
    dcOptions: TypeDcOption[];
    dcTxtDomainName: string;
    chatSizeMax: int;
    megagroupSizeMax: int;
    forwardedCountMax: int;
    onlineUpdatePeriodMs: int;
    offlineBlurTimeoutMs: int;
    offlineIdleTimeoutMs: int;
    onlineCloudTimeoutMs: int;
    notifyCloudDelayMs: int;
    notifyDefaultDelayMs: int;
    pushChatPeriodMs: int;
    pushChatLimit: int;
    savedGifsLimit: int;
    editTimeLimit: int;
    revokeTimeLimit: int;
    revokePmTimeLimit: int;
    ratingEDecay: int;
    stickersRecentLimit: int;
    stickersFavedLimit: int;
    channelsReadMediaPeriod: int;
    tmpSessions?: int;
    pinnedDialogsCountMax: int;
    pinnedInfolderCountMax: int;
    callReceiveTimeoutMs: int;
    callRingTimeoutMs: int;
    callConnectTimeoutMs: int;
    callPacketTimeoutMs: int;
    meUrlPrefix: string;
    autoupdateUrlPrefix?: string;
    gifSearchUsername?: string;
    venueSearchUsername?: string;
    imgSearchUsername?: string;
    staticMapsProvider?: string;
    captionLengthMax: int;
    messageLengthMax: int;
    webfileDcId: int;
    suggestedLangCode?: string;
    langPackVersion?: int;
    baseLangPackVersion?: int;
  };
  export class NearestDc extends VirtualClass<{
    country: string;
    thisDc: int;
    nearestDc: int;
  }> {
    country: string;
    thisDc: int;
    nearestDc: int;
  };
  export class EncryptedChatEmpty extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class EncryptedChatWaiting extends VirtualClass<{
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
  }> {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
  };
  export class EncryptedChatRequested extends VirtualClass<{
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gA: bytes;
  }> {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gA: bytes;
  };
  export class EncryptedChat extends VirtualClass<{
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
  }> {
    id: int;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
  };
  export class EncryptedChatDiscarded extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class InputEncryptedChat extends VirtualClass<{
    chatId: int;
    accessHash: long;
  }> {
    chatId: int;
    accessHash: long;
  };
  export class EncryptedFileEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class EncryptedFile extends VirtualClass<{
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    keyFingerprint: int;
  }> {
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    keyFingerprint: int;
  };
  export class InputEncryptedFileEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputEncryptedFileUploaded extends VirtualClass<{
    id: long;
    parts: int;
    md5Checksum: string;
    keyFingerprint: int;
  }> {
    id: long;
    parts: int;
    md5Checksum: string;
    keyFingerprint: int;
  };
  export class InputEncryptedFile extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputEncryptedFileBigUploaded extends VirtualClass<{
    id: long;
    parts: int;
    keyFingerprint: int;
  }> {
    id: long;
    parts: int;
    keyFingerprint: int;
  };
  export class EncryptedMessage extends VirtualClass<{
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
    file: TypeEncryptedFile;
  }> {
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
    file: TypeEncryptedFile;
  };
  export class EncryptedMessageService extends VirtualClass<{
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
  }> {
    randomId: long;
    chatId: int;
    date: int;
    bytes: bytes;
  };
  export class InputDocumentEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputDocument extends VirtualClass<{
    id: long;
    accessHash: long;
    fileReference: bytes;
  }> {
    id: long;
    accessHash: long;
    fileReference: bytes;
  };
  export class DocumentEmpty extends VirtualClass<{
    id: long;
  }> {
    id: long;
  };
  export class Document extends VirtualClass<{
    // flags: null;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    mimeType: string;
    size: int;
    thumbs?: TypePhotoSize[];
    dcId: int;
    attributes: TypeDocumentAttribute[];
  }> {
    // flags: null;
    id: long;
    accessHash: long;
    fileReference: bytes;
    date: int;
    mimeType: string;
    size: int;
    thumbs?: TypePhotoSize[];
    dcId: int;
    attributes: TypeDocumentAttribute[];
  };
  export class NotifyPeer extends VirtualClass<{
    peer: TypePeer;
  }> {
    peer: TypePeer;
  };
  export class NotifyUsers extends VirtualClass<{
    
  }> {
    
  };
  export class NotifyChats extends VirtualClass<{
    
  }> {
    
  };
  export class NotifyBroadcasts extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageTypingAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageCancelAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageRecordVideoAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageUploadVideoAction extends VirtualClass<{
    progress: int;
  }> {
    progress: int;
  };
  export class SendMessageRecordAudioAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageUploadAudioAction extends VirtualClass<{
    progress: int;
  }> {
    progress: int;
  };
  export class SendMessageUploadPhotoAction extends VirtualClass<{
    progress: int;
  }> {
    progress: int;
  };
  export class SendMessageUploadDocumentAction extends VirtualClass<{
    progress: int;
  }> {
    progress: int;
  };
  export class SendMessageGeoLocationAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageChooseContactAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageGamePlayAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageRecordRoundAction extends VirtualClass<{
    
  }> {
    
  };
  export class SendMessageUploadRoundAction extends VirtualClass<{
    progress: int;
  }> {
    progress: int;
  };
  export class InputPrivacyKeyStatusTimestamp extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyChatInvite extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyPhoneCall extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyPhoneP2P extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyForwards extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyProfilePhoto extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyPhoneNumber extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyKeyAddedByPhone extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyStatusTimestamp extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyChatInvite extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyPhoneCall extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyPhoneP2P extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyForwards extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyProfilePhoto extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyPhoneNumber extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyKeyAddedByPhone extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyValueAllowContacts extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyValueAllowAll extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyValueAllowUsers extends VirtualClass<{
    users: TypeInputUser[];
  }> {
    users: TypeInputUser[];
  };
  export class InputPrivacyValueDisallowContacts extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyValueDisallowAll extends VirtualClass<{
    
  }> {
    
  };
  export class InputPrivacyValueDisallowUsers extends VirtualClass<{
    users: TypeInputUser[];
  }> {
    users: TypeInputUser[];
  };
  export class InputPrivacyValueAllowChatParticipants extends VirtualClass<{
    chats: int[];
  }> {
    chats: int[];
  };
  export class InputPrivacyValueDisallowChatParticipants extends VirtualClass<{
    chats: int[];
  }> {
    chats: int[];
  };
  export class PrivacyValueAllowContacts extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyValueAllowAll extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyValueAllowUsers extends VirtualClass<{
    users: int[];
  }> {
    users: int[];
  };
  export class PrivacyValueDisallowContacts extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyValueDisallowAll extends VirtualClass<{
    
  }> {
    
  };
  export class PrivacyValueDisallowUsers extends VirtualClass<{
    users: int[];
  }> {
    users: int[];
  };
  export class PrivacyValueAllowChatParticipants extends VirtualClass<{
    chats: int[];
  }> {
    chats: int[];
  };
  export class PrivacyValueDisallowChatParticipants extends VirtualClass<{
    chats: int[];
  }> {
    chats: int[];
  };
  export class AccountDaysTTL extends VirtualClass<{
    days: int;
  }> {
    days: int;
  };
  export class DocumentAttributeImageSize extends VirtualClass<{
    w: int;
    h: int;
  }> {
    w: int;
    h: int;
  };
  export class DocumentAttributeAnimated extends VirtualClass<{
    
  }> {
    
  };
  export class DocumentAttributeSticker extends VirtualClass<{
    // flags: null;
    mask?: true;
    alt: string;
    stickerset: TypeInputStickerSet;
    maskCoords?: TypeMaskCoords;
  }> {
    // flags: null;
    mask?: true;
    alt: string;
    stickerset: TypeInputStickerSet;
    maskCoords?: TypeMaskCoords;
  };
  export class DocumentAttributeVideo extends VirtualClass<{
    // flags: null;
    roundMessage?: true;
    supportsStreaming?: true;
    duration: int;
    w: int;
    h: int;
  }> {
    // flags: null;
    roundMessage?: true;
    supportsStreaming?: true;
    duration: int;
    w: int;
    h: int;
  };
  export class DocumentAttributeAudio extends VirtualClass<{
    // flags: null;
    voice?: true;
    duration: int;
    title?: string;
    performer?: string;
    waveform?: bytes;
  }> {
    // flags: null;
    voice?: true;
    duration: int;
    title?: string;
    performer?: string;
    waveform?: bytes;
  };
  export class DocumentAttributeFilename extends VirtualClass<{
    fileName: string;
  }> {
    fileName: string;
  };
  export class DocumentAttributeHasStickers extends VirtualClass<{
    
  }> {
    
  };
  export class StickerPack extends VirtualClass<{
    emoticon: string;
    documents: long[];
  }> {
    emoticon: string;
    documents: long[];
  };
  export class WebPageEmpty extends VirtualClass<{
    id: long;
  }> {
    id: long;
  };
  export class WebPagePending extends VirtualClass<{
    id: long;
    date: int;
  }> {
    id: long;
    date: int;
  };
  export class WebPage extends VirtualClass<{
    // flags: null;
    id: long;
    url: string;
    displayUrl: string;
    hash: int;
    type?: string;
    siteName?: string;
    title?: string;
    description?: string;
    photo?: TypePhoto;
    embedUrl?: string;
    embedType?: string;
    embedWidth?: int;
    embedHeight?: int;
    duration?: int;
    author?: string;
    document?: TypeDocument;
    documents?: TypeDocument[];
    cachedPage?: TypePage;
  }> {
    // flags: null;
    id: long;
    url: string;
    displayUrl: string;
    hash: int;
    type?: string;
    siteName?: string;
    title?: string;
    description?: string;
    photo?: TypePhoto;
    embedUrl?: string;
    embedType?: string;
    embedWidth?: int;
    embedHeight?: int;
    duration?: int;
    author?: string;
    document?: TypeDocument;
    documents?: TypeDocument[];
    cachedPage?: TypePage;
  };
  export class WebPageNotModified extends VirtualClass<{
    
  }> {
    
  };
  export class Authorization extends VirtualClass<{
    // flags: null;
    current?: true;
    officialApp?: true;
    passwordPending?: true;
    hash: long;
    deviceModel: string;
    platform: string;
    systemVersion: string;
    apiId: int;
    appName: string;
    appVersion: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    country: string;
    region: string;
  }> {
    // flags: null;
    current?: true;
    officialApp?: true;
    passwordPending?: true;
    hash: long;
    deviceModel: string;
    platform: string;
    systemVersion: string;
    apiId: int;
    appName: string;
    appVersion: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    country: string;
    region: string;
  };
  export class ReceivedNotifyMessage extends VirtualClass<{
    id: int;
    // flags: int;
  }> {
    id: int;
    // flags: int;
  };
  export class ChatInviteEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class ChatInviteExported extends VirtualClass<{
    link: string;
  }> {
    link: string;
  };
  export class ChatInviteAlready extends VirtualClass<{
    chat: TypeChat;
  }> {
    chat: TypeChat;
  };
  export class ChatInvite extends VirtualClass<{
    // flags: null;
    channel?: true;
    broadcast?: true;
    public?: true;
    megagroup?: true;
    title: string;
    photo: TypePhoto;
    participantsCount: int;
    participants?: TypeUser[];
  }> {
    // flags: null;
    channel?: true;
    broadcast?: true;
    public?: true;
    megagroup?: true;
    title: string;
    photo: TypePhoto;
    participantsCount: int;
    participants?: TypeUser[];
  };
  export class InputStickerSetEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputStickerSetID extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputStickerSetShortName extends VirtualClass<{
    shortName: string;
  }> {
    shortName: string;
  };
  export class InputStickerSetAnimatedEmoji extends VirtualClass<{
    
  }> {
    
  };
  export class StickerSet extends VirtualClass<{
    // flags: null;
    archived?: true;
    official?: true;
    masks?: true;
    animated?: true;
    installedDate?: int;
    id: long;
    accessHash: long;
    title: string;
    shortName: string;
    thumb?: TypePhotoSize;
    thumbDcId?: int;
    count: int;
    hash: int;
  }> {
    // flags: null;
    archived?: true;
    official?: true;
    masks?: true;
    animated?: true;
    installedDate?: int;
    id: long;
    accessHash: long;
    title: string;
    shortName: string;
    thumb?: TypePhotoSize;
    thumbDcId?: int;
    count: int;
    hash: int;
  };
  export class BotCommand extends VirtualClass<{
    command: string;
    description: string;
  }> {
    command: string;
    description: string;
  };
  export class BotInfo extends VirtualClass<{
    userId: int;
    description: string;
    commands: TypeBotCommand[];
  }> {
    userId: int;
    description: string;
    commands: TypeBotCommand[];
  };
  export class KeyboardButton extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class KeyboardButtonUrl extends VirtualClass<{
    text: string;
    url: string;
  }> {
    text: string;
    url: string;
  };
  export class KeyboardButtonCallback extends VirtualClass<{
    text: string;
    data: bytes;
  }> {
    text: string;
    data: bytes;
  };
  export class KeyboardButtonRequestPhone extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class KeyboardButtonRequestGeoLocation extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class KeyboardButtonSwitchInline extends VirtualClass<{
    // flags: null;
    samePeer?: true;
    text: string;
    query: string;
  }> {
    // flags: null;
    samePeer?: true;
    text: string;
    query: string;
  };
  export class KeyboardButtonGame extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class KeyboardButtonBuy extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class KeyboardButtonUrlAuth extends VirtualClass<{
    // flags: null;
    text: string;
    fwdText?: string;
    url: string;
    buttonId: int;
  }> {
    // flags: null;
    text: string;
    fwdText?: string;
    url: string;
    buttonId: int;
  };
  export class InputKeyboardButtonUrlAuth extends VirtualClass<{
    // flags: null;
    requestWriteAccess?: true;
    text: string;
    fwdText?: string;
    url: string;
    bot: TypeInputUser;
  }> {
    // flags: null;
    requestWriteAccess?: true;
    text: string;
    fwdText?: string;
    url: string;
    bot: TypeInputUser;
  };
  export class KeyboardButtonRow extends VirtualClass<{
    buttons: TypeKeyboardButton[];
  }> {
    buttons: TypeKeyboardButton[];
  };
  export class ReplyKeyboardHide extends VirtualClass<{
    // flags: null;
    selective?: true;
  }> {
    // flags: null;
    selective?: true;
  };
  export class ReplyKeyboardForceReply extends VirtualClass<{
    // flags: null;
    singleUse?: true;
    selective?: true;
  }> {
    // flags: null;
    singleUse?: true;
    selective?: true;
  };
  export class ReplyKeyboardMarkup extends VirtualClass<{
    // flags: null;
    resize?: true;
    singleUse?: true;
    selective?: true;
    rows: TypeKeyboardButtonRow[];
  }> {
    // flags: null;
    resize?: true;
    singleUse?: true;
    selective?: true;
    rows: TypeKeyboardButtonRow[];
  };
  export class ReplyInlineMarkup extends VirtualClass<{
    rows: TypeKeyboardButtonRow[];
  }> {
    rows: TypeKeyboardButtonRow[];
  };
  export class MessageEntityUnknown extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityMention extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityHashtag extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityBotCommand extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityUrl extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityEmail extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityBold extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityItalic extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityCode extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityPre extends VirtualClass<{
    offset: int;
    length: int;
    language: string;
  }> {
    offset: int;
    length: int;
    language: string;
  };
  export class MessageEntityTextUrl extends VirtualClass<{
    offset: int;
    length: int;
    url: string;
  }> {
    offset: int;
    length: int;
    url: string;
  };
  export class MessageEntityMentionName extends VirtualClass<{
    offset: int;
    length: int;
    userId: int;
  }> {
    offset: int;
    length: int;
    userId: int;
  };
  export class InputMessageEntityMentionName extends VirtualClass<{
    offset: int;
    length: int;
    userId: TypeInputUser;
  }> {
    offset: int;
    length: int;
    userId: TypeInputUser;
  };
  export class MessageEntityPhone extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityCashtag extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityUnderline extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityStrike extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class MessageEntityBlockquote extends VirtualClass<{
    offset: int;
    length: int;
  }> {
    offset: int;
    length: int;
  };
  export class InputChannelEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputChannel extends VirtualClass<{
    channelId: int;
    accessHash: long;
  }> {
    channelId: int;
    accessHash: long;
  };
  export class InputChannelFromMessage extends VirtualClass<{
    peer: TypeInputPeer;
    msgId: int;
    channelId: int;
  }> {
    peer: TypeInputPeer;
    msgId: int;
    channelId: int;
  };
  export class MessageRange extends VirtualClass<{
    minId: int;
    maxId: int;
  }> {
    minId: int;
    maxId: int;
  };
  export class ChannelMessagesFilterEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelMessagesFilter extends VirtualClass<{
    // flags: null;
    excludeNewMessages?: true;
    ranges: TypeMessageRange[];
  }> {
    // flags: null;
    excludeNewMessages?: true;
    ranges: TypeMessageRange[];
  };
  export class ChannelParticipant extends VirtualClass<{
    userId: int;
    date: int;
  }> {
    userId: int;
    date: int;
  };
  export class ChannelParticipantSelf extends VirtualClass<{
    userId: int;
    inviterId: int;
    date: int;
  }> {
    userId: int;
    inviterId: int;
    date: int;
  };
  export class ChannelParticipantCreator extends VirtualClass<{
    // flags: null;
    userId: int;
    rank?: string;
  }> {
    // flags: null;
    userId: int;
    rank?: string;
  };
  export class ChannelParticipantAdmin extends VirtualClass<{
    // flags: null;
    canEdit?: true;
    self?: true;
    userId: int;
    inviterId?: int;
    promotedBy: int;
    date: int;
    adminRights: TypeChatAdminRights;
    rank?: string;
  }> {
    // flags: null;
    canEdit?: true;
    self?: true;
    userId: int;
    inviterId?: int;
    promotedBy: int;
    date: int;
    adminRights: TypeChatAdminRights;
    rank?: string;
  };
  export class ChannelParticipantBanned extends VirtualClass<{
    // flags: null;
    left?: true;
    userId: int;
    kickedBy: int;
    date: int;
    bannedRights: TypeChatBannedRights;
  }> {
    // flags: null;
    left?: true;
    userId: int;
    kickedBy: int;
    date: int;
    bannedRights: TypeChatBannedRights;
  };
  export class ChannelParticipantsRecent extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelParticipantsAdmins extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelParticipantsKicked extends VirtualClass<{
    q: string;
  }> {
    q: string;
  };
  export class ChannelParticipantsBots extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelParticipantsBanned extends VirtualClass<{
    q: string;
  }> {
    q: string;
  };
  export class ChannelParticipantsSearch extends VirtualClass<{
    q: string;
  }> {
    q: string;
  };
  export class ChannelParticipantsContacts extends VirtualClass<{
    q: string;
  }> {
    q: string;
  };
  export class FoundGif extends VirtualClass<{
    url: string;
    thumbUrl: string;
    contentUrl: string;
    contentType: string;
    w: int;
    h: int;
  }> {
    url: string;
    thumbUrl: string;
    contentUrl: string;
    contentType: string;
    w: int;
    h: int;
  };
  export class FoundGifCached extends VirtualClass<{
    url: string;
    photo: TypePhoto;
    document: TypeDocument;
  }> {
    url: string;
    photo: TypePhoto;
    document: TypeDocument;
  };
  export class InputBotInlineMessageMediaAuto extends VirtualClass<{
    // flags: null;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineMessageText extends VirtualClass<{
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineMessageMediaGeo extends VirtualClass<{
    // flags: null;
    geoPoint: TypeInputGeoPoint;
    period: int;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    geoPoint: TypeInputGeoPoint;
    period: int;
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineMessageMediaVenue extends VirtualClass<{
    // flags: null;
    geoPoint: TypeInputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    geoPoint: TypeInputGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineMessageMediaContact extends VirtualClass<{
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineMessageGame extends VirtualClass<{
    // flags: null;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    replyMarkup?: TypeReplyMarkup;
  };
  export class InputBotInlineResult extends VirtualClass<{
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: TypeInputWebDocument;
    content?: TypeInputWebDocument;
    sendMessage: TypeInputBotInlineMessage;
  }> {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: TypeInputWebDocument;
    content?: TypeInputWebDocument;
    sendMessage: TypeInputBotInlineMessage;
  };
  export class InputBotInlineResultPhoto extends VirtualClass<{
    id: string;
    type: string;
    photo: TypeInputPhoto;
    sendMessage: TypeInputBotInlineMessage;
  }> {
    id: string;
    type: string;
    photo: TypeInputPhoto;
    sendMessage: TypeInputBotInlineMessage;
  };
  export class InputBotInlineResultDocument extends VirtualClass<{
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    document: TypeInputDocument;
    sendMessage: TypeInputBotInlineMessage;
  }> {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    document: TypeInputDocument;
    sendMessage: TypeInputBotInlineMessage;
  };
  export class InputBotInlineResultGame extends VirtualClass<{
    id: string;
    shortName: string;
    sendMessage: TypeInputBotInlineMessage;
  }> {
    id: string;
    shortName: string;
    sendMessage: TypeInputBotInlineMessage;
  };
  export class BotInlineMessageMediaAuto extends VirtualClass<{
    // flags: null;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  };
  export class BotInlineMessageText extends VirtualClass<{
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    noWebpage?: true;
    message: string;
    entities?: TypeMessageEntity[];
    replyMarkup?: TypeReplyMarkup;
  };
  export class BotInlineMessageMediaGeo extends VirtualClass<{
    // flags: null;
    geo: TypeGeoPoint;
    period: int;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    geo: TypeGeoPoint;
    period: int;
    replyMarkup?: TypeReplyMarkup;
  };
  export class BotInlineMessageMediaVenue extends VirtualClass<{
    // flags: null;
    geo: TypeGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    geo: TypeGeoPoint;
    title: string;
    address: string;
    provider: string;
    venueId: string;
    venueType: string;
    replyMarkup?: TypeReplyMarkup;
  };
  export class BotInlineMessageMediaContact extends VirtualClass<{
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: TypeReplyMarkup;
  }> {
    // flags: null;
    phoneNumber: string;
    firstName: string;
    lastName: string;
    vcard: string;
    replyMarkup?: TypeReplyMarkup;
  };
  export class BotInlineResult extends VirtualClass<{
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: TypeWebDocument;
    content?: TypeWebDocument;
    sendMessage: TypeBotInlineMessage;
  }> {
    // flags: null;
    id: string;
    type: string;
    title?: string;
    description?: string;
    url?: string;
    thumb?: TypeWebDocument;
    content?: TypeWebDocument;
    sendMessage: TypeBotInlineMessage;
  };
  export class BotInlineMediaResult extends VirtualClass<{
    // flags: null;
    id: string;
    type: string;
    photo?: TypePhoto;
    document?: TypeDocument;
    title?: string;
    description?: string;
    sendMessage: TypeBotInlineMessage;
  }> {
    // flags: null;
    id: string;
    type: string;
    photo?: TypePhoto;
    document?: TypeDocument;
    title?: string;
    description?: string;
    sendMessage: TypeBotInlineMessage;
  };
  export class ExportedMessageLink extends VirtualClass<{
    link: string;
    html: string;
  }> {
    link: string;
    html: string;
  };
  export class MessageFwdHeader extends VirtualClass<{
    // flags: null;
    fromId?: int;
    fromName?: string;
    date: int;
    channelId?: int;
    channelPost?: int;
    postAuthor?: string;
    savedFromPeer?: TypePeer;
    savedFromMsgId?: int;
  }> {
    // flags: null;
    fromId?: int;
    fromName?: string;
    date: int;
    channelId?: int;
    channelPost?: int;
    postAuthor?: string;
    savedFromPeer?: TypePeer;
    savedFromMsgId?: int;
  };
  export class InputBotInlineMessageID extends VirtualClass<{
    dcId: int;
    id: long;
    accessHash: long;
  }> {
    dcId: int;
    id: long;
    accessHash: long;
  };
  export class InlineBotSwitchPM extends VirtualClass<{
    text: string;
    startParam: string;
  }> {
    text: string;
    startParam: string;
  };
  export class TopPeer extends VirtualClass<{
    peer: TypePeer;
    rating: double;
  }> {
    peer: TypePeer;
    rating: double;
  };
  export class TopPeerCategoryBotsPM extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryBotsInline extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryCorrespondents extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryGroups extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryChannels extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryPhoneCalls extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryForwardUsers extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryForwardChats extends VirtualClass<{
    
  }> {
    
  };
  export class TopPeerCategoryPeers extends VirtualClass<{
    category: TypeTopPeerCategory;
    count: int;
    peers: TypeTopPeer[];
  }> {
    category: TypeTopPeerCategory;
    count: int;
    peers: TypeTopPeer[];
  };
  export class DraftMessageEmpty extends VirtualClass<{
    // flags: null;
    date?: int;
  }> {
    // flags: null;
    date?: int;
  };
  export class DraftMessage extends VirtualClass<{
    // flags: null;
    noWebpage?: true;
    replyToMsgId?: int;
    message: string;
    entities?: TypeMessageEntity[];
    date: int;
  }> {
    // flags: null;
    noWebpage?: true;
    replyToMsgId?: int;
    message: string;
    entities?: TypeMessageEntity[];
    date: int;
  };
  export class StickerSetCovered extends VirtualClass<{
    set: TypeStickerSet;
    cover: TypeDocument;
  }> {
    set: TypeStickerSet;
    cover: TypeDocument;
  };
  export class StickerSetMultiCovered extends VirtualClass<{
    set: TypeStickerSet;
    covers: TypeDocument[];
  }> {
    set: TypeStickerSet;
    covers: TypeDocument[];
  };
  export class MaskCoords extends VirtualClass<{
    n: int;
    x: double;
    y: double;
    zoom: double;
  }> {
    n: int;
    x: double;
    y: double;
    zoom: double;
  };
  export class InputStickeredMediaPhoto extends VirtualClass<{
    id: TypeInputPhoto;
  }> {
    id: TypeInputPhoto;
  };
  export class InputStickeredMediaDocument extends VirtualClass<{
    id: TypeInputDocument;
  }> {
    id: TypeInputDocument;
  };
  export class Game extends VirtualClass<{
    // flags: null;
    id: long;
    accessHash: long;
    shortName: string;
    title: string;
    description: string;
    photo: TypePhoto;
    document?: TypeDocument;
  }> {
    // flags: null;
    id: long;
    accessHash: long;
    shortName: string;
    title: string;
    description: string;
    photo: TypePhoto;
    document?: TypeDocument;
  };
  export class InputGameID extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputGameShortName extends VirtualClass<{
    botId: TypeInputUser;
    shortName: string;
  }> {
    botId: TypeInputUser;
    shortName: string;
  };
  export class HighScore extends VirtualClass<{
    pos: int;
    userId: int;
    score: int;
  }> {
    pos: int;
    userId: int;
    score: int;
  };
  export class TextEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class TextPlain extends VirtualClass<{
    text: string;
  }> {
    text: string;
  };
  export class TextBold extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextItalic extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextUnderline extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextStrike extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextFixed extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextUrl extends VirtualClass<{
    text: TypeRichText;
    url: string;
    webpageId: long;
  }> {
    text: TypeRichText;
    url: string;
    webpageId: long;
  };
  export class TextEmail extends VirtualClass<{
    text: TypeRichText;
    email: string;
  }> {
    text: TypeRichText;
    email: string;
  };
  export class TextConcat extends VirtualClass<{
    texts: TypeRichText[];
  }> {
    texts: TypeRichText[];
  };
  export class TextSubscript extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextSuperscript extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextMarked extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class TextPhone extends VirtualClass<{
    text: TypeRichText;
    phone: string;
  }> {
    text: TypeRichText;
    phone: string;
  };
  export class TextImage extends VirtualClass<{
    documentId: long;
    w: int;
    h: int;
  }> {
    documentId: long;
    w: int;
    h: int;
  };
  export class TextAnchor extends VirtualClass<{
    text: TypeRichText;
    name: string;
  }> {
    text: TypeRichText;
    name: string;
  };
  export class PageBlockUnsupported extends VirtualClass<{
    
  }> {
    
  };
  export class PageBlockTitle extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockSubtitle extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockAuthorDate extends VirtualClass<{
    author: TypeRichText;
    publishedDate: int;
  }> {
    author: TypeRichText;
    publishedDate: int;
  };
  export class PageBlockHeader extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockSubheader extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockParagraph extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockPreformatted extends VirtualClass<{
    text: TypeRichText;
    language: string;
  }> {
    text: TypeRichText;
    language: string;
  };
  export class PageBlockFooter extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockDivider extends VirtualClass<{
    
  }> {
    
  };
  export class PageBlockAnchor extends VirtualClass<{
    name: string;
  }> {
    name: string;
  };
  export class PageBlockList extends VirtualClass<{
    items: TypePageListItem[];
  }> {
    items: TypePageListItem[];
  };
  export class PageBlockBlockquote extends VirtualClass<{
    text: TypeRichText;
    caption: TypeRichText;
  }> {
    text: TypeRichText;
    caption: TypeRichText;
  };
  export class PageBlockPullquote extends VirtualClass<{
    text: TypeRichText;
    caption: TypeRichText;
  }> {
    text: TypeRichText;
    caption: TypeRichText;
  };
  export class PageBlockPhoto extends VirtualClass<{
    // flags: null;
    photoId: long;
    caption: TypePageCaption;
    url?: string;
    webpageId?: long;
  }> {
    // flags: null;
    photoId: long;
    caption: TypePageCaption;
    url?: string;
    webpageId?: long;
  };
  export class PageBlockVideo extends VirtualClass<{
    // flags: null;
    autoplay?: true;
    loop?: true;
    videoId: long;
    caption: TypePageCaption;
  }> {
    // flags: null;
    autoplay?: true;
    loop?: true;
    videoId: long;
    caption: TypePageCaption;
  };
  export class PageBlockCover extends VirtualClass<{
    cover: TypePageBlock;
  }> {
    cover: TypePageBlock;
  };
  export class PageBlockEmbed extends VirtualClass<{
    // flags: null;
    fullWidth?: true;
    allowScrolling?: true;
    url?: string;
    html?: string;
    posterPhotoId?: long;
    w?: int;
    h?: int;
    caption: TypePageCaption;
  }> {
    // flags: null;
    fullWidth?: true;
    allowScrolling?: true;
    url?: string;
    html?: string;
    posterPhotoId?: long;
    w?: int;
    h?: int;
    caption: TypePageCaption;
  };
  export class PageBlockEmbedPost extends VirtualClass<{
    url: string;
    webpageId: long;
    authorPhotoId: long;
    author: string;
    date: int;
    blocks: TypePageBlock[];
    caption: TypePageCaption;
  }> {
    url: string;
    webpageId: long;
    authorPhotoId: long;
    author: string;
    date: int;
    blocks: TypePageBlock[];
    caption: TypePageCaption;
  };
  export class PageBlockCollage extends VirtualClass<{
    items: TypePageBlock[];
    caption: TypePageCaption;
  }> {
    items: TypePageBlock[];
    caption: TypePageCaption;
  };
  export class PageBlockSlideshow extends VirtualClass<{
    items: TypePageBlock[];
    caption: TypePageCaption;
  }> {
    items: TypePageBlock[];
    caption: TypePageCaption;
  };
  export class PageBlockChannel extends VirtualClass<{
    channel: TypeChat;
  }> {
    channel: TypeChat;
  };
  export class PageBlockAudio extends VirtualClass<{
    audioId: long;
    caption: TypePageCaption;
  }> {
    audioId: long;
    caption: TypePageCaption;
  };
  export class PageBlockKicker extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageBlockTable extends VirtualClass<{
    // flags: null;
    bordered?: true;
    striped?: true;
    title: TypeRichText;
    rows: TypePageTableRow[];
  }> {
    // flags: null;
    bordered?: true;
    striped?: true;
    title: TypeRichText;
    rows: TypePageTableRow[];
  };
  export class PageBlockOrderedList extends VirtualClass<{
    items: TypePageListOrderedItem[];
  }> {
    items: TypePageListOrderedItem[];
  };
  export class PageBlockDetails extends VirtualClass<{
    // flags: null;
    open?: true;
    blocks: TypePageBlock[];
    title: TypeRichText;
  }> {
    // flags: null;
    open?: true;
    blocks: TypePageBlock[];
    title: TypeRichText;
  };
  export class PageBlockRelatedArticles extends VirtualClass<{
    title: TypeRichText;
    articles: TypePageRelatedArticle[];
  }> {
    title: TypeRichText;
    articles: TypePageRelatedArticle[];
  };
  export class PageBlockMap extends VirtualClass<{
    geo: TypeGeoPoint;
    zoom: int;
    w: int;
    h: int;
    caption: TypePageCaption;
  }> {
    geo: TypeGeoPoint;
    zoom: int;
    w: int;
    h: int;
    caption: TypePageCaption;
  };
  export class PhoneCallDiscardReasonMissed extends VirtualClass<{
    
  }> {
    
  };
  export class PhoneCallDiscardReasonDisconnect extends VirtualClass<{
    
  }> {
    
  };
  export class PhoneCallDiscardReasonHangup extends VirtualClass<{
    
  }> {
    
  };
  export class PhoneCallDiscardReasonBusy extends VirtualClass<{
    
  }> {
    
  };
  export class DataJSON extends VirtualClass<{
    data: string;
  }> {
    data: string;
  };
  export class LabeledPrice extends VirtualClass<{
    label: string;
    amount: long;
  }> {
    label: string;
    amount: long;
  };
  export class Invoice extends VirtualClass<{
    // flags: null;
    test?: true;
    nameRequested?: true;
    phoneRequested?: true;
    emailRequested?: true;
    shippingAddressRequested?: true;
    flexible?: true;
    phoneToProvider?: true;
    emailToProvider?: true;
    currency: string;
    prices: TypeLabeledPrice[];
  }> {
    // flags: null;
    test?: true;
    nameRequested?: true;
    phoneRequested?: true;
    emailRequested?: true;
    shippingAddressRequested?: true;
    flexible?: true;
    phoneToProvider?: true;
    emailToProvider?: true;
    currency: string;
    prices: TypeLabeledPrice[];
  };
  export class PaymentCharge extends VirtualClass<{
    id: string;
    providerChargeId: string;
  }> {
    id: string;
    providerChargeId: string;
  };
  export class PostAddress extends VirtualClass<{
    streetLine1: string;
    streetLine2: string;
    city: string;
    state: string;
    countryIso2: string;
    postCode: string;
  }> {
    streetLine1: string;
    streetLine2: string;
    city: string;
    state: string;
    countryIso2: string;
    postCode: string;
  };
  export class PaymentRequestedInfo extends VirtualClass<{
    // flags: null;
    name?: string;
    phone?: string;
    email?: string;
    shippingAddress?: TypePostAddress;
  }> {
    // flags: null;
    name?: string;
    phone?: string;
    email?: string;
    shippingAddress?: TypePostAddress;
  };
  export class PaymentSavedCredentialsCard extends VirtualClass<{
    id: string;
    title: string;
  }> {
    id: string;
    title: string;
  };
  export class WebDocument extends VirtualClass<{
    url: string;
    accessHash: long;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  }> {
    url: string;
    accessHash: long;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  };
  export class WebDocumentNoProxy extends VirtualClass<{
    url: string;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  }> {
    url: string;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  };
  export class InputWebDocument extends VirtualClass<{
    url: string;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  }> {
    url: string;
    size: int;
    mimeType: string;
    attributes: TypeDocumentAttribute[];
  };
  export class InputWebFileLocation extends VirtualClass<{
    url: string;
    accessHash: long;
  }> {
    url: string;
    accessHash: long;
  };
  export class InputWebFileGeoPointLocation extends VirtualClass<{
    geoPoint: TypeInputGeoPoint;
    accessHash: long;
    w: int;
    h: int;
    zoom: int;
    scale: int;
  }> {
    geoPoint: TypeInputGeoPoint;
    accessHash: long;
    w: int;
    h: int;
    zoom: int;
    scale: int;
  };
  export class InputPaymentCredentialsSaved extends VirtualClass<{
    id: string;
    tmpPassword: bytes;
  }> {
    id: string;
    tmpPassword: bytes;
  };
  export class InputPaymentCredentials extends VirtualClass<{
    // flags: null;
    save?: true;
    data: TypeDataJSON;
  }> {
    // flags: null;
    save?: true;
    data: TypeDataJSON;
  };
  export class InputPaymentCredentialsApplePay extends VirtualClass<{
    paymentData: TypeDataJSON;
  }> {
    paymentData: TypeDataJSON;
  };
  export class InputPaymentCredentialsAndroidPay extends VirtualClass<{
    paymentToken: TypeDataJSON;
    googleTransactionId: string;
  }> {
    paymentToken: TypeDataJSON;
    googleTransactionId: string;
  };
  export class ShippingOption extends VirtualClass<{
    id: string;
    title: string;
    prices: TypeLabeledPrice[];
  }> {
    id: string;
    title: string;
    prices: TypeLabeledPrice[];
  };
  export class InputStickerSetItem extends VirtualClass<{
    // flags: null;
    document: TypeInputDocument;
    emoji: string;
    maskCoords?: TypeMaskCoords;
  }> {
    // flags: null;
    document: TypeInputDocument;
    emoji: string;
    maskCoords?: TypeMaskCoords;
  };
  export class InputPhoneCall extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class PhoneCallEmpty extends VirtualClass<{
    id: long;
  }> {
    id: long;
  };
  export class PhoneCallWaiting extends VirtualClass<{
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    protocol: TypePhoneCallProtocol;
    receiveDate?: int;
  }> {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    protocol: TypePhoneCallProtocol;
    receiveDate?: int;
  };
  export class PhoneCallRequested extends VirtualClass<{
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAHash: bytes;
    protocol: TypePhoneCallProtocol;
  }> {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAHash: bytes;
    protocol: TypePhoneCallProtocol;
  };
  export class PhoneCallAccepted extends VirtualClass<{
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gB: bytes;
    protocol: TypePhoneCallProtocol;
  }> {
    // flags: null;
    video?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gB: bytes;
    protocol: TypePhoneCallProtocol;
  };
  export class PhoneCall extends VirtualClass<{
    // flags: null;
    p2pAllowed?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
    protocol: TypePhoneCallProtocol;
    connections: TypePhoneConnection[];
    startDate: int;
  }> {
    // flags: null;
    p2pAllowed?: true;
    id: long;
    accessHash: long;
    date: int;
    adminId: int;
    participantId: int;
    gAOrB: bytes;
    keyFingerprint: long;
    protocol: TypePhoneCallProtocol;
    connections: TypePhoneConnection[];
    startDate: int;
  };
  export class PhoneCallDiscarded extends VirtualClass<{
    // flags: null;
    needRating?: true;
    needDebug?: true;
    video?: true;
    id: long;
    reason?: TypePhoneCallDiscardReason;
    duration?: int;
  }> {
    // flags: null;
    needRating?: true;
    needDebug?: true;
    video?: true;
    id: long;
    reason?: TypePhoneCallDiscardReason;
    duration?: int;
  };
  export class PhoneConnection extends VirtualClass<{
    id: long;
    ip: string;
    ipv6: string;
    port: int;
    peerTag: bytes;
  }> {
    id: long;
    ip: string;
    ipv6: string;
    port: int;
    peerTag: bytes;
  };
  export class PhoneCallProtocol extends VirtualClass<{
    // flags: null;
    udpP2p?: true;
    udpReflector?: true;
    minLayer: int;
    maxLayer: int;
  }> {
    // flags: null;
    udpP2p?: true;
    udpReflector?: true;
    minLayer: int;
    maxLayer: int;
  };
  export class CdnPublicKey extends VirtualClass<{
    dcId: int;
    publicKey: string;
  }> {
    dcId: int;
    publicKey: string;
  };
  export class CdnConfig extends VirtualClass<{
    publicKeys: TypeCdnPublicKey[];
  }> {
    publicKeys: TypeCdnPublicKey[];
  };
  export class LangPackString extends VirtualClass<{
    key: string;
    value: string;
  }> {
    key: string;
    value: string;
  };
  export class LangPackStringPluralized extends VirtualClass<{
    // flags: null;
    key: string;
    zeroValue?: string;
    oneValue?: string;
    twoValue?: string;
    fewValue?: string;
    manyValue?: string;
    otherValue: string;
  }> {
    // flags: null;
    key: string;
    zeroValue?: string;
    oneValue?: string;
    twoValue?: string;
    fewValue?: string;
    manyValue?: string;
    otherValue: string;
  };
  export class LangPackStringDeleted extends VirtualClass<{
    key: string;
  }> {
    key: string;
  };
  export class LangPackDifference extends VirtualClass<{
    langCode: string;
    fromVersion: int;
    version: int;
    strings: TypeLangPackString[];
  }> {
    langCode: string;
    fromVersion: int;
    version: int;
    strings: TypeLangPackString[];
  };
  export class LangPackLanguage extends VirtualClass<{
    // flags: null;
    official?: true;
    rtl?: true;
    beta?: true;
    name: string;
    nativeName: string;
    langCode: string;
    baseLangCode?: string;
    pluralCode: string;
    stringsCount: int;
    translatedCount: int;
    translationsUrl: string;
  }> {
    // flags: null;
    official?: true;
    rtl?: true;
    beta?: true;
    name: string;
    nativeName: string;
    langCode: string;
    baseLangCode?: string;
    pluralCode: string;
    stringsCount: int;
    translatedCount: int;
    translationsUrl: string;
  };
  export class ChannelAdminLogEventActionChangeTitle extends VirtualClass<{
    prevValue: string;
    newValue: string;
  }> {
    prevValue: string;
    newValue: string;
  };
  export class ChannelAdminLogEventActionChangeAbout extends VirtualClass<{
    prevValue: string;
    newValue: string;
  }> {
    prevValue: string;
    newValue: string;
  };
  export class ChannelAdminLogEventActionChangeUsername extends VirtualClass<{
    prevValue: string;
    newValue: string;
  }> {
    prevValue: string;
    newValue: string;
  };
  export class ChannelAdminLogEventActionChangePhoto extends VirtualClass<{
    prevPhoto: TypePhoto;
    newPhoto: TypePhoto;
  }> {
    prevPhoto: TypePhoto;
    newPhoto: TypePhoto;
  };
  export class ChannelAdminLogEventActionToggleInvites extends VirtualClass<{
    newValue: Bool;
  }> {
    newValue: Bool;
  };
  export class ChannelAdminLogEventActionToggleSignatures extends VirtualClass<{
    newValue: Bool;
  }> {
    newValue: Bool;
  };
  export class ChannelAdminLogEventActionUpdatePinned extends VirtualClass<{
    message: TypeMessage;
  }> {
    message: TypeMessage;
  };
  export class ChannelAdminLogEventActionEditMessage extends VirtualClass<{
    prevMessage: TypeMessage;
    newMessage: TypeMessage;
  }> {
    prevMessage: TypeMessage;
    newMessage: TypeMessage;
  };
  export class ChannelAdminLogEventActionDeleteMessage extends VirtualClass<{
    message: TypeMessage;
  }> {
    message: TypeMessage;
  };
  export class ChannelAdminLogEventActionParticipantJoin extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelAdminLogEventActionParticipantLeave extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelAdminLogEventActionParticipantInvite extends VirtualClass<{
    participant: TypeChannelParticipant;
  }> {
    participant: TypeChannelParticipant;
  };
  export class ChannelAdminLogEventActionParticipantToggleBan extends VirtualClass<{
    prevParticipant: TypeChannelParticipant;
    newParticipant: TypeChannelParticipant;
  }> {
    prevParticipant: TypeChannelParticipant;
    newParticipant: TypeChannelParticipant;
  };
  export class ChannelAdminLogEventActionParticipantToggleAdmin extends VirtualClass<{
    prevParticipant: TypeChannelParticipant;
    newParticipant: TypeChannelParticipant;
  }> {
    prevParticipant: TypeChannelParticipant;
    newParticipant: TypeChannelParticipant;
  };
  export class ChannelAdminLogEventActionChangeStickerSet extends VirtualClass<{
    prevStickerset: TypeInputStickerSet;
    newStickerset: TypeInputStickerSet;
  }> {
    prevStickerset: TypeInputStickerSet;
    newStickerset: TypeInputStickerSet;
  };
  export class ChannelAdminLogEventActionTogglePreHistoryHidden extends VirtualClass<{
    newValue: Bool;
  }> {
    newValue: Bool;
  };
  export class ChannelAdminLogEventActionDefaultBannedRights extends VirtualClass<{
    prevBannedRights: TypeChatBannedRights;
    newBannedRights: TypeChatBannedRights;
  }> {
    prevBannedRights: TypeChatBannedRights;
    newBannedRights: TypeChatBannedRights;
  };
  export class ChannelAdminLogEventActionStopPoll extends VirtualClass<{
    message: TypeMessage;
  }> {
    message: TypeMessage;
  };
  export class ChannelAdminLogEventActionChangeLinkedChat extends VirtualClass<{
    prevValue: int;
    newValue: int;
  }> {
    prevValue: int;
    newValue: int;
  };
  export class ChannelAdminLogEventActionChangeLocation extends VirtualClass<{
    prevValue: TypeChannelLocation;
    newValue: TypeChannelLocation;
  }> {
    prevValue: TypeChannelLocation;
    newValue: TypeChannelLocation;
  };
  export class ChannelAdminLogEventActionToggleSlowMode extends VirtualClass<{
    prevValue: int;
    newValue: int;
  }> {
    prevValue: int;
    newValue: int;
  };
  export class ChannelAdminLogEvent extends VirtualClass<{
    id: long;
    date: int;
    userId: int;
    action: TypeChannelAdminLogEventAction;
  }> {
    id: long;
    date: int;
    userId: int;
    action: TypeChannelAdminLogEventAction;
  };
  export class ChannelAdminLogEventsFilter extends VirtualClass<{
    // flags: null;
    join?: true;
    leave?: true;
    invite?: true;
    ban?: true;
    unban?: true;
    kick?: true;
    unkick?: true;
    promote?: true;
    demote?: true;
    info?: true;
    settings?: true;
    pinned?: true;
    edit?: true;
    delete?: true;
  }> {
    // flags: null;
    join?: true;
    leave?: true;
    invite?: true;
    ban?: true;
    unban?: true;
    kick?: true;
    unkick?: true;
    promote?: true;
    demote?: true;
    info?: true;
    settings?: true;
    pinned?: true;
    edit?: true;
    delete?: true;
  };
  export class PopularContact extends VirtualClass<{
    clientId: long;
    importers: int;
  }> {
    clientId: long;
    importers: int;
  };
  export class RecentMeUrlUnknown extends VirtualClass<{
    url: string;
  }> {
    url: string;
  };
  export class RecentMeUrlUser extends VirtualClass<{
    url: string;
    userId: int;
  }> {
    url: string;
    userId: int;
  };
  export class RecentMeUrlChat extends VirtualClass<{
    url: string;
    chatId: int;
  }> {
    url: string;
    chatId: int;
  };
  export class RecentMeUrlChatInvite extends VirtualClass<{
    url: string;
    chatInvite: TypeChatInvite;
  }> {
    url: string;
    chatInvite: TypeChatInvite;
  };
  export class RecentMeUrlStickerSet extends VirtualClass<{
    url: string;
    set: TypeStickerSetCovered;
  }> {
    url: string;
    set: TypeStickerSetCovered;
  };
  export class InputSingleMedia extends VirtualClass<{
    // flags: null;
    media: TypeInputMedia;
    randomId: long;
    message: string;
    entities?: TypeMessageEntity[];
  }> {
    // flags: null;
    media: TypeInputMedia;
    randomId: long;
    message: string;
    entities?: TypeMessageEntity[];
  };
  export class WebAuthorization extends VirtualClass<{
    hash: long;
    botId: int;
    domain: string;
    browser: string;
    platform: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    region: string;
  }> {
    hash: long;
    botId: int;
    domain: string;
    browser: string;
    platform: string;
    dateCreated: int;
    dateActive: int;
    ip: string;
    region: string;
  };
  export class InputMessageID extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class InputMessageReplyTo extends VirtualClass<{
    id: int;
  }> {
    id: int;
  };
  export class InputMessagePinned extends VirtualClass<{
    
  }> {
    
  };
  export class InputDialogPeer extends VirtualClass<{
    peer: TypeInputPeer;
  }> {
    peer: TypeInputPeer;
  };
  export class InputDialogPeerFolder extends VirtualClass<{
    folderId: int;
  }> {
    folderId: int;
  };
  export class DialogPeer extends VirtualClass<{
    peer: TypePeer;
  }> {
    peer: TypePeer;
  };
  export class DialogPeerFolder extends VirtualClass<{
    folderId: int;
  }> {
    folderId: int;
  };
  export class FileHash extends VirtualClass<{
    offset: int;
    limit: int;
    hash: bytes;
  }> {
    offset: int;
    limit: int;
    hash: bytes;
  };
  export class InputClientProxy extends VirtualClass<{
    address: string;
    port: int;
  }> {
    address: string;
    port: int;
  };
  export class InputSecureFileUploaded extends VirtualClass<{
    id: long;
    parts: int;
    md5Checksum: string;
    fileHash: bytes;
    secret: bytes;
  }> {
    id: long;
    parts: int;
    md5Checksum: string;
    fileHash: bytes;
    secret: bytes;
  };
  export class InputSecureFile extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class SecureFileEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class SecureFile extends VirtualClass<{
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    date: int;
    fileHash: bytes;
    secret: bytes;
  }> {
    id: long;
    accessHash: long;
    size: int;
    dcId: int;
    date: int;
    fileHash: bytes;
    secret: bytes;
  };
  export class SecureData extends VirtualClass<{
    data: bytes;
    dataHash: bytes;
    secret: bytes;
  }> {
    data: bytes;
    dataHash: bytes;
    secret: bytes;
  };
  export class SecurePlainPhone extends VirtualClass<{
    phone: string;
  }> {
    phone: string;
  };
  export class SecurePlainEmail extends VirtualClass<{
    email: string;
  }> {
    email: string;
  };
  export class SecureValueTypePersonalDetails extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypePassport extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeDriverLicense extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeIdentityCard extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeInternalPassport extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeAddress extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeUtilityBill extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeBankStatement extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeRentalAgreement extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypePassportRegistration extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeTemporaryRegistration extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypePhone extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValueTypeEmail extends VirtualClass<{
    
  }> {
    
  };
  export class SecureValue extends VirtualClass<{
    // flags: null;
    type: TypeSecureValueType;
    data?: TypeSecureData;
    frontSide?: TypeSecureFile;
    reverseSide?: TypeSecureFile;
    selfie?: TypeSecureFile;
    translation?: TypeSecureFile[];
    files?: TypeSecureFile[];
    plainData?: TypeSecurePlainData;
    hash: bytes;
  }> {
    // flags: null;
    type: TypeSecureValueType;
    data?: TypeSecureData;
    frontSide?: TypeSecureFile;
    reverseSide?: TypeSecureFile;
    selfie?: TypeSecureFile;
    translation?: TypeSecureFile[];
    files?: TypeSecureFile[];
    plainData?: TypeSecurePlainData;
    hash: bytes;
  };
  export class InputSecureValue extends VirtualClass<{
    // flags: null;
    type: TypeSecureValueType;
    data?: TypeSecureData;
    frontSide?: TypeInputSecureFile;
    reverseSide?: TypeInputSecureFile;
    selfie?: TypeInputSecureFile;
    translation?: TypeInputSecureFile[];
    files?: TypeInputSecureFile[];
    plainData?: TypeSecurePlainData;
  }> {
    // flags: null;
    type: TypeSecureValueType;
    data?: TypeSecureData;
    frontSide?: TypeInputSecureFile;
    reverseSide?: TypeInputSecureFile;
    selfie?: TypeInputSecureFile;
    translation?: TypeInputSecureFile[];
    files?: TypeInputSecureFile[];
    plainData?: TypeSecurePlainData;
  };
  export class SecureValueHash extends VirtualClass<{
    type: TypeSecureValueType;
    hash: bytes;
  }> {
    type: TypeSecureValueType;
    hash: bytes;
  };
  export class SecureValueErrorData extends VirtualClass<{
    type: TypeSecureValueType;
    dataHash: bytes;
    field: string;
    text: string;
  }> {
    type: TypeSecureValueType;
    dataHash: bytes;
    field: string;
    text: string;
  };
  export class SecureValueErrorFrontSide extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  };
  export class SecureValueErrorReverseSide extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  };
  export class SecureValueErrorSelfie extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  };
  export class SecureValueErrorFile extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  };
  export class SecureValueErrorFiles extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes[];
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes[];
    text: string;
  };
  export class SecureValueError extends VirtualClass<{
    type: TypeSecureValueType;
    hash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    hash: bytes;
    text: string;
  };
  export class SecureValueErrorTranslationFile extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes;
    text: string;
  };
  export class SecureValueErrorTranslationFiles extends VirtualClass<{
    type: TypeSecureValueType;
    fileHash: bytes[];
    text: string;
  }> {
    type: TypeSecureValueType;
    fileHash: bytes[];
    text: string;
  };
  export class SecureCredentialsEncrypted extends VirtualClass<{
    data: bytes;
    hash: bytes;
    secret: bytes;
  }> {
    data: bytes;
    hash: bytes;
    secret: bytes;
  };
  export class SavedPhoneContact extends VirtualClass<{
    phone: string;
    firstName: string;
    lastName: string;
    date: int;
  }> {
    phone: string;
    firstName: string;
    lastName: string;
    date: int;
  };
  export class PasswordKdfAlgoUnknown extends VirtualClass<{
    
  }> {
    
  };
  export class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends VirtualClass<{
    salt1: bytes;
    salt2: bytes;
    g: int;
    p: bytes;
  }> {
    salt1: bytes;
    salt2: bytes;
    g: int;
    p: bytes;
  };
  export class SecurePasswordKdfAlgoUnknown extends VirtualClass<{
    
  }> {
    
  };
  export class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends VirtualClass<{
    salt: bytes;
  }> {
    salt: bytes;
  };
  export class SecurePasswordKdfAlgoSHA512 extends VirtualClass<{
    salt: bytes;
  }> {
    salt: bytes;
  };
  export class SecureSecretSettings extends VirtualClass<{
    secureAlgo: TypeSecurePasswordKdfAlgo;
    secureSecret: bytes;
    secureSecretId: long;
  }> {
    secureAlgo: TypeSecurePasswordKdfAlgo;
    secureSecret: bytes;
    secureSecretId: long;
  };
  export class InputCheckPasswordEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class InputCheckPasswordSRP extends VirtualClass<{
    srpId: long;
    A: bytes;
    M1: bytes;
  }> {
    srpId: long;
    A: bytes;
    M1: bytes;
  };
  export class SecureRequiredType extends VirtualClass<{
    // flags: null;
    nativeNames?: true;
    selfieRequired?: true;
    translationRequired?: true;
    type: TypeSecureValueType;
  }> {
    // flags: null;
    nativeNames?: true;
    selfieRequired?: true;
    translationRequired?: true;
    type: TypeSecureValueType;
  };
  export class SecureRequiredTypeOneOf extends VirtualClass<{
    types: TypeSecureRequiredType[];
  }> {
    types: TypeSecureRequiredType[];
  };
  export class InputAppEvent extends VirtualClass<{
    time: double;
    type: string;
    peer: long;
    data: TypeJSONValue;
  }> {
    time: double;
    type: string;
    peer: long;
    data: TypeJSONValue;
  };
  export class JsonObjectValue extends VirtualClass<{
    key: string;
    value: TypeJSONValue;
  }> {
    key: string;
    value: TypeJSONValue;
  };
  export class JsonNull extends VirtualClass<{
    
  }> {
    
  };
  export class JsonBool extends VirtualClass<{
    value: Bool;
  }> {
    value: Bool;
  };
  export class JsonNumber extends VirtualClass<{
    value: double;
  }> {
    value: double;
  };
  export class JsonString extends VirtualClass<{
    value: string;
  }> {
    value: string;
  };
  export class JsonArray extends VirtualClass<{
    value: TypeJSONValue[];
  }> {
    value: TypeJSONValue[];
  };
  export class JsonObject extends VirtualClass<{
    value: TypeJSONObjectValue[];
  }> {
    value: TypeJSONObjectValue[];
  };
  export class PageTableCell extends VirtualClass<{
    // flags: null;
    header?: true;
    alignCenter?: true;
    alignRight?: true;
    valignMiddle?: true;
    valignBottom?: true;
    text?: TypeRichText;
    colspan?: int;
    rowspan?: int;
  }> {
    // flags: null;
    header?: true;
    alignCenter?: true;
    alignRight?: true;
    valignMiddle?: true;
    valignBottom?: true;
    text?: TypeRichText;
    colspan?: int;
    rowspan?: int;
  };
  export class PageTableRow extends VirtualClass<{
    cells: TypePageTableCell[];
  }> {
    cells: TypePageTableCell[];
  };
  export class PageCaption extends VirtualClass<{
    text: TypeRichText;
    credit: TypeRichText;
  }> {
    text: TypeRichText;
    credit: TypeRichText;
  };
  export class PageListItemText extends VirtualClass<{
    text: TypeRichText;
  }> {
    text: TypeRichText;
  };
  export class PageListItemBlocks extends VirtualClass<{
    blocks: TypePageBlock[];
  }> {
    blocks: TypePageBlock[];
  };
  export class PageListOrderedItemText extends VirtualClass<{
    num: string;
    text: TypeRichText;
  }> {
    num: string;
    text: TypeRichText;
  };
  export class PageListOrderedItemBlocks extends VirtualClass<{
    num: string;
    blocks: TypePageBlock[];
  }> {
    num: string;
    blocks: TypePageBlock[];
  };
  export class PageRelatedArticle extends VirtualClass<{
    // flags: null;
    url: string;
    webpageId: long;
    title?: string;
    description?: string;
    photoId?: long;
    author?: string;
    publishedDate?: int;
  }> {
    // flags: null;
    url: string;
    webpageId: long;
    title?: string;
    description?: string;
    photoId?: long;
    author?: string;
    publishedDate?: int;
  };
  export class Page extends VirtualClass<{
    // flags: null;
    part?: true;
    rtl?: true;
    v2?: true;
    url: string;
    blocks: TypePageBlock[];
    photos: TypePhoto[];
    documents: TypeDocument[];
  }> {
    // flags: null;
    part?: true;
    rtl?: true;
    v2?: true;
    url: string;
    blocks: TypePageBlock[];
    photos: TypePhoto[];
    documents: TypeDocument[];
  };
  export class PollAnswer extends VirtualClass<{
    text: string;
    option: bytes;
  }> {
    text: string;
    option: bytes;
  };
  export class Poll extends VirtualClass<{
    id: long;
    // flags: null;
    closed?: true;
    question: string;
    answers: TypePollAnswer[];
  }> {
    id: long;
    // flags: null;
    closed?: true;
    question: string;
    answers: TypePollAnswer[];
  };
  export class PollAnswerVoters extends VirtualClass<{
    // flags: null;
    chosen?: true;
    option: bytes;
    voters: int;
  }> {
    // flags: null;
    chosen?: true;
    option: bytes;
    voters: int;
  };
  export class PollResults extends VirtualClass<{
    // flags: null;
    min?: true;
    results?: TypePollAnswerVoters[];
    totalVoters?: int;
  }> {
    // flags: null;
    min?: true;
    results?: TypePollAnswerVoters[];
    totalVoters?: int;
  };
  export class ChatOnlines extends VirtualClass<{
    onlines: int;
  }> {
    onlines: int;
  };
  export class StatsURL extends VirtualClass<{
    url: string;
  }> {
    url: string;
  };
  export class ChatAdminRights extends VirtualClass<{
    // flags: null;
    changeInfo?: true;
    postMessages?: true;
    editMessages?: true;
    deleteMessages?: true;
    banUsers?: true;
    inviteUsers?: true;
    pinMessages?: true;
    addAdmins?: true;
  }> {
    // flags: null;
    changeInfo?: true;
    postMessages?: true;
    editMessages?: true;
    deleteMessages?: true;
    banUsers?: true;
    inviteUsers?: true;
    pinMessages?: true;
    addAdmins?: true;
  };
  export class ChatBannedRights extends VirtualClass<{
    // flags: null;
    viewMessages?: true;
    sendMessages?: true;
    sendMedia?: true;
    sendStickers?: true;
    sendGifs?: true;
    sendGames?: true;
    sendInline?: true;
    embedLinks?: true;
    sendPolls?: true;
    changeInfo?: true;
    inviteUsers?: true;
    pinMessages?: true;
    untilDate: int;
  }> {
    // flags: null;
    viewMessages?: true;
    sendMessages?: true;
    sendMedia?: true;
    sendStickers?: true;
    sendGifs?: true;
    sendGames?: true;
    sendInline?: true;
    embedLinks?: true;
    sendPolls?: true;
    changeInfo?: true;
    inviteUsers?: true;
    pinMessages?: true;
    untilDate: int;
  };
  export class InputWallPaper extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputWallPaperSlug extends VirtualClass<{
    slug: string;
  }> {
    slug: string;
  };
  export class CodeSettings extends VirtualClass<{
    // flags: null;
    allowFlashcall?: true;
    currentNumber?: true;
    allowAppHash?: true;
  }> {
    // flags: null;
    allowFlashcall?: true;
    currentNumber?: true;
    allowAppHash?: true;
  };
  export class WallPaperSettings extends VirtualClass<{
    // flags: null;
    blur?: true;
    motion?: true;
    backgroundColor?: int;
    intensity?: int;
  }> {
    // flags: null;
    blur?: true;
    motion?: true;
    backgroundColor?: int;
    intensity?: int;
  };
  export class AutoDownloadSettings extends VirtualClass<{
    // flags: null;
    disabled?: true;
    videoPreloadLarge?: true;
    audioPreloadNext?: true;
    phonecallsLessData?: true;
    photoSizeMax: int;
    videoSizeMax: int;
    fileSizeMax: int;
  }> {
    // flags: null;
    disabled?: true;
    videoPreloadLarge?: true;
    audioPreloadNext?: true;
    phonecallsLessData?: true;
    photoSizeMax: int;
    videoSizeMax: int;
    fileSizeMax: int;
  };
  export class EmojiKeyword extends VirtualClass<{
    keyword: string;
    emoticons: string[];
  }> {
    keyword: string;
    emoticons: string[];
  };
  export class EmojiKeywordDeleted extends VirtualClass<{
    keyword: string;
    emoticons: string[];
  }> {
    keyword: string;
    emoticons: string[];
  };
  export class EmojiKeywordsDifference extends VirtualClass<{
    langCode: string;
    fromVersion: int;
    version: int;
    keywords: TypeEmojiKeyword[];
  }> {
    langCode: string;
    fromVersion: int;
    version: int;
    keywords: TypeEmojiKeyword[];
  };
  export class EmojiURL extends VirtualClass<{
    url: string;
  }> {
    url: string;
  };
  export class EmojiLanguage extends VirtualClass<{
    langCode: string;
  }> {
    langCode: string;
  };
  export class FileLocationToBeDeprecated extends VirtualClass<{
    volumeId: long;
    localId: int;
  }> {
    volumeId: long;
    localId: int;
  };
  export class Folder extends VirtualClass<{
    // flags: null;
    autofillNewBroadcasts?: true;
    autofillPublicGroups?: true;
    autofillNewCorrespondents?: true;
    id: int;
    title: string;
    photo?: TypeChatPhoto;
  }> {
    // flags: null;
    autofillNewBroadcasts?: true;
    autofillPublicGroups?: true;
    autofillNewCorrespondents?: true;
    id: int;
    title: string;
    photo?: TypeChatPhoto;
  };
  export class InputFolderPeer extends VirtualClass<{
    peer: TypeInputPeer;
    folderId: int;
  }> {
    peer: TypeInputPeer;
    folderId: int;
  };
  export class FolderPeer extends VirtualClass<{
    peer: TypePeer;
    folderId: int;
  }> {
    peer: TypePeer;
    folderId: int;
  };
  export class UrlAuthResultRequest extends VirtualClass<{
    // flags: null;
    requestWriteAccess?: true;
    bot: TypeUser;
    domain: string;
  }> {
    // flags: null;
    requestWriteAccess?: true;
    bot: TypeUser;
    domain: string;
  };
  export class UrlAuthResultAccepted extends VirtualClass<{
    url: string;
  }> {
    url: string;
  };
  export class UrlAuthResultDefault extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelLocationEmpty extends VirtualClass<{
    
  }> {
    
  };
  export class ChannelLocation extends VirtualClass<{
    geoPoint: TypeGeoPoint;
    address: string;
  }> {
    geoPoint: TypeGeoPoint;
    address: string;
  };
  export class PeerLocated extends VirtualClass<{
    peer: TypePeer;
    expires: int;
    distance: int;
  }> {
    peer: TypePeer;
    expires: int;
    distance: int;
  };
  export class RestrictionReason extends VirtualClass<{
    platform: string;
    reason: string;
    text: string;
  }> {
    platform: string;
    reason: string;
    text: string;
  };
  export class InputTheme extends VirtualClass<{
    id: long;
    accessHash: long;
  }> {
    id: long;
    accessHash: long;
  };
  export class InputThemeSlug extends VirtualClass<{
    slug: string;
  }> {
    slug: string;
  };
  export class ThemeDocumentNotModified extends VirtualClass<{
    
  }> {
    
  };
  export class Theme extends VirtualClass<{
    // flags: null;
    creator?: true;
    default?: true;
    id: long;
    accessHash: long;
    slug: string;
    title: string;
    document?: TypeDocument;
    installsCount: int;
  }> {
    // flags: null;
    creator?: true;
    default?: true;
    id: long;
    accessHash: long;
    slug: string;
    title: string;
    document?: TypeDocument;
    installsCount: int;
  };
  export class ResPQ extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    pq: bytes;
    serverPublicKeyFingerprints: long[];
  }> {
    nonce: int128;
    serverNonce: int128;
    pq: bytes;
    serverPublicKeyFingerprints: long[];
  };
  export class PQInnerData extends VirtualClass<{
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
  }> {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
  };
  export class PQInnerDataDc extends VirtualClass<{
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
  }> {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
  };
  export class PQInnerDataTemp extends VirtualClass<{
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    expiresIn: int;
  }> {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    expiresIn: int;
  };
  export class PQInnerDataTempDc extends VirtualClass<{
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
    expiresIn: int;
  }> {
    pq: bytes;
    p: bytes;
    q: bytes;
    nonce: int128;
    serverNonce: int128;
    newNonce: int256;
    dc: int;
    expiresIn: int;
  };
  export class ServerDHParamsFail extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    newNonceHash: int128;
  }> {
    nonce: int128;
    serverNonce: int128;
    newNonceHash: int128;
  };
  export class ServerDHParamsOk extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    encryptedAnswer: bytes;
  }> {
    nonce: int128;
    serverNonce: int128;
    encryptedAnswer: bytes;
  };
  export class ServerDHInnerData extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    g: int;
    dhPrime: bytes;
    gA: bytes;
    serverTime: int;
  }> {
    nonce: int128;
    serverNonce: int128;
    g: int;
    dhPrime: bytes;
    gA: bytes;
    serverTime: int;
  };
  export class ClientDHInnerData extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    retryId: long;
    gB: bytes;
  }> {
    nonce: int128;
    serverNonce: int128;
    retryId: long;
    gB: bytes;
  };
  export class DhGenOk extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    newNonceHash1: int128;
  }> {
    nonce: int128;
    serverNonce: int128;
    newNonceHash1: int128;
  };
  export class DhGenRetry extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    newNonceHash2: int128;
  }> {
    nonce: int128;
    serverNonce: int128;
    newNonceHash2: int128;
  };
  export class DhGenFail extends VirtualClass<{
    nonce: int128;
    serverNonce: int128;
    newNonceHash3: int128;
  }> {
    nonce: int128;
    serverNonce: int128;
    newNonceHash3: int128;
  };
  export class DestroyAuthKeyOk extends VirtualClass<{
    
  }> {
    
  };
  export class DestroyAuthKeyNone extends VirtualClass<{
    
  }> {
    
  };
  export class DestroyAuthKeyFail extends VirtualClass<{
    
  }> {
    
  };
  export class MsgsAck extends VirtualClass<{
    msgIds: long[];
  }> {
    msgIds: long[];
  };
  export class BadMsgNotification extends VirtualClass<{
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
  }> {
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
  };
  export class BadServerSalt extends VirtualClass<{
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
    newServerSalt: long;
  }> {
    badMsgId: long;
    badMsgSeqno: int;
    errorCode: int;
    newServerSalt: long;
  };
  export class MsgsStateReq extends VirtualClass<{
    msgIds: long[];
  }> {
    msgIds: long[];
  };
  export class MsgsStateInfo extends VirtualClass<{
    reqMsgId: long;
    info: string;
  }> {
    reqMsgId: long;
    info: string;
  };
  export class MsgsAllInfo extends VirtualClass<{
    msgIds: long[];
    info: string;
  }> {
    msgIds: long[];
    info: string;
  };
  export class MsgDetailedInfo extends VirtualClass<{
    msgId: long;
    answerMsgId: long;
    bytes: int;
    status: int;
  }> {
    msgId: long;
    answerMsgId: long;
    bytes: int;
    status: int;
  };
  export class MsgNewDetailedInfo extends VirtualClass<{
    answerMsgId: long;
    bytes: int;
    status: int;
  }> {
    answerMsgId: long;
    bytes: int;
    status: int;
  };
  export class MsgResendReq extends VirtualClass<{
    msgIds: long[];
  }> {
    msgIds: long[];
  };
  export class RpcError extends VirtualClass<{
    errorCode: int;
    errorMessage: string;
  }> {
    errorCode: int;
    errorMessage: string;
  };
  export class RpcAnswerUnknown extends VirtualClass<{
    
  }> {
    
  };
  export class RpcAnswerDroppedRunning extends VirtualClass<{
    
  }> {
    
  };
  export class RpcAnswerDropped extends VirtualClass<{
    msgId: long;
    seqNo: int;
    bytes: int;
  }> {
    msgId: long;
    seqNo: int;
    bytes: int;
  };
  export class FutureSalt extends VirtualClass<{
    validSince: int;
    validUntil: int;
    salt: long;
  }> {
    validSince: int;
    validUntil: int;
    salt: long;
  };
  export class FutureSalts extends VirtualClass<{
    reqMsgId: long;
    now: int;
    salts: future_salt[];
  }> {
    reqMsgId: long;
    now: int;
    salts: future_salt[];
  };
  export class Pong extends VirtualClass<{
    msgId: long;
    pingId: long;
  }> {
    msgId: long;
    pingId: long;
  };
  export class DestroySessionOk extends VirtualClass<{
    sessionId: long;
  }> {
    sessionId: long;
  };
  export class DestroySessionNone extends VirtualClass<{
    sessionId: long;
  }> {
    sessionId: long;
  };
  export class NewSessionCreated extends VirtualClass<{
    firstMsgId: long;
    uniqueId: long;
    serverSalt: long;
  }> {
    firstMsgId: long;
    uniqueId: long;
    serverSalt: long;
  };
  export class HttpWait extends VirtualClass<{
    maxDelay: int;
    waitAfter: int;
    maxWait: int;
  }> {
    maxDelay: int;
    waitAfter: int;
    maxWait: int;
  };
  export class IpPort extends VirtualClass<{
    ipv4: int;
    port: int;
  }> {
    ipv4: int;
    port: int;
  };
  export class IpPortSecret extends VirtualClass<{
    ipv4: int;
    port: int;
    secret: bytes;
  }> {
    ipv4: int;
    port: int;
    secret: bytes;
  };
  export class AccessPointRule extends VirtualClass<{
    phonePrefixRules: string;
    dcId: int;
    ips: TypeIpPort[];
  }> {
    phonePrefixRules: string;
    dcId: int;
    ips: TypeIpPort[];
  };
  export class TlsClientHello extends VirtualClass<{
    blocks: TypeTlsBlock[];
  }> {
    blocks: TypeTlsBlock[];
  };
  export class TlsBlockString extends VirtualClass<{
    data: string;
  }> {
    data: string;
  };
  export class TlsBlockRandom extends VirtualClass<{
    length: int;
  }> {
    length: int;
  };
  export class TlsBlockZero extends VirtualClass<{
    length: int;
  }> {
    length: int;
  };
  export class TlsBlockDomain extends VirtualClass<{
    
  }> {
    
  };
  export class TlsBlockGrease extends VirtualClass<{
    seed: int;
  }> {
    seed: int;
  };
  export class TlsBlockScope extends VirtualClass<{
    entries: TypeTlsBlock[];
  }> {
    entries: TypeTlsBlock[];
  };
  

  export namespace storage {
    export class FileUnknown extends VirtualClass<{
      
    }> {
      
    };
    export class FilePartial extends VirtualClass<{
      
    }> {
      
    };
    export class FileJpeg extends VirtualClass<{
      
    }> {
      
    };
    export class FileGif extends VirtualClass<{
      
    }> {
      
    };
    export class FilePng extends VirtualClass<{
      
    }> {
      
    };
    export class FilePdf extends VirtualClass<{
      
    }> {
      
    };
    export class FileMp3 extends VirtualClass<{
      
    }> {
      
    };
    export class FileMov extends VirtualClass<{
      
    }> {
      
    };
    export class FileMp4 extends VirtualClass<{
      
    }> {
      
    };
    export class FileWebp extends VirtualClass<{
      
    }> {
      
    };
  }

  export namespace auth {
    export class SentCode extends VirtualClass<{
      // flags: null;
      type: auth.TypeSentCodeType;
      phoneCodeHash: string;
      nextType?: auth.TypeCodeType;
      timeout?: int;
    }> {
      // flags: null;
      type: auth.TypeSentCodeType;
      phoneCodeHash: string;
      nextType?: auth.TypeCodeType;
      timeout?: int;
    };
    export class Authorization extends VirtualClass<{
      // flags: null;
      tmpSessions?: int;
      user: TypeUser;
    }> {
      // flags: null;
      tmpSessions?: int;
      user: TypeUser;
    };
    export class AuthorizationSignUpRequired extends VirtualClass<{
      // flags: null;
      termsOfService?: help.TypeTermsOfService;
    }> {
      // flags: null;
      termsOfService?: help.TypeTermsOfService;
    };
    export class ExportedAuthorization extends VirtualClass<{
      id: int;
      bytes: bytes;
    }> {
      id: int;
      bytes: bytes;
    };
    export class PasswordRecovery extends VirtualClass<{
      emailPattern: string;
    }> {
      emailPattern: string;
    };
    export class CodeTypeSms extends VirtualClass<{
      
    }> {
      
    };
    export class CodeTypeCall extends VirtualClass<{
      
    }> {
      
    };
    export class CodeTypeFlashCall extends VirtualClass<{
      
    }> {
      
    };
    export class SentCodeTypeApp extends VirtualClass<{
      length: int;
    }> {
      length: int;
    };
    export class SentCodeTypeSms extends VirtualClass<{
      length: int;
    }> {
      length: int;
    };
    export class SentCodeTypeCall extends VirtualClass<{
      length: int;
    }> {
      length: int;
    };
    export class SentCodeTypeFlashCall extends VirtualClass<{
      pattern: string;
    }> {
      pattern: string;
    };
  }

  export namespace contacts {
    export class ContactsNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class Contacts extends VirtualClass<{
      contacts: TypeContact[];
      savedCount: int;
      users: TypeUser[];
    }> {
      contacts: TypeContact[];
      savedCount: int;
      users: TypeUser[];
    };
    export class ImportedContacts extends VirtualClass<{
      imported: TypeImportedContact[];
      popularInvites: TypePopularContact[];
      retryContacts: long[];
      users: TypeUser[];
    }> {
      imported: TypeImportedContact[];
      popularInvites: TypePopularContact[];
      retryContacts: long[];
      users: TypeUser[];
    };
    export class Blocked extends VirtualClass<{
      blocked: TypeContactBlocked[];
      users: TypeUser[];
    }> {
      blocked: TypeContactBlocked[];
      users: TypeUser[];
    };
    export class BlockedSlice extends VirtualClass<{
      count: int;
      blocked: TypeContactBlocked[];
      users: TypeUser[];
    }> {
      count: int;
      blocked: TypeContactBlocked[];
      users: TypeUser[];
    };
    export class Found extends VirtualClass<{
      myResults: TypePeer[];
      results: TypePeer[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      myResults: TypePeer[];
      results: TypePeer[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class ResolvedPeer extends VirtualClass<{
      peer: TypePeer;
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      peer: TypePeer;
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class TopPeersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class TopPeers extends VirtualClass<{
      categories: TypeTopPeerCategoryPeers[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      categories: TypeTopPeerCategoryPeers[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class TopPeersDisabled extends VirtualClass<{
      
    }> {
      
    };
  }

  export namespace messages {
    export class Dialogs extends VirtualClass<{
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class DialogsSlice extends VirtualClass<{
      count: int;
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      count: int;
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class DialogsNotModified extends VirtualClass<{
      count: int;
    }> {
      count: int;
    };
    export class Messages extends VirtualClass<{
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class MessagesSlice extends VirtualClass<{
      // flags: null;
      inexact?: true;
      count: int;
      nextRate?: int;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      // flags: null;
      inexact?: true;
      count: int;
      nextRate?: int;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class ChannelMessages extends VirtualClass<{
      // flags: null;
      inexact?: true;
      pts: int;
      count: int;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      // flags: null;
      inexact?: true;
      pts: int;
      count: int;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class MessagesNotModified extends VirtualClass<{
      count: int;
    }> {
      count: int;
    };
    export class Chats extends VirtualClass<{
      chats: TypeChat[];
    }> {
      chats: TypeChat[];
    };
    export class ChatsSlice extends VirtualClass<{
      count: int;
      chats: TypeChat[];
    }> {
      count: int;
      chats: TypeChat[];
    };
    export class ChatFull extends VirtualClass<{
      fullChat: TypeChatFull;
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      fullChat: TypeChatFull;
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class AffectedHistory extends VirtualClass<{
      pts: int;
      ptsCount: int;
      offset: int;
    }> {
      pts: int;
      ptsCount: int;
      offset: int;
    };
    export class DhConfigNotModified extends VirtualClass<{
      random: bytes;
    }> {
      random: bytes;
    };
    export class DhConfig extends VirtualClass<{
      g: int;
      p: bytes;
      version: int;
      random: bytes;
    }> {
      g: int;
      p: bytes;
      version: int;
      random: bytes;
    };
    export class SentEncryptedMessage extends VirtualClass<{
      date: int;
    }> {
      date: int;
    };
    export class SentEncryptedFile extends VirtualClass<{
      date: int;
      file: TypeEncryptedFile;
    }> {
      date: int;
      file: TypeEncryptedFile;
    };
    export class StickersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class Stickers extends VirtualClass<{
      hash: int;
      stickers: TypeDocument[];
    }> {
      hash: int;
      stickers: TypeDocument[];
    };
    export class AllStickersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class AllStickers extends VirtualClass<{
      hash: int;
      sets: TypeStickerSet[];
    }> {
      hash: int;
      sets: TypeStickerSet[];
    };
    export class AffectedMessages extends VirtualClass<{
      pts: int;
      ptsCount: int;
    }> {
      pts: int;
      ptsCount: int;
    };
    export class StickerSet extends VirtualClass<{
      set: TypeStickerSet;
      packs: TypeStickerPack[];
      documents: TypeDocument[];
    }> {
      set: TypeStickerSet;
      packs: TypeStickerPack[];
      documents: TypeDocument[];
    };
    export class FoundGifs extends VirtualClass<{
      nextOffset: int;
      results: TypeFoundGif[];
    }> {
      nextOffset: int;
      results: TypeFoundGif[];
    };
    export class SavedGifsNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class SavedGifs extends VirtualClass<{
      hash: int;
      gifs: TypeDocument[];
    }> {
      hash: int;
      gifs: TypeDocument[];
    };
    export class BotResults extends VirtualClass<{
      // flags: null;
      gallery?: true;
      queryId: long;
      nextOffset?: string;
      switchPm?: TypeInlineBotSwitchPM;
      results: TypeBotInlineResult[];
      cacheTime: int;
      users: TypeUser[];
    }> {
      // flags: null;
      gallery?: true;
      queryId: long;
      nextOffset?: string;
      switchPm?: TypeInlineBotSwitchPM;
      results: TypeBotInlineResult[];
      cacheTime: int;
      users: TypeUser[];
    };
    export class BotCallbackAnswer extends VirtualClass<{
      // flags: null;
      alert?: true;
      hasUrl?: true;
      nativeUi?: true;
      message?: string;
      url?: string;
      cacheTime: int;
    }> {
      // flags: null;
      alert?: true;
      hasUrl?: true;
      nativeUi?: true;
      message?: string;
      url?: string;
      cacheTime: int;
    };
    export class MessageEditData extends VirtualClass<{
      // flags: null;
      caption?: true;
    }> {
      // flags: null;
      caption?: true;
    };
    export class PeerDialogs extends VirtualClass<{
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
      state: updates.TypeState;
    }> {
      dialogs: TypeDialog[];
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
      state: updates.TypeState;
    };
    export class FeaturedStickersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class FeaturedStickers extends VirtualClass<{
      hash: int;
      sets: TypeStickerSetCovered[];
      unread: long[];
    }> {
      hash: int;
      sets: TypeStickerSetCovered[];
      unread: long[];
    };
    export class RecentStickersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class RecentStickers extends VirtualClass<{
      hash: int;
      packs: TypeStickerPack[];
      stickers: TypeDocument[];
      dates: int[];
    }> {
      hash: int;
      packs: TypeStickerPack[];
      stickers: TypeDocument[];
      dates: int[];
    };
    export class ArchivedStickers extends VirtualClass<{
      count: int;
      sets: TypeStickerSetCovered[];
    }> {
      count: int;
      sets: TypeStickerSetCovered[];
    };
    export class StickerSetInstallResultSuccess extends VirtualClass<{
      
    }> {
      
    };
    export class StickerSetInstallResultArchive extends VirtualClass<{
      sets: TypeStickerSetCovered[];
    }> {
      sets: TypeStickerSetCovered[];
    };
    export class HighScores extends VirtualClass<{
      scores: TypeHighScore[];
      users: TypeUser[];
    }> {
      scores: TypeHighScore[];
      users: TypeUser[];
    };
    export class FavedStickersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class FavedStickers extends VirtualClass<{
      hash: int;
      packs: TypeStickerPack[];
      stickers: TypeDocument[];
    }> {
      hash: int;
      packs: TypeStickerPack[];
      stickers: TypeDocument[];
    };
    export class FoundStickerSetsNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class FoundStickerSets extends VirtualClass<{
      hash: int;
      sets: TypeStickerSetCovered[];
    }> {
      hash: int;
      sets: TypeStickerSetCovered[];
    };
    export class SearchCounter extends VirtualClass<{
      // flags: null;
      inexact?: true;
      filter: TypeMessagesFilter;
      count: int;
    }> {
      // flags: null;
      inexact?: true;
      filter: TypeMessagesFilter;
      count: int;
    };
  }

  export namespace updates {
    export class State extends VirtualClass<{
      pts: int;
      qts: int;
      date: int;
      seq: int;
      unreadCount: int;
    }> {
      pts: int;
      qts: int;
      date: int;
      seq: int;
      unreadCount: int;
    };
    export class DifferenceEmpty extends VirtualClass<{
      date: int;
      seq: int;
    }> {
      date: int;
      seq: int;
    };
    export class Difference extends VirtualClass<{
      newMessages: TypeMessage[];
      newEncryptedMessages: TypeEncryptedMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
      state: updates.TypeState;
    }> {
      newMessages: TypeMessage[];
      newEncryptedMessages: TypeEncryptedMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
      state: updates.TypeState;
    };
    export class DifferenceSlice extends VirtualClass<{
      newMessages: TypeMessage[];
      newEncryptedMessages: TypeEncryptedMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
      intermediateState: updates.TypeState;
    }> {
      newMessages: TypeMessage[];
      newEncryptedMessages: TypeEncryptedMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
      intermediateState: updates.TypeState;
    };
    export class DifferenceTooLong extends VirtualClass<{
      pts: int;
    }> {
      pts: int;
    };
    export class ChannelDifferenceEmpty extends VirtualClass<{
      // flags: null;
      final?: true;
      pts: int;
      timeout?: int;
    }> {
      // flags: null;
      final?: true;
      pts: int;
      timeout?: int;
    };
    export class ChannelDifferenceTooLong extends VirtualClass<{
      // flags: null;
      final?: true;
      timeout?: int;
      dialog: TypeDialog;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      // flags: null;
      final?: true;
      timeout?: int;
      dialog: TypeDialog;
      messages: TypeMessage[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class ChannelDifference extends VirtualClass<{
      // flags: null;
      final?: true;
      pts: int;
      timeout?: int;
      newMessages: TypeMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      // flags: null;
      final?: true;
      pts: int;
      timeout?: int;
      newMessages: TypeMessage[];
      otherUpdates: TypeUpdate[];
      chats: TypeChat[];
      users: TypeUser[];
    };
  }

  export namespace photos {
    export class Photos extends VirtualClass<{
      photos: TypePhoto[];
      users: TypeUser[];
    }> {
      photos: TypePhoto[];
      users: TypeUser[];
    };
    export class PhotosSlice extends VirtualClass<{
      count: int;
      photos: TypePhoto[];
      users: TypeUser[];
    }> {
      count: int;
      photos: TypePhoto[];
      users: TypeUser[];
    };
    export class Photo extends VirtualClass<{
      photo: TypePhoto;
      users: TypeUser[];
    }> {
      photo: TypePhoto;
      users: TypeUser[];
    };
  }

  export namespace upload {
    export class File extends VirtualClass<{
      type: storage.TypeFileType;
      mtime: int;
      bytes: bytes;
    }> {
      type: storage.TypeFileType;
      mtime: int;
      bytes: bytes;
    };
    export class FileCdnRedirect extends VirtualClass<{
      dcId: int;
      fileToken: bytes;
      encryptionKey: bytes;
      encryptionIv: bytes;
      fileHashes: TypeFileHash[];
    }> {
      dcId: int;
      fileToken: bytes;
      encryptionKey: bytes;
      encryptionIv: bytes;
      fileHashes: TypeFileHash[];
    };
    export class WebFile extends VirtualClass<{
      size: int;
      mimeType: string;
      fileType: storage.TypeFileType;
      mtime: int;
      bytes: bytes;
    }> {
      size: int;
      mimeType: string;
      fileType: storage.TypeFileType;
      mtime: int;
      bytes: bytes;
    };
    export class CdnFileReuploadNeeded extends VirtualClass<{
      requestToken: bytes;
    }> {
      requestToken: bytes;
    };
    export class CdnFile extends VirtualClass<{
      bytes: bytes;
    }> {
      bytes: bytes;
    };
  }

  export namespace help {
    export class AppUpdate extends VirtualClass<{
      // flags: null;
      canNotSkip?: true;
      id: int;
      version: string;
      text: string;
      entities: TypeMessageEntity[];
      document?: TypeDocument;
      url?: string;
    }> {
      // flags: null;
      canNotSkip?: true;
      id: int;
      version: string;
      text: string;
      entities: TypeMessageEntity[];
      document?: TypeDocument;
      url?: string;
    };
    export class NoAppUpdate extends VirtualClass<{
      
    }> {
      
    };
    export class InviteText extends VirtualClass<{
      message: string;
    }> {
      message: string;
    };
    export class Support extends VirtualClass<{
      phoneNumber: string;
      user: TypeUser;
    }> {
      phoneNumber: string;
      user: TypeUser;
    };
    export class TermsOfService extends VirtualClass<{
      // flags: null;
      popup?: true;
      id: TypeDataJSON;
      text: string;
      entities: TypeMessageEntity[];
      minAgeConfirm?: int;
    }> {
      // flags: null;
      popup?: true;
      id: TypeDataJSON;
      text: string;
      entities: TypeMessageEntity[];
      minAgeConfirm?: int;
    };
    export class RecentMeUrls extends VirtualClass<{
      urls: TypeRecentMeUrl[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      urls: TypeRecentMeUrl[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class ProxyDataEmpty extends VirtualClass<{
      expires: int;
    }> {
      expires: int;
    };
    export class ProxyDataPromo extends VirtualClass<{
      expires: int;
      peer: TypePeer;
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      expires: int;
      peer: TypePeer;
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class TermsOfServiceUpdateEmpty extends VirtualClass<{
      expires: int;
    }> {
      expires: int;
    };
    export class TermsOfServiceUpdate extends VirtualClass<{
      expires: int;
      termsOfService: help.TypeTermsOfService;
    }> {
      expires: int;
      termsOfService: help.TypeTermsOfService;
    };
    export class DeepLinkInfoEmpty extends VirtualClass<{
      
    }> {
      
    };
    export class DeepLinkInfo extends VirtualClass<{
      // flags: null;
      updateApp?: true;
      message: string;
      entities?: TypeMessageEntity[];
    }> {
      // flags: null;
      updateApp?: true;
      message: string;
      entities?: TypeMessageEntity[];
    };
    export class PassportConfigNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class PassportConfig extends VirtualClass<{
      hash: int;
      countriesLangs: TypeDataJSON;
    }> {
      hash: int;
      countriesLangs: TypeDataJSON;
    };
    export class SupportName extends VirtualClass<{
      name: string;
    }> {
      name: string;
    };
    export class UserInfoEmpty extends VirtualClass<{
      
    }> {
      
    };
    export class UserInfo extends VirtualClass<{
      message: string;
      entities: TypeMessageEntity[];
      author: string;
      date: int;
    }> {
      message: string;
      entities: TypeMessageEntity[];
      author: string;
      date: int;
    };
    export class ConfigSimple extends VirtualClass<{
      date: int;
      expires: int;
      rules: TypeAccessPointRule[];
    }> {
      date: int;
      expires: int;
      rules: TypeAccessPointRule[];
    };
  }

  export namespace account {
    export class PrivacyRules extends VirtualClass<{
      rules: TypePrivacyRule[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      rules: TypePrivacyRule[];
      chats: TypeChat[];
      users: TypeUser[];
    };
    export class Authorizations extends VirtualClass<{
      authorizations: TypeAuthorization[];
    }> {
      authorizations: TypeAuthorization[];
    };
    export class Password extends VirtualClass<{
      // flags: null;
      hasRecovery?: true;
      hasSecureValues?: true;
      hasPassword?: true;
      currentAlgo?: TypePasswordKdfAlgo;
      srp_B?: bytes;
      srpId?: long;
      hint?: string;
      emailUnconfirmedPattern?: string;
      newAlgo: TypePasswordKdfAlgo;
      newSecureAlgo: TypeSecurePasswordKdfAlgo;
      secureRandom: bytes;
    }> {
      // flags: null;
      hasRecovery?: true;
      hasSecureValues?: true;
      hasPassword?: true;
      currentAlgo?: TypePasswordKdfAlgo;
      srp_B?: bytes;
      srpId?: long;
      hint?: string;
      emailUnconfirmedPattern?: string;
      newAlgo: TypePasswordKdfAlgo;
      newSecureAlgo: TypeSecurePasswordKdfAlgo;
      secureRandom: bytes;
    };
    export class PasswordSettings extends VirtualClass<{
      // flags: null;
      email?: string;
      secureSettings?: TypeSecureSecretSettings;
    }> {
      // flags: null;
      email?: string;
      secureSettings?: TypeSecureSecretSettings;
    };
    export class PasswordInputSettings extends VirtualClass<{
      // flags: null;
      newAlgo?: TypePasswordKdfAlgo;
      newPasswordHash?: bytes;
      hint?: string;
      email?: string;
      newSecureSettings?: TypeSecureSecretSettings;
    }> {
      // flags: null;
      newAlgo?: TypePasswordKdfAlgo;
      newPasswordHash?: bytes;
      hint?: string;
      email?: string;
      newSecureSettings?: TypeSecureSecretSettings;
    };
    export class TmpPassword extends VirtualClass<{
      tmpPassword: bytes;
      validUntil: int;
    }> {
      tmpPassword: bytes;
      validUntil: int;
    };
    export class WebAuthorizations extends VirtualClass<{
      authorizations: TypeWebAuthorization[];
      users: TypeUser[];
    }> {
      authorizations: TypeWebAuthorization[];
      users: TypeUser[];
    };
    export class AuthorizationForm extends VirtualClass<{
      // flags: null;
      requiredTypes: TypeSecureRequiredType[];
      values: TypeSecureValue[];
      errors: TypeSecureValueError[];
      users: TypeUser[];
      privacyPolicyUrl?: string;
    }> {
      // flags: null;
      requiredTypes: TypeSecureRequiredType[];
      values: TypeSecureValue[];
      errors: TypeSecureValueError[];
      users: TypeUser[];
      privacyPolicyUrl?: string;
    };
    export class SentEmailCode extends VirtualClass<{
      emailPattern: string;
      length: int;
    }> {
      emailPattern: string;
      length: int;
    };
    export class Takeout extends VirtualClass<{
      id: long;
    }> {
      id: long;
    };
    export class WallPapersNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class WallPapers extends VirtualClass<{
      hash: int;
      wallpapers: TypeWallPaper[];
    }> {
      hash: int;
      wallpapers: TypeWallPaper[];
    };
    export class AutoDownloadSettings extends VirtualClass<{
      low: TypeAutoDownloadSettings;
      medium: TypeAutoDownloadSettings;
      high: TypeAutoDownloadSettings;
    }> {
      low: TypeAutoDownloadSettings;
      medium: TypeAutoDownloadSettings;
      high: TypeAutoDownloadSettings;
    };
    export class ThemesNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class Themes extends VirtualClass<{
      hash: int;
      themes: TypeTheme[];
    }> {
      hash: int;
      themes: TypeTheme[];
    };
  }

  export namespace channels {
    export class ChannelParticipants extends VirtualClass<{
      count: int;
      participants: TypeChannelParticipant[];
      users: TypeUser[];
    }> {
      count: int;
      participants: TypeChannelParticipant[];
      users: TypeUser[];
    };
    export class ChannelParticipantsNotModified extends VirtualClass<{
      
    }> {
      
    };
    export class ChannelParticipant extends VirtualClass<{
      participant: TypeChannelParticipant;
      users: TypeUser[];
    }> {
      participant: TypeChannelParticipant;
      users: TypeUser[];
    };
    export class AdminLogResults extends VirtualClass<{
      events: TypeChannelAdminLogEvent[];
      chats: TypeChat[];
      users: TypeUser[];
    }> {
      events: TypeChannelAdminLogEvent[];
      chats: TypeChat[];
      users: TypeUser[];
    };
  }

  export namespace payments {
    export class PaymentForm extends VirtualClass<{
      // flags: null;
      canSaveCredentials?: true;
      passwordMissing?: true;
      botId: int;
      invoice: TypeInvoice;
      providerId: int;
      url: string;
      nativeProvider?: string;
      nativeParams?: TypeDataJSON;
      savedInfo?: TypePaymentRequestedInfo;
      savedCredentials?: TypePaymentSavedCredentials;
      users: TypeUser[];
    }> {
      // flags: null;
      canSaveCredentials?: true;
      passwordMissing?: true;
      botId: int;
      invoice: TypeInvoice;
      providerId: int;
      url: string;
      nativeProvider?: string;
      nativeParams?: TypeDataJSON;
      savedInfo?: TypePaymentRequestedInfo;
      savedCredentials?: TypePaymentSavedCredentials;
      users: TypeUser[];
    };
    export class ValidatedRequestedInfo extends VirtualClass<{
      // flags: null;
      id?: string;
      shippingOptions?: TypeShippingOption[];
    }> {
      // flags: null;
      id?: string;
      shippingOptions?: TypeShippingOption[];
    };
    export class PaymentResult extends VirtualClass<{
      updates: TypeUpdates;
    }> {
      updates: TypeUpdates;
    };
    export class PaymentVerificationNeeded extends VirtualClass<{
      url: string;
    }> {
      url: string;
    };
    export class PaymentReceipt extends VirtualClass<{
      // flags: null;
      date: int;
      botId: int;
      invoice: TypeInvoice;
      providerId: int;
      info?: TypePaymentRequestedInfo;
      shipping?: TypeShippingOption;
      currency: string;
      totalAmount: long;
      credentialsTitle: string;
      users: TypeUser[];
    }> {
      // flags: null;
      date: int;
      botId: int;
      invoice: TypeInvoice;
      providerId: int;
      info?: TypePaymentRequestedInfo;
      shipping?: TypeShippingOption;
      currency: string;
      totalAmount: long;
      credentialsTitle: string;
      users: TypeUser[];
    };
    export class SavedInfo extends VirtualClass<{
      // flags: null;
      hasSavedCredentials?: true;
      savedInfo?: TypePaymentRequestedInfo;
    }> {
      // flags: null;
      hasSavedCredentials?: true;
      savedInfo?: TypePaymentRequestedInfo;
    };
  }

  export namespace phone {
    export class PhoneCall extends VirtualClass<{
      phoneCall: TypePhoneCall;
      users: TypeUser[];
    }> {
      phoneCall: TypePhoneCall;
      users: TypeUser[];
    };
  }

  export class InvokeAfterMsg extends Request<Partial<{
    msgId: long;
    query: X;
  }>, X> {
    msgId: long;
    query: X;
  };
  export class InvokeAfterMsgs extends Request<Partial<{
    msgIds: long[];
    query: X;
  }>, X> {
    msgIds: long[];
    query: X;
  };
  export class InitConnection extends Request<Partial<{
    // flags: null;
    apiId: int;
    deviceModel: string;
    systemVersion: string;
    appVersion: string;
    systemLangCode: string;
    langPack: string;
    langCode: string;
    proxy?: TypeInputClientProxy;
    query: X;
  }>, X> {
    // flags: null;
    apiId: int;
    deviceModel: string;
    systemVersion: string;
    appVersion: string;
    systemLangCode: string;
    langPack: string;
    langCode: string;
    proxy?: TypeInputClientProxy;
    query: X;
  };
  export class InvokeWithLayer extends Request<Partial<{
    layer: int;
    query: X;
  }>, X> {
    layer: int;
    query: X;
  };
  export class InvokeWithoutUpdates extends Request<Partial<{
    query: X;
  }>, X> {
    query: X;
  };
  export class InvokeWithMessagesRange extends Request<Partial<{
    range: TypeMessageRange;
    query: X;
  }>, X> {
    range: TypeMessageRange;
    query: X;
  };
  export class InvokeWithTakeout extends Request<Partial<{
    takeoutId: long;
    query: X;
  }>, X> {
    takeoutId: long;
    query: X;
  };
  export class ReqPq extends Request<Partial<{
    nonce: int128;
  }>, TypeResPQ> {
    nonce: int128;
  };
  export class ReqPqMulti extends Request<Partial<{
    nonce: int128;
  }>, TypeResPQ> {
    nonce: int128;
  };
  export class ReqDHParams extends Request<Partial<{
    nonce: int128;
    serverNonce: int128;
    p: bytes;
    q: bytes;
    publicKeyFingerprint: long;
    encryptedData: bytes;
  }>, TypeServer_DH_Params> {
    nonce: int128;
    serverNonce: int128;
    p: bytes;
    q: bytes;
    publicKeyFingerprint: long;
    encryptedData: bytes;
  };
  export class SetClientDHParams extends Request<Partial<{
    nonce: int128;
    serverNonce: int128;
    encryptedData: bytes;
  }>, TypeSet_client_DH_params_answer> {
    nonce: int128;
    serverNonce: int128;
    encryptedData: bytes;
  };
  export class DestroyAuthKey extends Request<Partial<{
    
  }>, TypeDestroyAuthKeyRes> {
    
  };
  export class RpcDropAnswer extends Request<Partial<{
    reqMsgId: long;
  }>, TypeRpcDropAnswer> {
    reqMsgId: long;
  };
  export class GetFutureSalts extends Request<Partial<{
    num: int;
  }>, TypeFutureSalts> {
    num: int;
  };
  export class Ping extends Request<Partial<{
    pingId: long;
  }>, TypePong> {
    pingId: long;
  };
  export class PingDelayDisconnect extends Request<Partial<{
    pingId: long;
    disconnectDelay: int;
  }>, TypePong> {
    pingId: long;
    disconnectDelay: int;
  };
  export class DestroySession extends Request<Partial<{
    sessionId: long;
  }>, TypeDestroySessionRes> {
    sessionId: long;
  };
  

  export namespace auth {
    export class SendCode extends Request<Partial<{
      phoneNumber: string;
      apiId: int;
      apiHash: string;
      settings: TypeCodeSettings;
    }>, auth.TypeSentCode> {
      phoneNumber: string;
      apiId: int;
      apiHash: string;
      settings: TypeCodeSettings;
    };
    export class SignUp extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
      firstName: string;
      lastName: string;
    }>, auth.TypeAuthorization> {
      phoneNumber: string;
      phoneCodeHash: string;
      firstName: string;
      lastName: string;
    };
    export class SignIn extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    }>, auth.TypeAuthorization> {
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    };
    export class LogOut extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class ResetAuthorizations extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class ExportAuthorization extends Request<Partial<{
      dcId: int;
    }>, auth.TypeExportedAuthorization> {
      dcId: int;
    };
    export class ImportAuthorization extends Request<Partial<{
      id: int;
      bytes: bytes;
    }>, auth.TypeAuthorization> {
      id: int;
      bytes: bytes;
    };
    export class BindTempAuthKey extends Request<Partial<{
      permAuthKeyId: long;
      nonce: long;
      expiresAt: int;
      encryptedMessage: bytes;
    }>, Bool> {
      permAuthKeyId: long;
      nonce: long;
      expiresAt: int;
      encryptedMessage: bytes;
    };
    export class ImportBotAuthorization extends Request<Partial<{
      // flags: int;
      apiId: int;
      apiHash: string;
      botAuthToken: string;
    }>, auth.TypeAuthorization> {
      // flags: int;
      apiId: int;
      apiHash: string;
      botAuthToken: string;
    };
    export class CheckPassword extends Request<Partial<{
      password: TypeInputCheckPasswordSRP;
    }>, auth.TypeAuthorization> {
      password: TypeInputCheckPasswordSRP;
    };
    export class RequestPasswordRecovery extends Request<Partial<{
      
    }>, auth.TypePasswordRecovery> {
      
    };
    export class RecoverPassword extends Request<Partial<{
      code: string;
    }>, auth.TypeAuthorization> {
      code: string;
    };
    export class ResendCode extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
    }>, auth.TypeSentCode> {
      phoneNumber: string;
      phoneCodeHash: string;
    };
    export class CancelCode extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
    }>, Bool> {
      phoneNumber: string;
      phoneCodeHash: string;
    };
    export class DropTempAuthKeys extends Request<Partial<{
      exceptAuthKeys: long[];
    }>, Bool> {
      exceptAuthKeys: long[];
    };
  }

  export namespace account {
    export class RegisterDevice extends Request<Partial<{
      // flags: null;
      noMuted?: true;
      tokenType: int;
      token: string;
      appSandbox: Bool;
      secret: bytes;
      otherUids: int[];
    }>, Bool> {
      // flags: null;
      noMuted?: true;
      tokenType: int;
      token: string;
      appSandbox: Bool;
      secret: bytes;
      otherUids: int[];
    };
    export class UnregisterDevice extends Request<Partial<{
      tokenType: int;
      token: string;
      otherUids: int[];
    }>, Bool> {
      tokenType: int;
      token: string;
      otherUids: int[];
    };
    export class UpdateNotifySettings extends Request<Partial<{
      peer: TypeInputNotifyPeer;
      settings: TypeInputPeerNotifySettings;
    }>, Bool> {
      peer: TypeInputNotifyPeer;
      settings: TypeInputPeerNotifySettings;
    };
    export class GetNotifySettings extends Request<Partial<{
      peer: TypeInputNotifyPeer;
    }>, TypePeerNotifySettings> {
      peer: TypeInputNotifyPeer;
    };
    export class ResetNotifySettings extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class UpdateProfile extends Request<Partial<{
      // flags: null;
      firstName?: string;
      lastName?: string;
      about?: string;
    }>, TypeUser> {
      // flags: null;
      firstName?: string;
      lastName?: string;
      about?: string;
    };
    export class UpdateStatus extends Request<Partial<{
      offline: Bool;
    }>, Bool> {
      offline: Bool;
    };
    export class GetWallPapers extends Request<Partial<{
      hash: int;
    }>, account.TypeWallPapers> {
      hash: int;
    };
    export class ReportPeer extends Request<Partial<{
      peer: TypeInputPeer;
      reason: TypeReportReason;
    }>, Bool> {
      peer: TypeInputPeer;
      reason: TypeReportReason;
    };
    export class CheckUsername extends Request<Partial<{
      username: string;
    }>, Bool> {
      username: string;
    };
    export class UpdateUsername extends Request<Partial<{
      username: string;
    }>, TypeUser> {
      username: string;
    };
    export class GetPrivacy extends Request<Partial<{
      key: TypeInputPrivacyKey;
    }>, account.TypePrivacyRules> {
      key: TypeInputPrivacyKey;
    };
    export class SetPrivacy extends Request<Partial<{
      key: TypeInputPrivacyKey;
      rules: TypeInputPrivacyRule[];
    }>, account.TypePrivacyRules> {
      key: TypeInputPrivacyKey;
      rules: TypeInputPrivacyRule[];
    };
    export class DeleteAccount extends Request<Partial<{
      reason: string;
    }>, Bool> {
      reason: string;
    };
    export class GetAccountTTL extends Request<Partial<{
      
    }>, TypeAccountDaysTTL> {
      
    };
    export class SetAccountTTL extends Request<Partial<{
      ttl: TypeAccountDaysTTL;
    }>, Bool> {
      ttl: TypeAccountDaysTTL;
    };
    export class SendChangePhoneCode extends Request<Partial<{
      phoneNumber: string;
      settings: TypeCodeSettings;
    }>, auth.TypeSentCode> {
      phoneNumber: string;
      settings: TypeCodeSettings;
    };
    export class ChangePhone extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    }>, TypeUser> {
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    };
    export class UpdateDeviceLocked extends Request<Partial<{
      period: int;
    }>, Bool> {
      period: int;
    };
    export class GetAuthorizations extends Request<Partial<{
      
    }>, account.TypeAuthorizations> {
      
    };
    export class ResetAuthorization extends Request<Partial<{
      hash: long;
    }>, Bool> {
      hash: long;
    };
    export class GetPassword extends Request<Partial<{
      
    }>, account.TypePassword> {
      
    };
    export class GetPasswordSettings extends Request<Partial<{
      password: TypeInputCheckPasswordSRP;
    }>, account.TypePasswordSettings> {
      password: TypeInputCheckPasswordSRP;
    };
    export class UpdatePasswordSettings extends Request<Partial<{
      password: TypeInputCheckPasswordSRP;
      newSettings: account.TypePasswordInputSettings;
    }>, Bool> {
      password: TypeInputCheckPasswordSRP;
      newSettings: account.TypePasswordInputSettings;
    };
    export class SendConfirmPhoneCode extends Request<Partial<{
      hash: string;
      settings: TypeCodeSettings;
    }>, auth.TypeSentCode> {
      hash: string;
      settings: TypeCodeSettings;
    };
    export class ConfirmPhone extends Request<Partial<{
      phoneCodeHash: string;
      phoneCode: string;
    }>, Bool> {
      phoneCodeHash: string;
      phoneCode: string;
    };
    export class GetTmpPassword extends Request<Partial<{
      password: TypeInputCheckPasswordSRP;
      period: int;
    }>, account.TypeTmpPassword> {
      password: TypeInputCheckPasswordSRP;
      period: int;
    };
    export class GetWebAuthorizations extends Request<Partial<{
      
    }>, account.TypeWebAuthorizations> {
      
    };
    export class ResetWebAuthorization extends Request<Partial<{
      hash: long;
    }>, Bool> {
      hash: long;
    };
    export class ResetWebAuthorizations extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class GetAllSecureValues extends Request<Partial<{
      
    }>, TypeSecureValue[]> {
      
    };
    export class GetSecureValue extends Request<Partial<{
      types: TypeSecureValueType[];
    }>, TypeSecureValue[]> {
      types: TypeSecureValueType[];
    };
    export class SaveSecureValue extends Request<Partial<{
      value: TypeInputSecureValue;
      secureSecretId: long;
    }>, TypeSecureValue> {
      value: TypeInputSecureValue;
      secureSecretId: long;
    };
    export class DeleteSecureValue extends Request<Partial<{
      types: TypeSecureValueType[];
    }>, Bool> {
      types: TypeSecureValueType[];
    };
    export class GetAuthorizationForm extends Request<Partial<{
      botId: int;
      scope: string;
      publicKey: string;
    }>, account.TypeAuthorizationForm> {
      botId: int;
      scope: string;
      publicKey: string;
    };
    export class AcceptAuthorization extends Request<Partial<{
      botId: int;
      scope: string;
      publicKey: string;
      valueHashes: TypeSecureValueHash[];
      credentials: TypeSecureCredentialsEncrypted;
    }>, Bool> {
      botId: int;
      scope: string;
      publicKey: string;
      valueHashes: TypeSecureValueHash[];
      credentials: TypeSecureCredentialsEncrypted;
    };
    export class SendVerifyPhoneCode extends Request<Partial<{
      phoneNumber: string;
      settings: TypeCodeSettings;
    }>, auth.TypeSentCode> {
      phoneNumber: string;
      settings: TypeCodeSettings;
    };
    export class VerifyPhone extends Request<Partial<{
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    }>, Bool> {
      phoneNumber: string;
      phoneCodeHash: string;
      phoneCode: string;
    };
    export class SendVerifyEmailCode extends Request<Partial<{
      email: string;
    }>, account.TypeSentEmailCode> {
      email: string;
    };
    export class VerifyEmail extends Request<Partial<{
      email: string;
      code: string;
    }>, Bool> {
      email: string;
      code: string;
    };
    export class InitTakeoutSession extends Request<Partial<{
      // flags: null;
      contacts?: true;
      messageUsers?: true;
      messageChats?: true;
      messageMegagroups?: true;
      messageChannels?: true;
      files?: true;
      fileMaxSize?: int;
    }>, account.TypeTakeout> {
      // flags: null;
      contacts?: true;
      messageUsers?: true;
      messageChats?: true;
      messageMegagroups?: true;
      messageChannels?: true;
      files?: true;
      fileMaxSize?: int;
    };
    export class FinishTakeoutSession extends Request<Partial<{
      // flags: null;
      success?: true;
    }>, Bool> {
      // flags: null;
      success?: true;
    };
    export class ConfirmPasswordEmail extends Request<Partial<{
      code: string;
    }>, Bool> {
      code: string;
    };
    export class ResendPasswordEmail extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class CancelPasswordEmail extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class GetContactSignUpNotification extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class SetContactSignUpNotification extends Request<Partial<{
      silent: Bool;
    }>, Bool> {
      silent: Bool;
    };
    export class GetNotifyExceptions extends Request<Partial<{
      // flags: null;
      compareSound?: true;
      peer?: TypeInputNotifyPeer;
    }>, TypeUpdates> {
      // flags: null;
      compareSound?: true;
      peer?: TypeInputNotifyPeer;
    };
    export class GetWallPaper extends Request<Partial<{
      wallpaper: TypeInputWallPaper;
    }>, TypeWallPaper> {
      wallpaper: TypeInputWallPaper;
    };
    export class UploadWallPaper extends Request<Partial<{
      file: TypeInputFile;
      mimeType: string;
      settings: TypeWallPaperSettings;
    }>, TypeWallPaper> {
      file: TypeInputFile;
      mimeType: string;
      settings: TypeWallPaperSettings;
    };
    export class SaveWallPaper extends Request<Partial<{
      wallpaper: TypeInputWallPaper;
      unsave: Bool;
      settings: TypeWallPaperSettings;
    }>, Bool> {
      wallpaper: TypeInputWallPaper;
      unsave: Bool;
      settings: TypeWallPaperSettings;
    };
    export class InstallWallPaper extends Request<Partial<{
      wallpaper: TypeInputWallPaper;
      settings: TypeWallPaperSettings;
    }>, Bool> {
      wallpaper: TypeInputWallPaper;
      settings: TypeWallPaperSettings;
    };
    export class ResetWallPapers extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class GetAutoDownloadSettings extends Request<Partial<{
      
    }>, account.TypeAutoDownloadSettings> {
      
    };
    export class SaveAutoDownloadSettings extends Request<Partial<{
      // flags: null;
      low?: true;
      high?: true;
      settings: TypeAutoDownloadSettings;
    }>, Bool> {
      // flags: null;
      low?: true;
      high?: true;
      settings: TypeAutoDownloadSettings;
    };
    export class UploadTheme extends Request<Partial<{
      // flags: null;
      file: TypeInputFile;
      thumb?: TypeInputFile;
      fileName: string;
      mimeType: string;
    }>, TypeDocument> {
      // flags: null;
      file: TypeInputFile;
      thumb?: TypeInputFile;
      fileName: string;
      mimeType: string;
    };
    export class CreateTheme extends Request<Partial<{
      slug: string;
      title: string;
      document: TypeInputDocument;
    }>, TypeTheme> {
      slug: string;
      title: string;
      document: TypeInputDocument;
    };
    export class UpdateTheme extends Request<Partial<{
      // flags: null;
      format: string;
      theme: TypeInputTheme;
      slug?: string;
      title?: string;
      document?: TypeInputDocument;
    }>, TypeTheme> {
      // flags: null;
      format: string;
      theme: TypeInputTheme;
      slug?: string;
      title?: string;
      document?: TypeInputDocument;
    };
    export class SaveTheme extends Request<Partial<{
      theme: TypeInputTheme;
      unsave: Bool;
    }>, Bool> {
      theme: TypeInputTheme;
      unsave: Bool;
    };
    export class InstallTheme extends Request<Partial<{
      // flags: null;
      dark?: true;
      format?: string;
      theme?: TypeInputTheme;
    }>, Bool> {
      // flags: null;
      dark?: true;
      format?: string;
      theme?: TypeInputTheme;
    };
    export class GetTheme extends Request<Partial<{
      format: string;
      theme: TypeInputTheme;
      documentId: long;
    }>, TypeTheme> {
      format: string;
      theme: TypeInputTheme;
      documentId: long;
    };
    export class GetThemes extends Request<Partial<{
      format: string;
      hash: int;
    }>, account.TypeThemes> {
      format: string;
      hash: int;
    };
  }

  export namespace users {
    export class GetUsers extends Request<Partial<{
      id: TypeInputUser[];
    }>, TypeUser[]> {
      id: TypeInputUser[];
    };
    export class GetFullUser extends Request<Partial<{
      id: TypeInputUser;
    }>, TypeUserFull> {
      id: TypeInputUser;
    };
    export class SetSecureValueErrors extends Request<Partial<{
      id: TypeInputUser;
      errors: TypeSecureValueError[];
    }>, Bool> {
      id: TypeInputUser;
      errors: TypeSecureValueError[];
    };
  }

  export namespace contacts {
    export class GetContactIDs extends Request<Partial<{
      hash: int;
    }>, int[]> {
      hash: int;
    };
    export class GetStatuses extends Request<Partial<{
      
    }>, TypeContactStatus[]> {
      
    };
    export class GetContacts extends Request<Partial<{
      hash: int;
    }>, contacts.TypeContacts> {
      hash: int;
    };
    export class ImportContacts extends Request<Partial<{
      contacts: TypeInputContact[];
    }>, contacts.TypeImportedContacts> {
      contacts: TypeInputContact[];
    };
    export class DeleteContacts extends Request<Partial<{
      id: TypeInputUser[];
    }>, TypeUpdates> {
      id: TypeInputUser[];
    };
    export class DeleteByPhones extends Request<Partial<{
      phones: string[];
    }>, Bool> {
      phones: string[];
    };
    export class Block extends Request<Partial<{
      id: TypeInputUser;
    }>, Bool> {
      id: TypeInputUser;
    };
    export class Unblock extends Request<Partial<{
      id: TypeInputUser;
    }>, Bool> {
      id: TypeInputUser;
    };
    export class GetBlocked extends Request<Partial<{
      offset: int;
      limit: int;
    }>, contacts.TypeBlocked> {
      offset: int;
      limit: int;
    };
    export class Search extends Request<Partial<{
      q: string;
      limit: int;
    }>, contacts.TypeFound> {
      q: string;
      limit: int;
    };
    export class ResolveUsername extends Request<Partial<{
      username: string;
    }>, contacts.TypeResolvedPeer> {
      username: string;
    };
    export class GetTopPeers extends Request<Partial<{
      // flags: null;
      correspondents?: true;
      botsPm?: true;
      botsInline?: true;
      phoneCalls?: true;
      forwardUsers?: true;
      forwardChats?: true;
      groups?: true;
      channels?: true;
      offset: int;
      limit: int;
      hash: int;
    }>, contacts.TypeTopPeers> {
      // flags: null;
      correspondents?: true;
      botsPm?: true;
      botsInline?: true;
      phoneCalls?: true;
      forwardUsers?: true;
      forwardChats?: true;
      groups?: true;
      channels?: true;
      offset: int;
      limit: int;
      hash: int;
    };
    export class ResetTopPeerRating extends Request<Partial<{
      category: TypeTopPeerCategory;
      peer: TypeInputPeer;
    }>, Bool> {
      category: TypeTopPeerCategory;
      peer: TypeInputPeer;
    };
    export class ResetSaved extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class GetSaved extends Request<Partial<{
      
    }>, TypeSavedContact[]> {
      
    };
    export class ToggleTopPeers extends Request<Partial<{
      enabled: Bool;
    }>, Bool> {
      enabled: Bool;
    };
    export class AddContact extends Request<Partial<{
      // flags: null;
      addPhonePrivacyException?: true;
      id: TypeInputUser;
      firstName: string;
      lastName: string;
      phone: string;
    }>, TypeUpdates> {
      // flags: null;
      addPhonePrivacyException?: true;
      id: TypeInputUser;
      firstName: string;
      lastName: string;
      phone: string;
    };
    export class AcceptContact extends Request<Partial<{
      id: TypeInputUser;
    }>, TypeUpdates> {
      id: TypeInputUser;
    };
    export class GetLocated extends Request<Partial<{
      geoPoint: TypeInputGeoPoint;
    }>, TypeUpdates> {
      geoPoint: TypeInputGeoPoint;
    };
  }

  export namespace messages {
    export class GetMessages extends Request<Partial<{
      id: TypeInputMessage[];
    }>, messages.TypeMessages> {
      id: TypeInputMessage[];
    };
    export class GetDialogs extends Request<Partial<{
      // flags: null;
      excludePinned?: true;
      folderId?: int;
      offsetDate: int;
      offsetId: int;
      offsetPeer: TypeInputPeer;
      limit: int;
      hash: int;
    }>, messages.TypeDialogs> {
      // flags: null;
      excludePinned?: true;
      folderId?: int;
      offsetDate: int;
      offsetId: int;
      offsetPeer: TypeInputPeer;
      limit: int;
      hash: int;
    };
    export class GetHistory extends Request<Partial<{
      peer: TypeInputPeer;
      offsetId: int;
      offsetDate: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
      hash: int;
    }>, messages.TypeMessages> {
      peer: TypeInputPeer;
      offsetId: int;
      offsetDate: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
      hash: int;
    };
    export class Search extends Request<Partial<{
      // flags: null;
      peer: TypeInputPeer;
      q: string;
      fromId?: TypeInputUser;
      filter: TypeMessagesFilter;
      minDate: int;
      maxDate: int;
      offsetId: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
      hash: int;
    }>, messages.TypeMessages> {
      // flags: null;
      peer: TypeInputPeer;
      q: string;
      fromId?: TypeInputUser;
      filter: TypeMessagesFilter;
      minDate: int;
      maxDate: int;
      offsetId: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
      hash: int;
    };
    export class ReadHistory extends Request<Partial<{
      peer: TypeInputPeer;
      maxId: int;
    }>, messages.TypeAffectedMessages> {
      peer: TypeInputPeer;
      maxId: int;
    };
    export class DeleteHistory extends Request<Partial<{
      // flags: null;
      justClear?: true;
      revoke?: true;
      peer: TypeInputPeer;
      maxId: int;
    }>, messages.TypeAffectedHistory> {
      // flags: null;
      justClear?: true;
      revoke?: true;
      peer: TypeInputPeer;
      maxId: int;
    };
    export class DeleteMessages extends Request<Partial<{
      // flags: null;
      revoke?: true;
      id: int[];
    }>, messages.TypeAffectedMessages> {
      // flags: null;
      revoke?: true;
      id: int[];
    };
    export class ReceivedMessages extends Request<Partial<{
      maxId: int;
    }>, TypeReceivedNotifyMessage[]> {
      maxId: int;
    };
    export class SetTyping extends Request<Partial<{
      peer: TypeInputPeer;
      action: TypeSendMessageAction;
    }>, Bool> {
      peer: TypeInputPeer;
      action: TypeSendMessageAction;
    };
    export class SendMessage extends Request<Partial<{
      // flags: null;
      noWebpage?: true;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      message: string;
      randomId: long;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      noWebpage?: true;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      message: string;
      randomId: long;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    };
    export class SendMedia extends Request<Partial<{
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      media: TypeInputMedia;
      message: string;
      randomId: long;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      media: TypeInputMedia;
      message: string;
      randomId: long;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    };
    export class ForwardMessages extends Request<Partial<{
      // flags: null;
      silent?: true;
      background?: true;
      withMyScore?: true;
      grouped?: true;
      fromPeer: TypeInputPeer;
      id: int[];
      randomId: long[];
      toPeer: TypeInputPeer;
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      silent?: true;
      background?: true;
      withMyScore?: true;
      grouped?: true;
      fromPeer: TypeInputPeer;
      id: int[];
      randomId: long[];
      toPeer: TypeInputPeer;
      scheduleDate?: int;
    };
    export class ReportSpam extends Request<Partial<{
      peer: TypeInputPeer;
    }>, Bool> {
      peer: TypeInputPeer;
    };
    export class GetPeerSettings extends Request<Partial<{
      peer: TypeInputPeer;
    }>, TypePeerSettings> {
      peer: TypeInputPeer;
    };
    export class Report extends Request<Partial<{
      peer: TypeInputPeer;
      id: int[];
      reason: TypeReportReason;
    }>, Bool> {
      peer: TypeInputPeer;
      id: int[];
      reason: TypeReportReason;
    };
    export class GetChats extends Request<Partial<{
      id: int[];
    }>, messages.TypeChats> {
      id: int[];
    };
    export class GetFullChat extends Request<Partial<{
      chatId: int;
    }>, messages.TypeChatFull> {
      chatId: int;
    };
    export class EditChatTitle extends Request<Partial<{
      chatId: int;
      title: string;
    }>, TypeUpdates> {
      chatId: int;
      title: string;
    };
    export class EditChatPhoto extends Request<Partial<{
      chatId: int;
      photo: TypeInputChatPhoto;
    }>, TypeUpdates> {
      chatId: int;
      photo: TypeInputChatPhoto;
    };
    export class AddChatUser extends Request<Partial<{
      chatId: int;
      userId: TypeInputUser;
      fwdLimit: int;
    }>, TypeUpdates> {
      chatId: int;
      userId: TypeInputUser;
      fwdLimit: int;
    };
    export class DeleteChatUser extends Request<Partial<{
      chatId: int;
      userId: TypeInputUser;
    }>, TypeUpdates> {
      chatId: int;
      userId: TypeInputUser;
    };
    export class CreateChat extends Request<Partial<{
      users: TypeInputUser[];
      title: string;
    }>, TypeUpdates> {
      users: TypeInputUser[];
      title: string;
    };
    export class GetDhConfig extends Request<Partial<{
      version: int;
      randomLength: int;
    }>, messages.TypeDhConfig> {
      version: int;
      randomLength: int;
    };
    export class RequestEncryption extends Request<Partial<{
      userId: TypeInputUser;
      randomId: int;
      gA: bytes;
    }>, TypeEncryptedChat> {
      userId: TypeInputUser;
      randomId: int;
      gA: bytes;
    };
    export class AcceptEncryption extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      gB: bytes;
      keyFingerprint: long;
    }>, TypeEncryptedChat> {
      peer: TypeInputEncryptedChat;
      gB: bytes;
      keyFingerprint: long;
    };
    export class DiscardEncryption extends Request<Partial<{
      chatId: int;
    }>, Bool> {
      chatId: int;
    };
    export class SetEncryptedTyping extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      typing: Bool;
    }>, Bool> {
      peer: TypeInputEncryptedChat;
      typing: Bool;
    };
    export class ReadEncryptedHistory extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      maxDate: int;
    }>, Bool> {
      peer: TypeInputEncryptedChat;
      maxDate: int;
    };
    export class SendEncrypted extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
    }>, messages.TypeSentEncryptedMessage> {
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
    };
    export class SendEncryptedFile extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
      file: TypeInputEncryptedFile;
    }>, messages.TypeSentEncryptedMessage> {
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
      file: TypeInputEncryptedFile;
    };
    export class SendEncryptedService extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
    }>, messages.TypeSentEncryptedMessage> {
      peer: TypeInputEncryptedChat;
      randomId: long;
      data: bytes;
    };
    export class ReceivedQueue extends Request<Partial<{
      maxQts: int;
    }>, long[]> {
      maxQts: int;
    };
    export class ReportEncryptedSpam extends Request<Partial<{
      peer: TypeInputEncryptedChat;
    }>, Bool> {
      peer: TypeInputEncryptedChat;
    };
    export class ReadMessageContents extends Request<Partial<{
      id: int[];
    }>, messages.TypeAffectedMessages> {
      id: int[];
    };
    export class GetStickers extends Request<Partial<{
      emoticon: string;
      hash: int;
    }>, messages.TypeStickers> {
      emoticon: string;
      hash: int;
    };
    export class GetAllStickers extends Request<Partial<{
      hash: int;
    }>, messages.TypeAllStickers> {
      hash: int;
    };
    export class GetWebPagePreview extends Request<Partial<{
      // flags: null;
      message: string;
      entities?: TypeMessageEntity[];
    }>, TypeMessageMedia> {
      // flags: null;
      message: string;
      entities?: TypeMessageEntity[];
    };
    export class ExportChatInvite extends Request<Partial<{
      peer: TypeInputPeer;
    }>, TypeExportedChatInvite> {
      peer: TypeInputPeer;
    };
    export class CheckChatInvite extends Request<Partial<{
      hash: string;
    }>, TypeChatInvite> {
      hash: string;
    };
    export class ImportChatInvite extends Request<Partial<{
      hash: string;
    }>, TypeUpdates> {
      hash: string;
    };
    export class GetStickerSet extends Request<Partial<{
      stickerset: TypeInputStickerSet;
    }>, messages.TypeStickerSet> {
      stickerset: TypeInputStickerSet;
    };
    export class InstallStickerSet extends Request<Partial<{
      stickerset: TypeInputStickerSet;
      archived: Bool;
    }>, messages.TypeStickerSetInstallResult> {
      stickerset: TypeInputStickerSet;
      archived: Bool;
    };
    export class UninstallStickerSet extends Request<Partial<{
      stickerset: TypeInputStickerSet;
    }>, Bool> {
      stickerset: TypeInputStickerSet;
    };
    export class StartBot extends Request<Partial<{
      bot: TypeInputUser;
      peer: TypeInputPeer;
      randomId: long;
      startParam: string;
    }>, TypeUpdates> {
      bot: TypeInputUser;
      peer: TypeInputPeer;
      randomId: long;
      startParam: string;
    };
    export class GetMessagesViews extends Request<Partial<{
      peer: TypeInputPeer;
      id: int[];
      increment: Bool;
    }>, int[]> {
      peer: TypeInputPeer;
      id: int[];
      increment: Bool;
    };
    export class EditChatAdmin extends Request<Partial<{
      chatId: int;
      userId: TypeInputUser;
      isAdmin: Bool;
    }>, Bool> {
      chatId: int;
      userId: TypeInputUser;
      isAdmin: Bool;
    };
    export class MigrateChat extends Request<Partial<{
      chatId: int;
    }>, TypeUpdates> {
      chatId: int;
    };
    export class SearchGlobal extends Request<Partial<{
      // flags: null;
      folderId?: int;
      q: string;
      offsetRate: int;
      offsetPeer: TypeInputPeer;
      offsetId: int;
      limit: int;
    }>, messages.TypeMessages> {
      // flags: null;
      folderId?: int;
      q: string;
      offsetRate: int;
      offsetPeer: TypeInputPeer;
      offsetId: int;
      limit: int;
    };
    export class ReorderStickerSets extends Request<Partial<{
      // flags: null;
      masks?: true;
      order: long[];
    }>, Bool> {
      // flags: null;
      masks?: true;
      order: long[];
    };
    export class GetDocumentByHash extends Request<Partial<{
      sha256: bytes;
      size: int;
      mimeType: string;
    }>, TypeDocument> {
      sha256: bytes;
      size: int;
      mimeType: string;
    };
    export class SearchGifs extends Request<Partial<{
      q: string;
      offset: int;
    }>, messages.TypeFoundGifs> {
      q: string;
      offset: int;
    };
    export class GetSavedGifs extends Request<Partial<{
      hash: int;
    }>, messages.TypeSavedGifs> {
      hash: int;
    };
    export class SaveGif extends Request<Partial<{
      id: TypeInputDocument;
      unsave: Bool;
    }>, Bool> {
      id: TypeInputDocument;
      unsave: Bool;
    };
    export class GetInlineBotResults extends Request<Partial<{
      // flags: null;
      bot: TypeInputUser;
      peer: TypeInputPeer;
      geoPoint?: TypeInputGeoPoint;
      query: string;
      offset: string;
    }>, messages.TypeBotResults> {
      // flags: null;
      bot: TypeInputUser;
      peer: TypeInputPeer;
      geoPoint?: TypeInputGeoPoint;
      query: string;
      offset: string;
    };
    export class SetInlineBotResults extends Request<Partial<{
      // flags: null;
      gallery?: true;
      private?: true;
      queryId: long;
      results: TypeInputBotInlineResult[];
      cacheTime: int;
      nextOffset?: string;
      switchPm?: TypeInlineBotSwitchPM;
    }>, Bool> {
      // flags: null;
      gallery?: true;
      private?: true;
      queryId: long;
      results: TypeInputBotInlineResult[];
      cacheTime: int;
      nextOffset?: string;
      switchPm?: TypeInlineBotSwitchPM;
    };
    export class SendInlineBotResult extends Request<Partial<{
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      hideVia?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      randomId: long;
      queryId: long;
      id: string;
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      hideVia?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      randomId: long;
      queryId: long;
      id: string;
      scheduleDate?: int;
    };
    export class GetMessageEditData extends Request<Partial<{
      peer: TypeInputPeer;
      id: int;
    }>, messages.TypeMessageEditData> {
      peer: TypeInputPeer;
      id: int;
    };
    export class EditMessage extends Request<Partial<{
      // flags: null;
      noWebpage?: true;
      peer: TypeInputPeer;
      id: int;
      message?: string;
      media?: TypeInputMedia;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      noWebpage?: true;
      peer: TypeInputPeer;
      id: int;
      message?: string;
      media?: TypeInputMedia;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
      scheduleDate?: int;
    };
    export class EditInlineBotMessage extends Request<Partial<{
      // flags: null;
      noWebpage?: true;
      id: TypeInputBotInlineMessageID;
      message?: string;
      media?: TypeInputMedia;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
    }>, Bool> {
      // flags: null;
      noWebpage?: true;
      id: TypeInputBotInlineMessageID;
      message?: string;
      media?: TypeInputMedia;
      replyMarkup?: TypeReplyMarkup;
      entities?: TypeMessageEntity[];
    };
    export class GetBotCallbackAnswer extends Request<Partial<{
      // flags: null;
      game?: true;
      peer: TypeInputPeer;
      msgId: int;
      data?: bytes;
    }>, messages.TypeBotCallbackAnswer> {
      // flags: null;
      game?: true;
      peer: TypeInputPeer;
      msgId: int;
      data?: bytes;
    };
    export class SetBotCallbackAnswer extends Request<Partial<{
      // flags: null;
      alert?: true;
      queryId: long;
      message?: string;
      url?: string;
      cacheTime: int;
    }>, Bool> {
      // flags: null;
      alert?: true;
      queryId: long;
      message?: string;
      url?: string;
      cacheTime: int;
    };
    export class GetPeerDialogs extends Request<Partial<{
      peers: TypeInputDialogPeer[];
    }>, messages.TypePeerDialogs> {
      peers: TypeInputDialogPeer[];
    };
    export class SaveDraft extends Request<Partial<{
      // flags: null;
      noWebpage?: true;
      replyToMsgId?: int;
      peer: TypeInputPeer;
      message: string;
      entities?: TypeMessageEntity[];
    }>, Bool> {
      // flags: null;
      noWebpage?: true;
      replyToMsgId?: int;
      peer: TypeInputPeer;
      message: string;
      entities?: TypeMessageEntity[];
    };
    export class GetAllDrafts extends Request<Partial<{
      
    }>, TypeUpdates> {
      
    };
    export class GetFeaturedStickers extends Request<Partial<{
      hash: int;
    }>, messages.TypeFeaturedStickers> {
      hash: int;
    };
    export class ReadFeaturedStickers extends Request<Partial<{
      id: long[];
    }>, Bool> {
      id: long[];
    };
    export class GetRecentStickers extends Request<Partial<{
      // flags: null;
      attached?: true;
      hash: int;
    }>, messages.TypeRecentStickers> {
      // flags: null;
      attached?: true;
      hash: int;
    };
    export class SaveRecentSticker extends Request<Partial<{
      // flags: null;
      attached?: true;
      id: TypeInputDocument;
      unsave: Bool;
    }>, Bool> {
      // flags: null;
      attached?: true;
      id: TypeInputDocument;
      unsave: Bool;
    };
    export class ClearRecentStickers extends Request<Partial<{
      // flags: null;
      attached?: true;
    }>, Bool> {
      // flags: null;
      attached?: true;
    };
    export class GetArchivedStickers extends Request<Partial<{
      // flags: null;
      masks?: true;
      offsetId: long;
      limit: int;
    }>, messages.TypeArchivedStickers> {
      // flags: null;
      masks?: true;
      offsetId: long;
      limit: int;
    };
    export class GetMaskStickers extends Request<Partial<{
      hash: int;
    }>, messages.TypeAllStickers> {
      hash: int;
    };
    export class GetAttachedStickers extends Request<Partial<{
      media: TypeInputStickeredMedia;
    }>, TypeStickerSetCovered[]> {
      media: TypeInputStickeredMedia;
    };
    export class SetGameScore extends Request<Partial<{
      // flags: null;
      editMessage?: true;
      force?: true;
      peer: TypeInputPeer;
      id: int;
      userId: TypeInputUser;
      score: int;
    }>, TypeUpdates> {
      // flags: null;
      editMessage?: true;
      force?: true;
      peer: TypeInputPeer;
      id: int;
      userId: TypeInputUser;
      score: int;
    };
    export class SetInlineGameScore extends Request<Partial<{
      // flags: null;
      editMessage?: true;
      force?: true;
      id: TypeInputBotInlineMessageID;
      userId: TypeInputUser;
      score: int;
    }>, Bool> {
      // flags: null;
      editMessage?: true;
      force?: true;
      id: TypeInputBotInlineMessageID;
      userId: TypeInputUser;
      score: int;
    };
    export class GetGameHighScores extends Request<Partial<{
      peer: TypeInputPeer;
      id: int;
      userId: TypeInputUser;
    }>, messages.TypeHighScores> {
      peer: TypeInputPeer;
      id: int;
      userId: TypeInputUser;
    };
    export class GetInlineGameHighScores extends Request<Partial<{
      id: TypeInputBotInlineMessageID;
      userId: TypeInputUser;
    }>, messages.TypeHighScores> {
      id: TypeInputBotInlineMessageID;
      userId: TypeInputUser;
    };
    export class GetCommonChats extends Request<Partial<{
      userId: TypeInputUser;
      maxId: int;
      limit: int;
    }>, messages.TypeChats> {
      userId: TypeInputUser;
      maxId: int;
      limit: int;
    };
    export class GetAllChats extends Request<Partial<{
      exceptIds: int[];
    }>, messages.TypeChats> {
      exceptIds: int[];
    };
    export class GetWebPage extends Request<Partial<{
      url: string;
      hash: int;
    }>, TypeWebPage> {
      url: string;
      hash: int;
    };
    export class ToggleDialogPin extends Request<Partial<{
      // flags: null;
      pinned?: true;
      peer: TypeInputDialogPeer;
    }>, Bool> {
      // flags: null;
      pinned?: true;
      peer: TypeInputDialogPeer;
    };
    export class ReorderPinnedDialogs extends Request<Partial<{
      // flags: null;
      force?: true;
      folderId: int;
      order: TypeInputDialogPeer[];
    }>, Bool> {
      // flags: null;
      force?: true;
      folderId: int;
      order: TypeInputDialogPeer[];
    };
    export class GetPinnedDialogs extends Request<Partial<{
      folderId: int;
    }>, messages.TypePeerDialogs> {
      folderId: int;
    };
    export class SetBotShippingResults extends Request<Partial<{
      // flags: null;
      queryId: long;
      error?: string;
      shippingOptions?: TypeShippingOption[];
    }>, Bool> {
      // flags: null;
      queryId: long;
      error?: string;
      shippingOptions?: TypeShippingOption[];
    };
    export class SetBotPrecheckoutResults extends Request<Partial<{
      // flags: null;
      success?: true;
      queryId: long;
      error?: string;
    }>, Bool> {
      // flags: null;
      success?: true;
      queryId: long;
      error?: string;
    };
    export class UploadMedia extends Request<Partial<{
      peer: TypeInputPeer;
      media: TypeInputMedia;
    }>, TypeMessageMedia> {
      peer: TypeInputPeer;
      media: TypeInputMedia;
    };
    export class SendScreenshotNotification extends Request<Partial<{
      peer: TypeInputPeer;
      replyToMsgId: int;
      randomId: long;
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      replyToMsgId: int;
      randomId: long;
    };
    export class GetFavedStickers extends Request<Partial<{
      hash: int;
    }>, messages.TypeFavedStickers> {
      hash: int;
    };
    export class FaveSticker extends Request<Partial<{
      id: TypeInputDocument;
      unfave: Bool;
    }>, Bool> {
      id: TypeInputDocument;
      unfave: Bool;
    };
    export class GetUnreadMentions extends Request<Partial<{
      peer: TypeInputPeer;
      offsetId: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
    }>, messages.TypeMessages> {
      peer: TypeInputPeer;
      offsetId: int;
      addOffset: int;
      limit: int;
      maxId: int;
      minId: int;
    };
    export class ReadMentions extends Request<Partial<{
      peer: TypeInputPeer;
    }>, messages.TypeAffectedHistory> {
      peer: TypeInputPeer;
    };
    export class GetRecentLocations extends Request<Partial<{
      peer: TypeInputPeer;
      limit: int;
      hash: int;
    }>, messages.TypeMessages> {
      peer: TypeInputPeer;
      limit: int;
      hash: int;
    };
    export class SendMultiMedia extends Request<Partial<{
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      multiMedia: TypeInputSingleMedia[];
      scheduleDate?: int;
    }>, TypeUpdates> {
      // flags: null;
      silent?: true;
      background?: true;
      clearDraft?: true;
      peer: TypeInputPeer;
      replyToMsgId?: int;
      multiMedia: TypeInputSingleMedia[];
      scheduleDate?: int;
    };
    export class UploadEncryptedFile extends Request<Partial<{
      peer: TypeInputEncryptedChat;
      file: TypeInputEncryptedFile;
    }>, TypeEncryptedFile> {
      peer: TypeInputEncryptedChat;
      file: TypeInputEncryptedFile;
    };
    export class SearchStickerSets extends Request<Partial<{
      // flags: null;
      excludeFeatured?: true;
      q: string;
      hash: int;
    }>, messages.TypeFoundStickerSets> {
      // flags: null;
      excludeFeatured?: true;
      q: string;
      hash: int;
    };
    export class GetSplitRanges extends Request<Partial<{
      
    }>, TypeMessageRange[]> {
      
    };
    export class MarkDialogUnread extends Request<Partial<{
      // flags: null;
      unread?: true;
      peer: TypeInputDialogPeer;
    }>, Bool> {
      // flags: null;
      unread?: true;
      peer: TypeInputDialogPeer;
    };
    export class GetDialogUnreadMarks extends Request<Partial<{
      
    }>, TypeDialogPeer[]> {
      
    };
    export class ClearAllDrafts extends Request<Partial<{
      
    }>, Bool> {
      
    };
    export class UpdatePinnedMessage extends Request<Partial<{
      // flags: null;
      silent?: true;
      peer: TypeInputPeer;
      id: int;
    }>, TypeUpdates> {
      // flags: null;
      silent?: true;
      peer: TypeInputPeer;
      id: int;
    };
    export class SendVote extends Request<Partial<{
      peer: TypeInputPeer;
      msgId: int;
      options: bytes[];
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      msgId: int;
      options: bytes[];
    };
    export class GetPollResults extends Request<Partial<{
      peer: TypeInputPeer;
      msgId: int;
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      msgId: int;
    };
    export class GetOnlines extends Request<Partial<{
      peer: TypeInputPeer;
    }>, TypeChatOnlines> {
      peer: TypeInputPeer;
    };
    export class GetStatsURL extends Request<Partial<{
      // flags: null;
      dark?: true;
      peer: TypeInputPeer;
      params: string;
    }>, TypeStatsURL> {
      // flags: null;
      dark?: true;
      peer: TypeInputPeer;
      params: string;
    };
    export class EditChatAbout extends Request<Partial<{
      peer: TypeInputPeer;
      about: string;
    }>, Bool> {
      peer: TypeInputPeer;
      about: string;
    };
    export class EditChatDefaultBannedRights extends Request<Partial<{
      peer: TypeInputPeer;
      bannedRights: TypeChatBannedRights;
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      bannedRights: TypeChatBannedRights;
    };
    export class GetEmojiKeywords extends Request<Partial<{
      langCode: string;
    }>, TypeEmojiKeywordsDifference> {
      langCode: string;
    };
    export class GetEmojiKeywordsDifference extends Request<Partial<{
      langCode: string;
      fromVersion: int;
    }>, TypeEmojiKeywordsDifference> {
      langCode: string;
      fromVersion: int;
    };
    export class GetEmojiKeywordsLanguages extends Request<Partial<{
      langCodes: string[];
    }>, TypeEmojiLanguage[]> {
      langCodes: string[];
    };
    export class GetEmojiURL extends Request<Partial<{
      langCode: string;
    }>, TypeEmojiURL> {
      langCode: string;
    };
    export class GetSearchCounters extends Request<Partial<{
      peer: TypeInputPeer;
      filters: TypeMessagesFilter[];
    }>, messages.TypeSearchCounter[]> {
      peer: TypeInputPeer;
      filters: TypeMessagesFilter[];
    };
    export class RequestUrlAuth extends Request<Partial<{
      peer: TypeInputPeer;
      msgId: int;
      buttonId: int;
    }>, TypeUrlAuthResult> {
      peer: TypeInputPeer;
      msgId: int;
      buttonId: int;
    };
    export class AcceptUrlAuth extends Request<Partial<{
      // flags: null;
      writeAllowed?: true;
      peer: TypeInputPeer;
      msgId: int;
      buttonId: int;
    }>, TypeUrlAuthResult> {
      // flags: null;
      writeAllowed?: true;
      peer: TypeInputPeer;
      msgId: int;
      buttonId: int;
    };
    export class HidePeerSettingsBar extends Request<Partial<{
      peer: TypeInputPeer;
    }>, Bool> {
      peer: TypeInputPeer;
    };
    export class GetScheduledHistory extends Request<Partial<{
      peer: TypeInputPeer;
      hash: int;
    }>, messages.TypeMessages> {
      peer: TypeInputPeer;
      hash: int;
    };
    export class GetScheduledMessages extends Request<Partial<{
      peer: TypeInputPeer;
      id: int[];
    }>, messages.TypeMessages> {
      peer: TypeInputPeer;
      id: int[];
    };
    export class SendScheduledMessages extends Request<Partial<{
      peer: TypeInputPeer;
      id: int[];
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      id: int[];
    };
    export class DeleteScheduledMessages extends Request<Partial<{
      peer: TypeInputPeer;
      id: int[];
    }>, TypeUpdates> {
      peer: TypeInputPeer;
      id: int[];
    };
  }

  export namespace updates {
    export class GetState extends Request<Partial<{
      
    }>, updates.TypeState> {
      
    };
    export class GetDifference extends Request<Partial<{
      // flags: null;
      pts: int;
      ptsTotalLimit?: int;
      date: int;
      qts: int;
    }>, updates.TypeDifference> {
      // flags: null;
      pts: int;
      ptsTotalLimit?: int;
      date: int;
      qts: int;
    };
    export class GetChannelDifference extends Request<Partial<{
      // flags: null;
      force?: true;
      channel: TypeInputChannel;
      filter: TypeChannelMessagesFilter;
      pts: int;
      limit: int;
    }>, updates.TypeChannelDifference> {
      // flags: null;
      force?: true;
      channel: TypeInputChannel;
      filter: TypeChannelMessagesFilter;
      pts: int;
      limit: int;
    };
  }

  export namespace photos {
    export class UpdateProfilePhoto extends Request<Partial<{
      id: TypeInputPhoto;
    }>, TypeUserProfilePhoto> {
      id: TypeInputPhoto;
    };
    export class UploadProfilePhoto extends Request<Partial<{
      file: TypeInputFile;
    }>, photos.TypePhoto> {
      file: TypeInputFile;
    };
    export class DeletePhotos extends Request<Partial<{
      id: TypeInputPhoto[];
    }>, long[]> {
      id: TypeInputPhoto[];
    };
    export class GetUserPhotos extends Request<Partial<{
      userId: TypeInputUser;
      offset: int;
      maxId: long;
      limit: int;
    }>, photos.TypePhotos> {
      userId: TypeInputUser;
      offset: int;
      maxId: long;
      limit: int;
    };
  }

  export namespace upload {
    export class SaveFilePart extends Request<Partial<{
      fileId: long;
      filePart: int;
      bytes: bytes;
    }>, Bool> {
      fileId: long;
      filePart: int;
      bytes: bytes;
    };
    export class GetFile extends Request<Partial<{
      // flags: null;
      precise?: true;
      location: TypeInputFileLocation;
      offset: int;
      limit: int;
    }>, upload.TypeFile> {
      // flags: null;
      precise?: true;
      location: TypeInputFileLocation;
      offset: int;
      limit: int;
    };
    export class SaveBigFilePart extends Request<Partial<{
      fileId: long;
      filePart: int;
      fileTotalParts: int;
      bytes: bytes;
    }>, Bool> {
      fileId: long;
      filePart: int;
      fileTotalParts: int;
      bytes: bytes;
    };
    export class GetWebFile extends Request<Partial<{
      location: TypeInputWebFileLocation;
      offset: int;
      limit: int;
    }>, upload.TypeWebFile> {
      location: TypeInputWebFileLocation;
      offset: int;
      limit: int;
    };
    export class GetCdnFile extends Request<Partial<{
      fileToken: bytes;
      offset: int;
      limit: int;
    }>, upload.TypeCdnFile> {
      fileToken: bytes;
      offset: int;
      limit: int;
    };
    export class ReuploadCdnFile extends Request<Partial<{
      fileToken: bytes;
      requestToken: bytes;
    }>, TypeFileHash[]> {
      fileToken: bytes;
      requestToken: bytes;
    };
    export class GetCdnFileHashes extends Request<Partial<{
      fileToken: bytes;
      offset: int;
    }>, TypeFileHash[]> {
      fileToken: bytes;
      offset: int;
    };
    export class GetFileHashes extends Request<Partial<{
      location: TypeInputFileLocation;
      offset: int;
    }>, TypeFileHash[]> {
      location: TypeInputFileLocation;
      offset: int;
    };
  }

  export namespace help {
    export class GetConfig extends Request<Partial<{
      
    }>, TypeConfig> {
      
    };
    export class GetNearestDc extends Request<Partial<{
      
    }>, TypeNearestDc> {
      
    };
    export class GetAppUpdate extends Request<Partial<{
      source: string;
    }>, help.TypeAppUpdate> {
      source: string;
    };
    export class GetInviteText extends Request<Partial<{
      
    }>, help.TypeInviteText> {
      
    };
    export class GetSupport extends Request<Partial<{
      
    }>, help.TypeSupport> {
      
    };
    export class GetAppChangelog extends Request<Partial<{
      prevAppVersion: string;
    }>, TypeUpdates> {
      prevAppVersion: string;
    };
    export class SetBotUpdatesStatus extends Request<Partial<{
      pendingUpdatesCount: int;
      message: string;
    }>, Bool> {
      pendingUpdatesCount: int;
      message: string;
    };
    export class GetCdnConfig extends Request<Partial<{
      
    }>, TypeCdnConfig> {
      
    };
    export class GetRecentMeUrls extends Request<Partial<{
      referer: string;
    }>, help.TypeRecentMeUrls> {
      referer: string;
    };
    export class GetProxyData extends Request<Partial<{
      
    }>, help.TypeProxyData> {
      
    };
    export class GetTermsOfServiceUpdate extends Request<Partial<{
      
    }>, help.TypeTermsOfServiceUpdate> {
      
    };
    export class AcceptTermsOfService extends Request<Partial<{
      id: TypeDataJSON;
    }>, Bool> {
      id: TypeDataJSON;
    };
    export class GetDeepLinkInfo extends Request<Partial<{
      path: string;
    }>, help.TypeDeepLinkInfo> {
      path: string;
    };
    export class GetAppConfig extends Request<Partial<{
      
    }>, TypeJSONValue> {
      
    };
    export class SaveAppLog extends Request<Partial<{
      events: TypeInputAppEvent[];
    }>, Bool> {
      events: TypeInputAppEvent[];
    };
    export class GetPassportConfig extends Request<Partial<{
      hash: int;
    }>, help.TypePassportConfig> {
      hash: int;
    };
    export class GetSupportName extends Request<Partial<{
      
    }>, help.TypeSupportName> {
      
    };
    export class GetUserInfo extends Request<Partial<{
      userId: TypeInputUser;
    }>, help.TypeUserInfo> {
      userId: TypeInputUser;
    };
    export class EditUserInfo extends Request<Partial<{
      userId: TypeInputUser;
      message: string;
      entities: TypeMessageEntity[];
    }>, help.TypeUserInfo> {
      userId: TypeInputUser;
      message: string;
      entities: TypeMessageEntity[];
    };
  }

  export namespace channels {
    export class ReadHistory extends Request<Partial<{
      channel: TypeInputChannel;
      maxId: int;
    }>, Bool> {
      channel: TypeInputChannel;
      maxId: int;
    };
    export class DeleteMessages extends Request<Partial<{
      channel: TypeInputChannel;
      id: int[];
    }>, messages.TypeAffectedMessages> {
      channel: TypeInputChannel;
      id: int[];
    };
    export class DeleteUserHistory extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
    }>, messages.TypeAffectedHistory> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
    };
    export class ReportSpam extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
      id: int[];
    }>, Bool> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
      id: int[];
    };
    export class GetMessages extends Request<Partial<{
      channel: TypeInputChannel;
      id: TypeInputMessage[];
    }>, messages.TypeMessages> {
      channel: TypeInputChannel;
      id: TypeInputMessage[];
    };
    export class GetParticipants extends Request<Partial<{
      channel: TypeInputChannel;
      filter: TypeChannelParticipantsFilter;
      offset: int;
      limit: int;
      hash: int;
    }>, channels.TypeChannelParticipants> {
      channel: TypeInputChannel;
      filter: TypeChannelParticipantsFilter;
      offset: int;
      limit: int;
      hash: int;
    };
    export class GetParticipant extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
    }>, channels.TypeChannelParticipant> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
    };
    export class GetChannels extends Request<Partial<{
      id: TypeInputChannel[];
    }>, messages.TypeChats> {
      id: TypeInputChannel[];
    };
    export class GetFullChannel extends Request<Partial<{
      channel: TypeInputChannel;
    }>, messages.TypeChatFull> {
      channel: TypeInputChannel;
    };
    export class CreateChannel extends Request<Partial<{
      // flags: null;
      broadcast?: true;
      megagroup?: true;
      title: string;
      about: string;
      geoPoint?: TypeInputGeoPoint;
      address?: string;
    }>, TypeUpdates> {
      // flags: null;
      broadcast?: true;
      megagroup?: true;
      title: string;
      about: string;
      geoPoint?: TypeInputGeoPoint;
      address?: string;
    };
    export class EditAdmin extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
      adminRights: TypeChatAdminRights;
      rank: string;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
      adminRights: TypeChatAdminRights;
      rank: string;
    };
    export class EditTitle extends Request<Partial<{
      channel: TypeInputChannel;
      title: string;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      title: string;
    };
    export class EditPhoto extends Request<Partial<{
      channel: TypeInputChannel;
      photo: TypeInputChatPhoto;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      photo: TypeInputChatPhoto;
    };
    export class CheckUsername extends Request<Partial<{
      channel: TypeInputChannel;
      username: string;
    }>, Bool> {
      channel: TypeInputChannel;
      username: string;
    };
    export class UpdateUsername extends Request<Partial<{
      channel: TypeInputChannel;
      username: string;
    }>, Bool> {
      channel: TypeInputChannel;
      username: string;
    };
    export class JoinChannel extends Request<Partial<{
      channel: TypeInputChannel;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
    };
    export class LeaveChannel extends Request<Partial<{
      channel: TypeInputChannel;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
    };
    export class InviteToChannel extends Request<Partial<{
      channel: TypeInputChannel;
      users: TypeInputUser[];
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      users: TypeInputUser[];
    };
    export class DeleteChannel extends Request<Partial<{
      channel: TypeInputChannel;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
    };
    export class ExportMessageLink extends Request<Partial<{
      channel: TypeInputChannel;
      id: int;
      grouped: Bool;
    }>, TypeExportedMessageLink> {
      channel: TypeInputChannel;
      id: int;
      grouped: Bool;
    };
    export class ToggleSignatures extends Request<Partial<{
      channel: TypeInputChannel;
      enabled: Bool;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      enabled: Bool;
    };
    export class GetAdminedPublicChannels extends Request<Partial<{
      // flags: null;
      byLocation?: true;
      checkLimit?: true;
    }>, messages.TypeChats> {
      // flags: null;
      byLocation?: true;
      checkLimit?: true;
    };
    export class EditBanned extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
      bannedRights: TypeChatBannedRights;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
      bannedRights: TypeChatBannedRights;
    };
    export class GetAdminLog extends Request<Partial<{
      // flags: null;
      channel: TypeInputChannel;
      q: string;
      eventsFilter?: TypeChannelAdminLogEventsFilter;
      admins?: TypeInputUser[];
      maxId: long;
      minId: long;
      limit: int;
    }>, channels.TypeAdminLogResults> {
      // flags: null;
      channel: TypeInputChannel;
      q: string;
      eventsFilter?: TypeChannelAdminLogEventsFilter;
      admins?: TypeInputUser[];
      maxId: long;
      minId: long;
      limit: int;
    };
    export class SetStickers extends Request<Partial<{
      channel: TypeInputChannel;
      stickerset: TypeInputStickerSet;
    }>, Bool> {
      channel: TypeInputChannel;
      stickerset: TypeInputStickerSet;
    };
    export class ReadMessageContents extends Request<Partial<{
      channel: TypeInputChannel;
      id: int[];
    }>, Bool> {
      channel: TypeInputChannel;
      id: int[];
    };
    export class DeleteHistory extends Request<Partial<{
      channel: TypeInputChannel;
      maxId: int;
    }>, Bool> {
      channel: TypeInputChannel;
      maxId: int;
    };
    export class TogglePreHistoryHidden extends Request<Partial<{
      channel: TypeInputChannel;
      enabled: Bool;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      enabled: Bool;
    };
    export class GetLeftChannels extends Request<Partial<{
      offset: int;
    }>, messages.TypeChats> {
      offset: int;
    };
    export class GetGroupsForDiscussion extends Request<Partial<{
      
    }>, messages.TypeChats> {
      
    };
    export class SetDiscussionGroup extends Request<Partial<{
      broadcast: TypeInputChannel;
      group: TypeInputChannel;
    }>, Bool> {
      broadcast: TypeInputChannel;
      group: TypeInputChannel;
    };
    export class EditCreator extends Request<Partial<{
      channel: TypeInputChannel;
      userId: TypeInputUser;
      password: TypeInputCheckPasswordSRP;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      userId: TypeInputUser;
      password: TypeInputCheckPasswordSRP;
    };
    export class EditLocation extends Request<Partial<{
      channel: TypeInputChannel;
      geoPoint: TypeInputGeoPoint;
      address: string;
    }>, Bool> {
      channel: TypeInputChannel;
      geoPoint: TypeInputGeoPoint;
      address: string;
    };
    export class ToggleSlowMode extends Request<Partial<{
      channel: TypeInputChannel;
      seconds: int;
    }>, TypeUpdates> {
      channel: TypeInputChannel;
      seconds: int;
    };
  }

  export namespace bots {
    export class SendCustomRequest extends Request<Partial<{
      customMethod: string;
      params: TypeDataJSON;
    }>, TypeDataJSON> {
      customMethod: string;
      params: TypeDataJSON;
    };
    export class AnswerWebhookJSONQuery extends Request<Partial<{
      queryId: long;
      data: TypeDataJSON;
    }>, Bool> {
      queryId: long;
      data: TypeDataJSON;
    };
  }

  export namespace payments {
    export class GetPaymentForm extends Request<Partial<{
      msgId: int;
    }>, payments.TypePaymentForm> {
      msgId: int;
    };
    export class GetPaymentReceipt extends Request<Partial<{
      msgId: int;
    }>, payments.TypePaymentReceipt> {
      msgId: int;
    };
    export class ValidateRequestedInfo extends Request<Partial<{
      // flags: null;
      save?: true;
      msgId: int;
      info: TypePaymentRequestedInfo;
    }>, payments.TypeValidatedRequestedInfo> {
      // flags: null;
      save?: true;
      msgId: int;
      info: TypePaymentRequestedInfo;
    };
    export class SendPaymentForm extends Request<Partial<{
      // flags: null;
      msgId: int;
      requestedInfoId?: string;
      shippingOptionId?: string;
      credentials: TypeInputPaymentCredentials;
    }>, payments.TypePaymentResult> {
      // flags: null;
      msgId: int;
      requestedInfoId?: string;
      shippingOptionId?: string;
      credentials: TypeInputPaymentCredentials;
    };
    export class GetSavedInfo extends Request<Partial<{
      
    }>, payments.TypeSavedInfo> {
      
    };
    export class ClearSavedInfo extends Request<Partial<{
      // flags: null;
      credentials?: true;
      info?: true;
    }>, Bool> {
      // flags: null;
      credentials?: true;
      info?: true;
    };
  }

  export namespace stickers {
    export class CreateStickerSet extends Request<Partial<{
      // flags: null;
      masks?: true;
      userId: TypeInputUser;
      title: string;
      shortName: string;
      stickers: TypeInputStickerSetItem[];
    }>, messages.TypeStickerSet> {
      // flags: null;
      masks?: true;
      userId: TypeInputUser;
      title: string;
      shortName: string;
      stickers: TypeInputStickerSetItem[];
    };
    export class RemoveStickerFromSet extends Request<Partial<{
      sticker: TypeInputDocument;
    }>, messages.TypeStickerSet> {
      sticker: TypeInputDocument;
    };
    export class ChangeStickerPosition extends Request<Partial<{
      sticker: TypeInputDocument;
      position: int;
    }>, messages.TypeStickerSet> {
      sticker: TypeInputDocument;
      position: int;
    };
    export class AddStickerToSet extends Request<Partial<{
      stickerset: TypeInputStickerSet;
      sticker: TypeInputStickerSetItem;
    }>, messages.TypeStickerSet> {
      stickerset: TypeInputStickerSet;
      sticker: TypeInputStickerSetItem;
    };
  }

  export namespace phone {
    export class GetCallConfig extends Request<Partial<{
      
    }>, TypeDataJSON> {
      
    };
    export class RequestCall extends Request<Partial<{
      // flags: null;
      video?: true;
      userId: TypeInputUser;
      randomId: int;
      gAHash: bytes;
      protocol: TypePhoneCallProtocol;
    }>, phone.TypePhoneCall> {
      // flags: null;
      video?: true;
      userId: TypeInputUser;
      randomId: int;
      gAHash: bytes;
      protocol: TypePhoneCallProtocol;
    };
    export class AcceptCall extends Request<Partial<{
      peer: TypeInputPhoneCall;
      gB: bytes;
      protocol: TypePhoneCallProtocol;
    }>, phone.TypePhoneCall> {
      peer: TypeInputPhoneCall;
      gB: bytes;
      protocol: TypePhoneCallProtocol;
    };
    export class ConfirmCall extends Request<Partial<{
      peer: TypeInputPhoneCall;
      gA: bytes;
      keyFingerprint: long;
      protocol: TypePhoneCallProtocol;
    }>, phone.TypePhoneCall> {
      peer: TypeInputPhoneCall;
      gA: bytes;
      keyFingerprint: long;
      protocol: TypePhoneCallProtocol;
    };
    export class ReceivedCall extends Request<Partial<{
      peer: TypeInputPhoneCall;
    }>, Bool> {
      peer: TypeInputPhoneCall;
    };
    export class DiscardCall extends Request<Partial<{
      // flags: null;
      video?: true;
      peer: TypeInputPhoneCall;
      duration: int;
      reason: TypePhoneCallDiscardReason;
      connectionId: long;
    }>, TypeUpdates> {
      // flags: null;
      video?: true;
      peer: TypeInputPhoneCall;
      duration: int;
      reason: TypePhoneCallDiscardReason;
      connectionId: long;
    };
    export class SetCallRating extends Request<Partial<{
      // flags: null;
      userInitiative?: true;
      peer: TypeInputPhoneCall;
      rating: int;
      comment: string;
    }>, TypeUpdates> {
      // flags: null;
      userInitiative?: true;
      peer: TypeInputPhoneCall;
      rating: int;
      comment: string;
    };
    export class SaveCallDebug extends Request<Partial<{
      peer: TypeInputPhoneCall;
      debug: TypeDataJSON;
    }>, Bool> {
      peer: TypeInputPhoneCall;
      debug: TypeDataJSON;
    };
  }

  export namespace langpack {
    export class GetLangPack extends Request<Partial<{
      langPack: string;
      langCode: string;
    }>, TypeLangPackDifference> {
      langPack: string;
      langCode: string;
    };
    export class GetStrings extends Request<Partial<{
      langPack: string;
      langCode: string;
      keys: string[];
    }>, TypeLangPackString[]> {
      langPack: string;
      langCode: string;
      keys: string[];
    };
    export class GetDifference extends Request<Partial<{
      langPack: string;
      langCode: string;
      fromVersion: int;
    }>, TypeLangPackDifference> {
      langPack: string;
      langCode: string;
      fromVersion: int;
    };
    export class GetLanguages extends Request<Partial<{
      langPack: string;
    }>, TypeLangPackLanguage[]> {
      langPack: string;
    };
    export class GetLanguage extends Request<Partial<{
      langPack: string;
      langCode: string;
    }>, TypeLangPackLanguage> {
      langPack: string;
      langCode: string;
    };
  }

  export namespace folders {
    export class EditPeerFolders extends Request<Partial<{
      folderPeers: TypeInputFolderPeer[];
    }>, TypeUpdates> {
      folderPeers: TypeInputFolderPeer[];
    };
    export class DeleteFolder extends Request<Partial<{
      folderId: int;
    }>, TypeUpdates> {
      folderId: int;
    };
  }

  export type AnyRequest = InvokeAfterMsg | InvokeAfterMsgs | InitConnection | InvokeWithLayer | InvokeWithoutUpdates | InvokeWithMessagesRange | InvokeWithTakeout | ReqPq | ReqPqMulti | ReqDHParams | SetClientDHParams | DestroyAuthKey | RpcDropAnswer | GetFutureSalts | Ping | PingDelayDisconnect | DestroySession
    | auth.SendCode | auth.SignUp | auth.SignIn | auth.LogOut | auth.ResetAuthorizations | auth.ExportAuthorization | auth.ImportAuthorization | auth.BindTempAuthKey | auth.ImportBotAuthorization | auth.CheckPassword | auth.RequestPasswordRecovery | auth.RecoverPassword | auth.ResendCode | auth.CancelCode | auth.DropTempAuthKeys
    | account.RegisterDevice | account.UnregisterDevice | account.UpdateNotifySettings | account.GetNotifySettings | account.ResetNotifySettings | account.UpdateProfile | account.UpdateStatus | account.GetWallPapers | account.ReportPeer | account.CheckUsername | account.UpdateUsername | account.GetPrivacy | account.SetPrivacy | account.DeleteAccount | account.GetAccountTTL | account.SetAccountTTL | account.SendChangePhoneCode | account.ChangePhone | account.UpdateDeviceLocked | account.GetAuthorizations | account.ResetAuthorization | account.GetPassword | account.GetPasswordSettings | account.UpdatePasswordSettings | account.SendConfirmPhoneCode | account.ConfirmPhone | account.GetTmpPassword | account.GetWebAuthorizations | account.ResetWebAuthorization | account.ResetWebAuthorizations | account.GetAllSecureValues | account.GetSecureValue | account.SaveSecureValue | account.DeleteSecureValue | account.GetAuthorizationForm | account.AcceptAuthorization | account.SendVerifyPhoneCode | account.VerifyPhone | account.SendVerifyEmailCode | account.VerifyEmail | account.InitTakeoutSession | account.FinishTakeoutSession | account.ConfirmPasswordEmail | account.ResendPasswordEmail | account.CancelPasswordEmail | account.GetContactSignUpNotification | account.SetContactSignUpNotification | account.GetNotifyExceptions | account.GetWallPaper | account.UploadWallPaper | account.SaveWallPaper | account.InstallWallPaper | account.ResetWallPapers | account.GetAutoDownloadSettings | account.SaveAutoDownloadSettings | account.UploadTheme | account.CreateTheme | account.UpdateTheme | account.SaveTheme | account.InstallTheme | account.GetTheme | account.GetThemes
    | users.GetUsers | users.GetFullUser | users.SetSecureValueErrors
    | contacts.GetContactIDs | contacts.GetStatuses | contacts.GetContacts | contacts.ImportContacts | contacts.DeleteContacts | contacts.DeleteByPhones | contacts.Block | contacts.Unblock | contacts.GetBlocked | contacts.Search | contacts.ResolveUsername | contacts.GetTopPeers | contacts.ResetTopPeerRating | contacts.ResetSaved | contacts.GetSaved | contacts.ToggleTopPeers | contacts.AddContact | contacts.AcceptContact | contacts.GetLocated
    | messages.GetMessages | messages.GetDialogs | messages.GetHistory | messages.Search | messages.ReadHistory | messages.DeleteHistory | messages.DeleteMessages | messages.ReceivedMessages | messages.SetTyping | messages.SendMessage | messages.SendMedia | messages.ForwardMessages | messages.ReportSpam | messages.GetPeerSettings | messages.Report | messages.GetChats | messages.GetFullChat | messages.EditChatTitle | messages.EditChatPhoto | messages.AddChatUser | messages.DeleteChatUser | messages.CreateChat | messages.GetDhConfig | messages.RequestEncryption | messages.AcceptEncryption | messages.DiscardEncryption | messages.SetEncryptedTyping | messages.ReadEncryptedHistory | messages.SendEncrypted | messages.SendEncryptedFile | messages.SendEncryptedService | messages.ReceivedQueue | messages.ReportEncryptedSpam | messages.ReadMessageContents | messages.GetStickers | messages.GetAllStickers | messages.GetWebPagePreview | messages.ExportChatInvite | messages.CheckChatInvite | messages.ImportChatInvite | messages.GetStickerSet | messages.InstallStickerSet | messages.UninstallStickerSet | messages.StartBot | messages.GetMessagesViews | messages.EditChatAdmin | messages.MigrateChat | messages.SearchGlobal | messages.ReorderStickerSets | messages.GetDocumentByHash | messages.SearchGifs | messages.GetSavedGifs | messages.SaveGif | messages.GetInlineBotResults | messages.SetInlineBotResults | messages.SendInlineBotResult | messages.GetMessageEditData | messages.EditMessage | messages.EditInlineBotMessage | messages.GetBotCallbackAnswer | messages.SetBotCallbackAnswer | messages.GetPeerDialogs | messages.SaveDraft | messages.GetAllDrafts | messages.GetFeaturedStickers | messages.ReadFeaturedStickers | messages.GetRecentStickers | messages.SaveRecentSticker | messages.ClearRecentStickers | messages.GetArchivedStickers | messages.GetMaskStickers | messages.GetAttachedStickers | messages.SetGameScore | messages.SetInlineGameScore | messages.GetGameHighScores | messages.GetInlineGameHighScores | messages.GetCommonChats | messages.GetAllChats | messages.GetWebPage | messages.ToggleDialogPin | messages.ReorderPinnedDialogs | messages.GetPinnedDialogs | messages.SetBotShippingResults | messages.SetBotPrecheckoutResults | messages.UploadMedia | messages.SendScreenshotNotification | messages.GetFavedStickers | messages.FaveSticker | messages.GetUnreadMentions | messages.ReadMentions | messages.GetRecentLocations | messages.SendMultiMedia | messages.UploadEncryptedFile | messages.SearchStickerSets | messages.GetSplitRanges | messages.MarkDialogUnread | messages.GetDialogUnreadMarks | messages.ClearAllDrafts | messages.UpdatePinnedMessage | messages.SendVote | messages.GetPollResults | messages.GetOnlines | messages.GetStatsURL | messages.EditChatAbout | messages.EditChatDefaultBannedRights | messages.GetEmojiKeywords | messages.GetEmojiKeywordsDifference | messages.GetEmojiKeywordsLanguages | messages.GetEmojiURL | messages.GetSearchCounters | messages.RequestUrlAuth | messages.AcceptUrlAuth | messages.HidePeerSettingsBar | messages.GetScheduledHistory | messages.GetScheduledMessages | messages.SendScheduledMessages | messages.DeleteScheduledMessages
    | updates.GetState | updates.GetDifference | updates.GetChannelDifference
    | photos.UpdateProfilePhoto | photos.UploadProfilePhoto | photos.DeletePhotos | photos.GetUserPhotos
    | upload.SaveFilePart | upload.GetFile | upload.SaveBigFilePart | upload.GetWebFile | upload.GetCdnFile | upload.ReuploadCdnFile | upload.GetCdnFileHashes | upload.GetFileHashes
    | help.GetConfig | help.GetNearestDc | help.GetAppUpdate | help.GetInviteText | help.GetSupport | help.GetAppChangelog | help.SetBotUpdatesStatus | help.GetCdnConfig | help.GetRecentMeUrls | help.GetProxyData | help.GetTermsOfServiceUpdate | help.AcceptTermsOfService | help.GetDeepLinkInfo | help.GetAppConfig | help.SaveAppLog | help.GetPassportConfig | help.GetSupportName | help.GetUserInfo | help.EditUserInfo
    | channels.ReadHistory | channels.DeleteMessages | channels.DeleteUserHistory | channels.ReportSpam | channels.GetMessages | channels.GetParticipants | channels.GetParticipant | channels.GetChannels | channels.GetFullChannel | channels.CreateChannel | channels.EditAdmin | channels.EditTitle | channels.EditPhoto | channels.CheckUsername | channels.UpdateUsername | channels.JoinChannel | channels.LeaveChannel | channels.InviteToChannel | channels.DeleteChannel | channels.ExportMessageLink | channels.ToggleSignatures | channels.GetAdminedPublicChannels | channels.EditBanned | channels.GetAdminLog | channels.SetStickers | channels.ReadMessageContents | channels.DeleteHistory | channels.TogglePreHistoryHidden | channels.GetLeftChannels | channels.GetGroupsForDiscussion | channels.SetDiscussionGroup | channels.EditCreator | channels.EditLocation | channels.ToggleSlowMode
    | bots.SendCustomRequest | bots.AnswerWebhookJSONQuery
    | payments.GetPaymentForm | payments.GetPaymentReceipt | payments.ValidateRequestedInfo | payments.SendPaymentForm | payments.GetSavedInfo | payments.ClearSavedInfo
    | stickers.CreateStickerSet | stickers.RemoveStickerFromSet | stickers.ChangeStickerPosition | stickers.AddStickerToSet
    | phone.GetCallConfig | phone.RequestCall | phone.AcceptCall | phone.ConfirmCall | phone.ReceivedCall | phone.DiscardCall | phone.SetCallRating | phone.SaveCallDebug
    | langpack.GetLangPack | langpack.GetStrings | langpack.GetDifference | langpack.GetLanguages | langpack.GetLanguage
    | folders.EditPeerFolders | folders.DeleteFolder;

}
